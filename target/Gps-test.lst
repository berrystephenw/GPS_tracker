
/home/sberry/workspace/particle/GPS/Gps-test/target/Gps-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00019fd8  2**0
                  CONTENTS
  3 .data         000000bc  2003d5d8  000d9ef0  0000d5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000115c  2003d694  2003d694  0001d694  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d9fac  000d9fac  00019fac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d9fd4  000d9fd4  00019fd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000bb9ad  00000000  00000000  00019fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00011fc3  00000000  00000000  000d5985  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002110  00000000  00000000  000e7948  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00035afc  00000000  00000000  000e9a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0002c55c  00000000  00000000  0011f554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000d6c2b  00000000  00000000  0014bab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00016685  00000000  00000000  002226db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003628  00000000  00000000  00238d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c574  00000000  00000000  0023c388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	e0 97 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fd75 	bl	d7b1c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fd7a 	bl	d7b32 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d5d8 	.word	0x2003d5d8
   d4048:	000d9ef0 	.word	0x000d9ef0
   d404c:	2003d694 	.word	0x2003d694
   d4050:	2003d694 	.word	0x2003d694
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 f969 	bl	d6330 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d9ee8 	.word	0x000d9ee8
   d4080:	000d9ea4 	.word	0x000d9ea4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b876 	b.w	d5174 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 ff73 	bl	d4f74 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 b91b 	b.w	d62cc <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bafb 	b.w	d5690 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 bb01 	b.w	d56a0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 baff 	b.w	d56a0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_ZN12Adafruit_GPS4readEv>:
  }

  return false;
}

char Adafruit_GPS::read(void) {
   d40b4:	b570      	push	{r4, r5, r6, lr}
  char c = 0;

  if (paused) return c;
   d40b6:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
  }

  return false;
}

char Adafruit_GPS::read(void) {
   d40ba:	4604      	mov	r4, r0
  char c = 0;

  if (paused) return c;
   d40bc:	b10d      	cbz	r5, d40c2 <_ZN12Adafruit_GPS4readEv+0xe>
   d40be:	2000      	movs	r0, #0
   d40c0:	bd70      	pop	{r4, r5, r6, pc}
    if(!gpsSwSerial->available()) return c;
    c = gpsSwSerial->read();
  } else
#endif
  {
    if(!gpsHwSerial->available()) return c;
   d40c2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   d40c4:	6803      	ldr	r3, [r0, #0]
   d40c6:	691b      	ldr	r3, [r3, #16]
   d40c8:	4798      	blx	r3
   d40ca:	2800      	cmp	r0, #0
   d40cc:	d0f7      	beq.n	d40be <_ZN12Adafruit_GPS4readEv+0xa>
    c = gpsHwSerial->read();
   d40ce:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	695b      	ldr	r3, [r3, #20]
   d40d4:	4798      	blx	r3
   d40d6:	b2c0      	uxtb	r0, r0

 // if (c == '$') {         //please don't eat the dollar sign - rdl 9/15/14
 //    currentline[lineidx] = 0;
 //    lineidx = 0;
 // }
  if (c == '\n') {
   d40d8:	280a      	cmp	r0, #10
   d40da:	4b14      	ldr	r3, [pc, #80]	; (d412c <_ZN12Adafruit_GPS4readEv+0x78>)
   d40dc:	4a14      	ldr	r2, [pc, #80]	; (d4130 <_ZN12Adafruit_GPS4readEv+0x7c>)
   d40de:	d116      	bne.n	d410e <_ZN12Adafruit_GPS4readEv+0x5a>
    currentline[lineidx] = 0;
   d40e0:	7819      	ldrb	r1, [r3, #0]
   d40e2:	6814      	ldr	r4, [r2, #0]
   d40e4:	b2c9      	uxtb	r1, r1
   d40e6:	5465      	strb	r5, [r4, r1]

    if (currentline == line1) {
   d40e8:	4d12      	ldr	r5, [pc, #72]	; (d4134 <_ZN12Adafruit_GPS4readEv+0x80>)
   d40ea:	6816      	ldr	r6, [r2, #0]
   d40ec:	4912      	ldr	r1, [pc, #72]	; (d4138 <_ZN12Adafruit_GPS4readEv+0x84>)
   d40ee:	4c13      	ldr	r4, [pc, #76]	; (d413c <_ZN12Adafruit_GPS4readEv+0x88>)
   d40f0:	42ae      	cmp	r6, r5
      currentline = line2;
      lastline = line1;
    } else {
      currentline = line1;
      lastline = line2;
   d40f2:	bf14      	ite	ne
   d40f4:	600c      	strne	r4, [r1, #0]
  if (c == '\n') {
    currentline[lineidx] = 0;

    if (currentline == line1) {
      currentline = line2;
      lastline = line1;
   d40f6:	600e      	streq	r6, [r1, #0]
    }

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
   d40f8:	f04f 0100 	mov.w	r1, #0
   d40fc:	7019      	strb	r1, [r3, #0]
    recvdflag = true;
   d40fe:	4910      	ldr	r1, [pc, #64]	; (d4140 <_ZN12Adafruit_GPS4readEv+0x8c>)
 // }
  if (c == '\n') {
    currentline[lineidx] = 0;

    if (currentline == line1) {
      currentline = line2;
   d4100:	bf08      	it	eq
   d4102:	6014      	streq	r4, [r2, #0]

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
    recvdflag = true;
   d4104:	f04f 0401 	mov.w	r4, #1

    if (currentline == line1) {
      currentline = line2;
      lastline = line1;
    } else {
      currentline = line1;
   d4108:	bf18      	it	ne
   d410a:	6015      	strne	r5, [r2, #0]

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
    recvdflag = true;
   d410c:	700c      	strb	r4, [r1, #0]
  }

  currentline[lineidx++] = c;
   d410e:	6814      	ldr	r4, [r2, #0]
   d4110:	781a      	ldrb	r2, [r3, #0]
   d4112:	b2d2      	uxtb	r2, r2
   d4114:	1c51      	adds	r1, r2, #1
   d4116:	b2c9      	uxtb	r1, r1
   d4118:	7019      	strb	r1, [r3, #0]
   d411a:	54a0      	strb	r0, [r4, r2]
  if (lineidx >= MAXLINELENGTH)
   d411c:	781b      	ldrb	r3, [r3, #0]
   d411e:	2b77      	cmp	r3, #119	; 0x77
    lineidx = MAXLINELENGTH-1;
   d4120:	bf82      	ittt	hi
   d4122:	4b02      	ldrhi	r3, [pc, #8]	; (d412c <_ZN12Adafruit_GPS4readEv+0x78>)
   d4124:	2277      	movhi	r2, #119	; 0x77
   d4126:	701a      	strbhi	r2, [r3, #0]

  return c;
}
   d4128:	bd70      	pop	{r4, r5, r6, pc}
   d412a:	bf00      	nop
   d412c:	2003d69c 	.word	0x2003d69c
   d4130:	2003d698 	.word	0x2003d698
   d4134:	2003d69d 	.word	0x2003d69d
   d4138:	2003d790 	.word	0x2003d790
   d413c:	2003d715 	.word	0x2003d715
   d4140:	2003d78d 	.word	0x2003d78d

000d4144 <_ZN12Adafruit_GPS11common_initEv>:
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
   d4144:	4a15      	ldr	r2, [pc, #84]	; (d419c <_ZN12Adafruit_GPS11common_initEv+0x58>)
  paused      = false;
  lineidx     = 0;
  currentline = line1;
   d4146:	4916      	ldr	r1, [pc, #88]	; (d41a0 <_ZN12Adafruit_GPS11common_initEv+0x5c>)
// Initialization code used by all constructor types
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
   d4148:	2300      	movs	r3, #0
  recvdflag   = false;
   d414a:	7013      	strb	r3, [r2, #0]
  paused      = false;
  lineidx     = 0;
   d414c:	4a15      	ldr	r2, [pc, #84]	; (d41a4 <_ZN12Adafruit_GPS11common_initEv+0x60>)
// Initialization code used by all constructor types
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
   d414e:	64c3      	str	r3, [r0, #76]	; 0x4c
  recvdflag   = false;
  paused      = false;
  lineidx     = 0;
   d4150:	7013      	strb	r3, [r2, #0]
  currentline = line1;
   d4152:	4a15      	ldr	r2, [pc, #84]	; (d41a8 <_ZN12Adafruit_GPS11common_initEv+0x64>)
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
  paused      = false;
   d4154:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  lineidx     = 0;
  currentline = line1;
   d4158:	6011      	str	r1, [r2, #0]
  lastline    = line2;
   d415a:	4a14      	ldr	r2, [pc, #80]	; (d41ac <_ZN12Adafruit_GPS11common_initEv+0x68>)
   d415c:	4914      	ldr	r1, [pc, #80]	; (d41b0 <_ZN12Adafruit_GPS11common_initEv+0x6c>)
   d415e:	6011      	str	r1, [r2, #0]

  hour = minute = seconds = year = month = day =
    fixquality = satellites = 0; // uint8_t
   d4160:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   d4164:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
   d4168:	7143      	strb	r3, [r0, #5]
   d416a:	7103      	strb	r3, [r0, #4]
   d416c:	70c3      	strb	r3, [r0, #3]
   d416e:	7083      	strb	r3, [r0, #2]
   d4170:	7043      	strb	r3, [r0, #1]
   d4172:	7003      	strb	r3, [r0, #0]
  lat = lon = mag = 0; // char
   d4174:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   d4178:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
   d417c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  fix = false; // boolean
   d4180:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
  milliseconds = 0; // uint16_t
   d4184:	80c3      	strh	r3, [r0, #6]
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
   d4186:	2300      	movs	r3, #0
   d4188:	6343      	str	r3, [r0, #52]	; 0x34
   d418a:	6303      	str	r3, [r0, #48]	; 0x30
   d418c:	62c3      	str	r3, [r0, #44]	; 0x2c
   d418e:	6283      	str	r3, [r0, #40]	; 0x28
   d4190:	6243      	str	r3, [r0, #36]	; 0x24
   d4192:	6203      	str	r3, [r0, #32]
   d4194:	60c3      	str	r3, [r0, #12]
   d4196:	6083      	str	r3, [r0, #8]
   d4198:	4770      	bx	lr
   d419a:	bf00      	nop
   d419c:	2003d78d 	.word	0x2003d78d
   d41a0:	2003d69d 	.word	0x2003d69d
   d41a4:	2003d69c 	.word	0x2003d69c
   d41a8:	2003d698 	.word	0x2003d698
   d41ac:	2003d790 	.word	0x2003d790
   d41b0:	2003d715 	.word	0x2003d715

000d41b4 <_ZN12Adafruit_GPSC1EP11USARTSerial>:
  gpsSwSerial = ser; // ...override gpsSwSerial with value passed.
}
#endif

// Constructor when using HardwareSerial
Adafruit_GPS::Adafruit_GPS(HardwareSerial *ser) {
   d41b4:	b538      	push	{r3, r4, r5, lr}
   d41b6:	460d      	mov	r5, r1
  common_init();  // Set everything to common state, then...
   d41b8:	f7ff ffc4 	bl	d4144 <_ZN12Adafruit_GPS11common_initEv>
  gpsHwSerial = ser; // ...override gpsHwSerial with value passed.
   d41bc:	64c5      	str	r5, [r0, #76]	; 0x4c
}
   d41be:	bd38      	pop	{r3, r4, r5, pc}

000d41c0 <_ZN12Adafruit_GPS5beginEm>:
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
}

void Adafruit_GPS::begin(uint32_t baud)
{
   d41c0:	b508      	push	{r3, lr}
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  if(gpsSwSerial)
    gpsSwSerial->begin(baud);
  else
#endif
    gpsHwSerial->begin(baud);
   d41c2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   d41c4:	f002 fa86 	bl	d66d4 <_ZN11USARTSerial5beginEm>

  delay(10);
   d41c8:	200a      	movs	r0, #10
}
   d41ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    gpsSwSerial->begin(baud);
  else
#endif
    gpsHwSerial->begin(baud);

  delay(10);
   d41ce:	f002 b85b 	b.w	d6288 <delay>

000d41d2 <_ZN12Adafruit_GPS11sendCommandEPKc>:
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  if(gpsSwSerial)
    gpsSwSerial->println(str);
  else
#endif
    gpsHwSerial->println(str);
   d41d2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   d41d4:	f002 ba01 	b.w	d65da <_ZN5Print7printlnEPKc>

000d41d8 <_ZN12Adafruit_GPS15newNMEAreceivedEv>:
}

boolean Adafruit_GPS::newNMEAreceived(void) {
  return recvdflag;
   d41d8:	4b01      	ldr	r3, [pc, #4]	; (d41e0 <_ZN12Adafruit_GPS15newNMEAreceivedEv+0x8>)
   d41da:	7818      	ldrb	r0, [r3, #0]
}
   d41dc:	4770      	bx	lr
   d41de:	bf00      	nop
   d41e0:	2003d78d 	.word	0x2003d78d

000d41e4 <_ZN12Adafruit_GPS8lastNMEAEv>:
void Adafruit_GPS::pause(boolean p) {
  paused = p;
}

char *Adafruit_GPS::lastNMEA(void) {
  recvdflag = false;
   d41e4:	4b02      	ldr	r3, [pc, #8]	; (d41f0 <_ZN12Adafruit_GPS8lastNMEAEv+0xc>)
   d41e6:	2200      	movs	r2, #0
   d41e8:	701a      	strb	r2, [r3, #0]
  return (char *)lastline;
}
   d41ea:	4b02      	ldr	r3, [pc, #8]	; (d41f4 <_ZN12Adafruit_GPS8lastNMEAEv+0x10>)
   d41ec:	6818      	ldr	r0, [r3, #0]
   d41ee:	4770      	bx	lr
   d41f0:	2003d78d 	.word	0x2003d78d
   d41f4:	2003d790 	.word	0x2003d790

000d41f8 <_ZN12Adafruit_GPS8parseHexEc>:

// read a Hex value and return the decimal equivalent
uint8_t Adafruit_GPS::parseHex(char c) {
    if (c < '0')
   d41f8:	292f      	cmp	r1, #47	; 0x2f
   d41fa:	d90a      	bls.n	d4212 <_ZN12Adafruit_GPS8parseHexEc+0x1a>
      return 0;
    if (c <= '9')
   d41fc:	2939      	cmp	r1, #57	; 0x39
   d41fe:	d801      	bhi.n	d4204 <_ZN12Adafruit_GPS8parseHexEc+0xc>
      return c - '0';
   d4200:	3930      	subs	r1, #48	; 0x30
   d4202:	e004      	b.n	d420e <_ZN12Adafruit_GPS8parseHexEc+0x16>
    if (c < 'A')
   d4204:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d4208:	2b05      	cmp	r3, #5
   d420a:	d802      	bhi.n	d4212 <_ZN12Adafruit_GPS8parseHexEc+0x1a>
       return 0;
    if (c <= 'F')
       return (c - 'A')+10;
   d420c:	3937      	subs	r1, #55	; 0x37
   d420e:	b2c8      	uxtb	r0, r1
   d4210:	4770      	bx	lr
}

// read a Hex value and return the decimal equivalent
uint8_t Adafruit_GPS::parseHex(char c) {
    if (c < '0')
      return 0;
   d4212:	2000      	movs	r0, #0
       return 0;
    if (c <= 'F')
       return (c - 'A')+10;
    // if (c > 'F')
    return 0;
}
   d4214:	4770      	bx	lr
	...

000d4218 <_ZN12Adafruit_GPS5parseEPc>:
volatile char *lastline;
volatile boolean recvdflag;
volatile boolean inStandbyMode;


boolean Adafruit_GPS::parse(char *nmea) {
   d4218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d421c:	4604      	mov	r4, r0
  // do checksum check

  // first look if we even have one
  if (nmea[strlen(nmea)-4] == '*') {
   d421e:	4608      	mov	r0, r1
volatile char *lastline;
volatile boolean recvdflag;
volatile boolean inStandbyMode;


boolean Adafruit_GPS::parse(char *nmea) {
   d4220:	460d      	mov	r5, r1
  // do checksum check

  // first look if we even have one
  if (nmea[strlen(nmea)-4] == '*') {
   d4222:	f003 fcc0 	bl	d7ba6 <strlen>
   d4226:	1f07      	subs	r7, r0, #4
   d4228:	5deb      	ldrb	r3, [r5, r7]
   d422a:	2b2a      	cmp	r3, #42	; 0x2a
   d422c:	d119      	bne.n	d4262 <_ZN12Adafruit_GPS5parseEPc+0x4a>
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
   d422e:	182e      	adds	r6, r5, r0
   d4230:	4620      	mov	r0, r4
   d4232:	f816 1c03 	ldrb.w	r1, [r6, #-3]
   d4236:	f7ff ffdf 	bl	d41f8 <_ZN12Adafruit_GPS8parseHexEc>
   d423a:	0100      	lsls	r0, r0, #4
   d423c:	b282      	uxth	r2, r0
    sum += parseHex(nmea[strlen(nmea)-2]);
   d423e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
   d4242:	4620      	mov	r0, r4
   d4244:	f7ff ffd8 	bl	d41f8 <_ZN12Adafruit_GPS8parseHexEc>
   d4248:	4410      	add	r0, r2
   d424a:	b280      	uxth	r0, r0

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
   d424c:	2302      	movs	r3, #2
   d424e:	429f      	cmp	r7, r3
   d4250:	d904      	bls.n	d425c <_ZN12Adafruit_GPS5parseEPc+0x44>
      sum ^= nmea[i];
   d4252:	5cea      	ldrb	r2, [r5, r3]
  if (nmea[strlen(nmea)-4] == '*') {
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
    sum += parseHex(nmea[strlen(nmea)-2]);

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
   d4254:	3301      	adds	r3, #1
      sum ^= nmea[i];
   d4256:	4050      	eors	r0, r2
  if (nmea[strlen(nmea)-4] == '*') {
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
    sum += parseHex(nmea[strlen(nmea)-2]);

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
   d4258:	b2db      	uxtb	r3, r3
   d425a:	e7f8      	b.n	d424e <_ZN12Adafruit_GPS5parseEPc+0x36>
      sum ^= nmea[i];
    }
    if (sum != 0) {
   d425c:	b108      	cbz	r0, d4262 <_ZN12Adafruit_GPS5parseEPc+0x4a>
      // bad checksum :(
      return false;
   d425e:	2000      	movs	r0, #0
   d4260:	e312      	b.n	d4888 <_ZN12Adafruit_GPS5parseEPc+0x670>
  }
  int32_t degree;
  long minutes;
  char degreebuff[10];
  // look for a few common sentences
  if ((strstr(nmea, "$GPGGA")) || (strstr(nmea, "$GNGGA"))) {
   d4262:	49c3      	ldr	r1, [pc, #780]	; (d4570 <_ZN12Adafruit_GPS5parseEPc+0x358>)
   d4264:	4628      	mov	r0, r5
   d4266:	f003 fcce 	bl	d7c06 <strstr>
   d426a:	b930      	cbnz	r0, d427a <_ZN12Adafruit_GPS5parseEPc+0x62>
   d426c:	49c1      	ldr	r1, [pc, #772]	; (d4574 <_ZN12Adafruit_GPS5parseEPc+0x35c>)
   d426e:	4628      	mov	r0, r5
   d4270:	f003 fcc9 	bl	d7c06 <strstr>
   d4274:	2800      	cmp	r0, #0
   d4276:	f000 818b 	beq.w	d4590 <_ZN12Adafruit_GPS5parseEPc+0x378>
    // found GGA
    char *p = nmea;
    // get time
    p = strchr(p, ',')+1;
   d427a:	212c      	movs	r1, #44	; 0x2c
   d427c:	4628      	mov	r0, r5
   d427e:	f003 fc60 	bl	d7b42 <strchr>
   d4282:	1c45      	adds	r5, r0, #1
    float timef = atof(p);
   d4284:	4628      	mov	r0, r5
   d4286:	f003 fc2b 	bl	d7ae0 <atof>
   d428a:	ec51 0b10 	vmov	r0, r1, d0
   d428e:	f003 fbd7 	bl	d7a40 <__aeabi_d2f>
    uint32_t time = timef;
   d4292:	ee07 0a90 	vmov	s15, r0
   d4296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    hour = time / 10000;
   d429a:	f242 7110 	movw	r1, #10000	; 0x2710
    // found GGA
    char *p = nmea;
    // get time
    p = strchr(p, ',')+1;
    float timef = atof(p);
    uint32_t time = timef;
   d429e:	ee17 2a90 	vmov	r2, s15
    hour = time / 10000;
    minute = (time % 10000) / 100;
   d42a2:	2664      	movs	r6, #100	; 0x64
    char *p = nmea;
    // get time
    p = strchr(p, ',')+1;
    float timef = atof(p);
    uint32_t time = timef;
    hour = time / 10000;
   d42a4:	fbb2 f3f1 	udiv	r3, r2, r1
   d42a8:	7023      	strb	r3, [r4, #0]
    minute = (time % 10000) / 100;
   d42aa:	fb01 2313 	mls	r3, r1, r3, r2
   d42ae:	fbb3 f3f6 	udiv	r3, r3, r6
   d42b2:	7063      	strb	r3, [r4, #1]
    seconds = (time % 100);
   d42b4:	fbb2 f3f6 	udiv	r3, r2, r6
   d42b8:	fb06 2213 	mls	r2, r6, r3, r2
   d42bc:	70a2      	strb	r2, [r4, #2]

    milliseconds = fmod(timef, 1.0) * 1000;
   d42be:	f003 f873 	bl	d73a8 <__aeabi_f2d>
   d42c2:	ed9f 1ba9 	vldr	d1, [pc, #676]	; d4568 <_ZN12Adafruit_GPS5parseEPc+0x350>
   d42c6:	ec41 0b10 	vmov	d0, r0, r1
   d42ca:	f002 fd61 	bl	d6d90 <fmod>
   d42ce:	4baa      	ldr	r3, [pc, #680]	; (d4578 <_ZN12Adafruit_GPS5parseEPc+0x360>)
   d42d0:	2200      	movs	r2, #0
   d42d2:	ec51 0b10 	vmov	r0, r1, d0
   d42d6:	f003 f8bb 	bl	d7450 <__aeabi_dmul>
   d42da:	f003 fb91 	bl	d7a00 <__aeabi_d2uiz>

    // parse out latitude
    p = strchr(p, ',')+1;
   d42de:	212c      	movs	r1, #44	; 0x2c
    uint32_t time = timef;
    hour = time / 10000;
    minute = (time % 10000) / 100;
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;
   d42e0:	80e0      	strh	r0, [r4, #6]

    // parse out latitude
    p = strchr(p, ',')+1;
   d42e2:	4628      	mov	r0, r5
   d42e4:	f003 fc2d 	bl	d7b42 <strchr>
    if (',' != *p)
   d42e8:	7843      	ldrb	r3, [r0, #1]
   d42ea:	2b2c      	cmp	r3, #44	; 0x2c
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;

    // parse out latitude
    p = strchr(p, ',')+1;
   d42ec:	4680      	mov	r8, r0
   d42ee:	f100 0701 	add.w	r7, r0, #1
    if (',' != *p)
   d42f2:	d052      	beq.n	d439a <_ZN12Adafruit_GPS5parseEPc+0x182>
    {
      strncpy(degreebuff, p, 2);
   d42f4:	4639      	mov	r1, r7
   d42f6:	2202      	movs	r2, #2
      p += 2;
      degreebuff[2] = '\0';
   d42f8:	f10d 0910 	add.w	r9, sp, #16

    // parse out latitude
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
   d42fc:	a801      	add	r0, sp, #4
   d42fe:	f003 fc6f 	bl	d7be0 <strncpy>
      p += 2;
      degreebuff[2] = '\0';
   d4302:	f04f 0a00 	mov.w	sl, #0
      degree = atol(degreebuff) * 10000000;
   d4306:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
   d4308:	f809 ad0a 	strb.w	sl, [r9, #-10]!
      degree = atol(degreebuff) * 10000000;
   d430c:	f003 fbef 	bl	d7aee <atol>
   d4310:	4d9a      	ldr	r5, [pc, #616]	; (d457c <_ZN12Adafruit_GPS5parseEPc+0x364>)
      strncpy(degreebuff, p, 2); // minutes
   d4312:	2202      	movs	r2, #2
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
   d4314:	4345      	muls	r5, r0
      strncpy(degreebuff, p, 2); // minutes
   d4316:	f108 0103 	add.w	r1, r8, #3
   d431a:	a801      	add	r0, sp, #4
      p += 3; // skip decimal point
   d431c:	f108 0706 	add.w	r7, r8, #6
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
   d4320:	f003 fc5e 	bl	d7be0 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
   d4324:	2204      	movs	r2, #4
   d4326:	4639      	mov	r1, r7
   d4328:	4648      	mov	r0, r9
   d432a:	f003 fc59 	bl	d7be0 <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
   d432e:	a801      	add	r0, sp, #4
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
   d4330:	f88d a00a 	strb.w	sl, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
   d4334:	f003 fbdb 	bl	d7aee <atol>
   d4338:	2332      	movs	r3, #50	; 0x32
   d433a:	4358      	muls	r0, r3
   d433c:	2303      	movs	r3, #3
   d433e:	fb90 f0f3 	sdiv	r0, r0, r3
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
   d4342:	ee07 0a90 	vmov	s15, r0
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
   d4346:	182b      	adds	r3, r5, r0
      latitude = degree / 100000 + minutes * 0.000006F;
   d4348:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
   d434c:	6123      	str	r3, [r4, #16]
      latitude = degree / 100000 + minutes * 0.000006F;
   d434e:	4b8c      	ldr	r3, [pc, #560]	; (d4580 <_ZN12Adafruit_GPS5parseEPc+0x368>)
   d4350:	fb95 f3f3 	sdiv	r3, r5, r3
   d4354:	ee07 3a90 	vmov	s15, r3
   d4358:	eddf 6a8a 	vldr	s13, [pc, #552]	; d4584 <_ZN12Adafruit_GPS5parseEPc+0x36c>
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
      latitudeDegrees += int(latitude/100);
   d435c:	ed9f 6a8a 	vldr	s12, [pc, #552]	; d4588 <_ZN12Adafruit_GPS5parseEPc+0x370>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
   d4360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4364:	eee7 7a26 	vfma.f32	s15, s14, s13
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
   d4368:	ed9f 7a88 	vldr	s14, [pc, #544]	; d458c <_ZN12Adafruit_GPS5parseEPc+0x374>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
   d436c:	edc4 7a02 	vstr	s15, [r4, #8]
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
   d4370:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d4374:	eefd 6ae6 	vcvt.s32.f32	s13, s13
      latitudeDegrees += int(latitude/100);
   d4378:	ee16 3a90 	vmov	r3, s13
   d437c:	435e      	muls	r6, r3
   d437e:	ee07 6a10 	vmov	s14, r6
   d4382:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d4386:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   d438a:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d438e:	ee87 7a86 	vdiv.f32	s14, s15, s12
   d4392:	ee77 6a26 	vadd.f32	s13, s14, s13
   d4396:	edc4 6a06 	vstr	s13, [r4, #24]
    }

    p = strchr(p, ',')+1;
   d439a:	212c      	movs	r1, #44	; 0x2c
   d439c:	4638      	mov	r0, r7
   d439e:	f003 fbd0 	bl	d7b42 <strchr>
   d43a2:	4603      	mov	r3, r0
   d43a4:	3001      	adds	r0, #1
    if (',' != *p)
   d43a6:	785a      	ldrb	r2, [r3, #1]
   d43a8:	2a2c      	cmp	r2, #44	; 0x2c
   d43aa:	d012      	beq.n	d43d2 <_ZN12Adafruit_GPS5parseEPc+0x1ba>
    {
      if (p[0] == 'S') latitudeDegrees *= -1.0;
   d43ac:	2a53      	cmp	r2, #83	; 0x53
   d43ae:	bf02      	ittt	eq
   d43b0:	edd4 7a06 	vldreq	s15, [r4, #24]
   d43b4:	eef1 7a67 	vnegeq.f32	s15, s15
   d43b8:	edc4 7a06 	vstreq	s15, [r4, #24]
      if (p[0] == 'N') lat = 'N';
   d43bc:	785b      	ldrb	r3, [r3, #1]
   d43be:	2b4e      	cmp	r3, #78	; 0x4e
   d43c0:	d005      	beq.n	d43ce <_ZN12Adafruit_GPS5parseEPc+0x1b6>
      else if (p[0] == 'S') lat = 'S';
   d43c2:	2b53      	cmp	r3, #83	; 0x53
   d43c4:	d003      	beq.n	d43ce <_ZN12Adafruit_GPS5parseEPc+0x1b6>
      else if (p[0] == ',') lat = 0;
   d43c6:	2b2c      	cmp	r3, #44	; 0x2c
   d43c8:	f47f af49 	bne.w	d425e <_ZN12Adafruit_GPS5parseEPc+0x46>
   d43cc:	2300      	movs	r3, #0
   d43ce:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
   d43d2:	212c      	movs	r1, #44	; 0x2c
   d43d4:	f003 fbb5 	bl	d7b42 <strchr>
    if (',' != *p)
   d43d8:	7843      	ldrb	r3, [r0, #1]
   d43da:	2b2c      	cmp	r3, #44	; 0x2c
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
   d43dc:	4607      	mov	r7, r0
   d43de:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
   d43e2:	d050      	beq.n	d4486 <_ZN12Adafruit_GPS5parseEPc+0x26e>
    {
      strncpy(degreebuff, p, 3);
   d43e4:	4631      	mov	r1, r6
   d43e6:	2203      	movs	r2, #3
   d43e8:	a801      	add	r0, sp, #4
   d43ea:	f003 fbf9 	bl	d7be0 <strncpy>
      p += 3;
      degreebuff[3] = '\0';
   d43ee:	f04f 0800 	mov.w	r8, #0
      degree = atol(degreebuff) * 10000000;
   d43f2:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
   d43f4:	f88d 8007 	strb.w	r8, [sp, #7]
      degree = atol(degreebuff) * 10000000;
   d43f8:	f003 fb79 	bl	d7aee <atol>
   d43fc:	4d5f      	ldr	r5, [pc, #380]	; (d457c <_ZN12Adafruit_GPS5parseEPc+0x364>)
      strncpy(degreebuff, p, 2); // minutes
   d43fe:	2202      	movs	r2, #2
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
   d4400:	4345      	muls	r5, r0
      strncpy(degreebuff, p, 2); // minutes
   d4402:	1d39      	adds	r1, r7, #4
   d4404:	a801      	add	r0, sp, #4
      p += 3; // skip decimal point
   d4406:	1dfe      	adds	r6, r7, #7
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
   d4408:	f003 fbea 	bl	d7be0 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
   d440c:	2204      	movs	r2, #4
   d440e:	4631      	mov	r1, r6
   d4410:	f10d 0006 	add.w	r0, sp, #6
   d4414:	f003 fbe4 	bl	d7be0 <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
   d4418:	a801      	add	r0, sp, #4
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
   d441a:	f88d 800a 	strb.w	r8, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
   d441e:	f003 fb66 	bl	d7aee <atol>
   d4422:	2332      	movs	r3, #50	; 0x32
   d4424:	4358      	muls	r0, r3
   d4426:	2303      	movs	r3, #3
   d4428:	fb90 f0f3 	sdiv	r0, r0, r3
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
   d442c:	ee07 0a90 	vmov	s15, r0
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
   d4430:	182b      	adds	r3, r5, r0
      longitude = degree / 100000 + minutes * 0.000006F;
   d4432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
   d4436:	6163      	str	r3, [r4, #20]
      longitude = degree / 100000 + minutes * 0.000006F;
   d4438:	4b51      	ldr	r3, [pc, #324]	; (d4580 <_ZN12Adafruit_GPS5parseEPc+0x368>)
   d443a:	fb95 f3f3 	sdiv	r3, r5, r3
   d443e:	ee07 3a90 	vmov	s15, r3
   d4442:	eddf 6a50 	vldr	s13, [pc, #320]	; d4584 <_ZN12Adafruit_GPS5parseEPc+0x36c>
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
      longitudeDegrees += int(longitude/100);
   d4446:	ed9f 6a50 	vldr	s12, [pc, #320]	; d4588 <_ZN12Adafruit_GPS5parseEPc+0x370>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
   d444a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
      longitudeDegrees += int(longitude/100);
   d444e:	2364      	movs	r3, #100	; 0x64
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
   d4450:	eee7 7a26 	vfma.f32	s15, s14, s13
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
   d4454:	eddf 6a4d 	vldr	s13, [pc, #308]	; d458c <_ZN12Adafruit_GPS5parseEPc+0x374>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
   d4458:	edc4 7a03 	vstr	s15, [r4, #12]
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
   d445c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d4460:	eebd 7ac7 	vcvt.s32.f32	s14, s14
      longitudeDegrees += int(longitude/100);
   d4464:	ee17 2a10 	vmov	r2, s14
   d4468:	4353      	muls	r3, r2
   d446a:	ee06 3a90 	vmov	s13, r3
   d446e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   d4472:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d4476:	ee77 7ae6 	vsub.f32	s15, s15, s13
   d447a:	eec7 6a86 	vdiv.f32	s13, s15, s12
   d447e:	ee36 7a87 	vadd.f32	s14, s13, s14
   d4482:	ed84 7a07 	vstr	s14, [r4, #28]
    }

    p = strchr(p, ',')+1;
   d4486:	212c      	movs	r1, #44	; 0x2c
   d4488:	4630      	mov	r0, r6
   d448a:	f003 fb5a 	bl	d7b42 <strchr>
   d448e:	4603      	mov	r3, r0
   d4490:	3001      	adds	r0, #1
    if (',' != *p)
   d4492:	785a      	ldrb	r2, [r3, #1]
   d4494:	2a2c      	cmp	r2, #44	; 0x2c
   d4496:	d012      	beq.n	d44be <_ZN12Adafruit_GPS5parseEPc+0x2a6>
    {
      if (p[0] == 'W') longitudeDegrees *= -1.0;
   d4498:	2a57      	cmp	r2, #87	; 0x57
   d449a:	bf02      	ittt	eq
   d449c:	edd4 7a07 	vldreq	s15, [r4, #28]
   d44a0:	eef1 7a67 	vnegeq.f32	s15, s15
   d44a4:	edc4 7a07 	vstreq	s15, [r4, #28]
      if (p[0] == 'W') lon = 'W';
   d44a8:	785b      	ldrb	r3, [r3, #1]
   d44aa:	2b57      	cmp	r3, #87	; 0x57
   d44ac:	d005      	beq.n	d44ba <_ZN12Adafruit_GPS5parseEPc+0x2a2>
      else if (p[0] == 'E') lon = 'E';
   d44ae:	2b45      	cmp	r3, #69	; 0x45
   d44b0:	d003      	beq.n	d44ba <_ZN12Adafruit_GPS5parseEPc+0x2a2>
      else if (p[0] == ',') lon = 0;
   d44b2:	2b2c      	cmp	r3, #44	; 0x2c
   d44b4:	f47f aed3 	bne.w	d425e <_ZN12Adafruit_GPS5parseEPc+0x46>
   d44b8:	2300      	movs	r3, #0
   d44ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      else return false;
    }

    p = strchr(p, ',')+1;
   d44be:	212c      	movs	r1, #44	; 0x2c
   d44c0:	f003 fb3f 	bl	d7b42 <strchr>
    if (',' != *p)
   d44c4:	7843      	ldrb	r3, [r0, #1]
   d44c6:	2b2c      	cmp	r3, #44	; 0x2c
      else if (p[0] == 'E') lon = 'E';
      else if (p[0] == ',') lon = 0;
      else return false;
    }

    p = strchr(p, ',')+1;
   d44c8:	f100 0501 	add.w	r5, r0, #1
    if (',' != *p)
   d44cc:	d004      	beq.n	d44d8 <_ZN12Adafruit_GPS5parseEPc+0x2c0>
    {
      fixquality = atoi(p);
   d44ce:	4628      	mov	r0, r5
   d44d0:	f003 fb09 	bl	d7ae6 <atoi>
   d44d4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    }

    p = strchr(p, ',')+1;
   d44d8:	4628      	mov	r0, r5
   d44da:	212c      	movs	r1, #44	; 0x2c
   d44dc:	f003 fb31 	bl	d7b42 <strchr>
    if (',' != *p)
   d44e0:	7843      	ldrb	r3, [r0, #1]
   d44e2:	2b2c      	cmp	r3, #44	; 0x2c
    if (',' != *p)
    {
      fixquality = atoi(p);
    }

    p = strchr(p, ',')+1;
   d44e4:	f100 0501 	add.w	r5, r0, #1
    if (',' != *p)
   d44e8:	d004      	beq.n	d44f4 <_ZN12Adafruit_GPS5parseEPc+0x2dc>
    {
      satellites = atoi(p);
   d44ea:	4628      	mov	r0, r5
   d44ec:	f003 fafb 	bl	d7ae6 <atoi>
   d44f0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    }

    p = strchr(p, ',')+1;
   d44f4:	4628      	mov	r0, r5
   d44f6:	212c      	movs	r1, #44	; 0x2c
   d44f8:	f003 fb23 	bl	d7b42 <strchr>
    if (',' != *p)
   d44fc:	7843      	ldrb	r3, [r0, #1]
   d44fe:	2b2c      	cmp	r3, #44	; 0x2c
    if (',' != *p)
    {
      satellites = atoi(p);
    }

    p = strchr(p, ',')+1;
   d4500:	f100 0501 	add.w	r5, r0, #1
    if (',' != *p)
   d4504:	d007      	beq.n	d4516 <_ZN12Adafruit_GPS5parseEPc+0x2fe>
    {
      HDOP = atof(p);
   d4506:	4628      	mov	r0, r5
   d4508:	f003 faea 	bl	d7ae0 <atof>
   d450c:	ec51 0b10 	vmov	r0, r1, d0
   d4510:	f003 fa96 	bl	d7a40 <__aeabi_d2f>
   d4514:	6360      	str	r0, [r4, #52]	; 0x34
    }

    p = strchr(p, ',')+1;
   d4516:	4628      	mov	r0, r5
   d4518:	212c      	movs	r1, #44	; 0x2c
   d451a:	f003 fb12 	bl	d7b42 <strchr>
    if (',' != *p)
   d451e:	7843      	ldrb	r3, [r0, #1]
   d4520:	2b2c      	cmp	r3, #44	; 0x2c
    if (',' != *p)
    {
      HDOP = atof(p);
    }

    p = strchr(p, ',')+1;
   d4522:	f100 0501 	add.w	r5, r0, #1
    if (',' != *p)
   d4526:	d007      	beq.n	d4538 <_ZN12Adafruit_GPS5parseEPc+0x320>
    {
      altitude = atof(p);
   d4528:	4628      	mov	r0, r5
   d452a:	f003 fad9 	bl	d7ae0 <atof>
   d452e:	ec51 0b10 	vmov	r0, r1, d0
   d4532:	f003 fa85 	bl	d7a40 <__aeabi_d2f>
   d4536:	6260      	str	r0, [r4, #36]	; 0x24
    }

    p = strchr(p, ',')+1;
   d4538:	212c      	movs	r1, #44	; 0x2c
   d453a:	4628      	mov	r0, r5
   d453c:	f003 fb01 	bl	d7b42 <strchr>
    p = strchr(p, ',')+1;
   d4540:	212c      	movs	r1, #44	; 0x2c
   d4542:	3001      	adds	r0, #1
   d4544:	f003 fafd 	bl	d7b42 <strchr>
    if (',' != *p)
   d4548:	7843      	ldrb	r3, [r0, #1]
   d454a:	2b2c      	cmp	r3, #44	; 0x2c
   d454c:	f000 819b 	beq.w	d4886 <_ZN12Adafruit_GPS5parseEPc+0x66e>
    {
      geoidheight = atof(p);
   d4550:	3001      	adds	r0, #1
   d4552:	f003 fac5 	bl	d7ae0 <atof>
   d4556:	ec51 0b10 	vmov	r0, r1, d0
   d455a:	f003 fa71 	bl	d7a40 <__aeabi_d2f>
   d455e:	6220      	str	r0, [r4, #32]
   d4560:	e191      	b.n	d4886 <_ZN12Adafruit_GPS5parseEPc+0x66e>
   d4562:	bf00      	nop
   d4564:	f3af 8000 	nop.w
   d4568:	00000000 	.word	0x00000000
   d456c:	3ff00000 	.word	0x3ff00000
   d4570:	000d97f4 	.word	0x000d97f4
   d4574:	000d97fb 	.word	0x000d97fb
   d4578:	408f4000 	.word	0x408f4000
   d457c:	00989680 	.word	0x00989680
   d4580:	000186a0 	.word	0x000186a0
   d4584:	36c9539c 	.word	0x36c9539c
   d4588:	42700000 	.word	0x42700000
   d458c:	42c80000 	.word	0x42c80000
    }
    return true;
  }
  if ((strstr(nmea, "$GPRMC")) || (strstr(nmea, "$GNRMC"))) {
   d4590:	49c1      	ldr	r1, [pc, #772]	; (d4898 <_ZN12Adafruit_GPS5parseEPc+0x680>)
   d4592:	4628      	mov	r0, r5
   d4594:	f003 fb37 	bl	d7c06 <strstr>
   d4598:	b930      	cbnz	r0, d45a8 <_ZN12Adafruit_GPS5parseEPc+0x390>
   d459a:	49c0      	ldr	r1, [pc, #768]	; (d489c <_ZN12Adafruit_GPS5parseEPc+0x684>)
   d459c:	4628      	mov	r0, r5
   d459e:	f003 fb32 	bl	d7c06 <strstr>
   d45a2:	2800      	cmp	r0, #0
   d45a4:	f43f ae5b 	beq.w	d425e <_ZN12Adafruit_GPS5parseEPc+0x46>
   // found RMC
    char *p = nmea;

    // get time
    p = strchr(p, ',')+1;
   d45a8:	212c      	movs	r1, #44	; 0x2c
   d45aa:	4628      	mov	r0, r5
   d45ac:	f003 fac9 	bl	d7b42 <strchr>
   d45b0:	1c45      	adds	r5, r0, #1
    float timef = atof(p);
   d45b2:	4628      	mov	r0, r5
   d45b4:	f003 fa94 	bl	d7ae0 <atof>
   d45b8:	ec51 0b10 	vmov	r0, r1, d0
   d45bc:	f003 fa40 	bl	d7a40 <__aeabi_d2f>
    uint32_t time = timef;
   d45c0:	ee07 0a90 	vmov	s15, r0
   d45c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    hour = time / 10000;
   d45c8:	f242 7110 	movw	r1, #10000	; 0x2710
    char *p = nmea;

    // get time
    p = strchr(p, ',')+1;
    float timef = atof(p);
    uint32_t time = timef;
   d45cc:	ee17 2a90 	vmov	r2, s15
    hour = time / 10000;
   d45d0:	fbb2 f3f1 	udiv	r3, r2, r1
   d45d4:	7023      	strb	r3, [r4, #0]
    minute = (time % 10000) / 100;
   d45d6:	fb01 2313 	mls	r3, r1, r3, r2
   d45da:	2164      	movs	r1, #100	; 0x64
   d45dc:	fbb3 f3f1 	udiv	r3, r3, r1
   d45e0:	7063      	strb	r3, [r4, #1]
    seconds = (time % 100);
   d45e2:	fbb2 f3f1 	udiv	r3, r2, r1
   d45e6:	fb01 2213 	mls	r2, r1, r3, r2
   d45ea:	70a2      	strb	r2, [r4, #2]

    milliseconds = fmod(timef, 1.0) * 1000;
   d45ec:	f002 fedc 	bl	d73a8 <__aeabi_f2d>
   d45f0:	ed9f 1ba7 	vldr	d1, [pc, #668]	; d4890 <_ZN12Adafruit_GPS5parseEPc+0x678>
   d45f4:	ec41 0b10 	vmov	d0, r0, r1
   d45f8:	f002 fbca 	bl	d6d90 <fmod>
   d45fc:	4ba8      	ldr	r3, [pc, #672]	; (d48a0 <_ZN12Adafruit_GPS5parseEPc+0x688>)
   d45fe:	2200      	movs	r2, #0
   d4600:	ec51 0b10 	vmov	r0, r1, d0
   d4604:	f002 ff24 	bl	d7450 <__aeabi_dmul>
   d4608:	f003 f9fa 	bl	d7a00 <__aeabi_d2uiz>

    p = strchr(p, ',')+1;
   d460c:	212c      	movs	r1, #44	; 0x2c
    uint32_t time = timef;
    hour = time / 10000;
    minute = (time % 10000) / 100;
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;
   d460e:	80e0      	strh	r0, [r4, #6]

    p = strchr(p, ',')+1;
   d4610:	4628      	mov	r0, r5
   d4612:	f003 fa96 	bl	d7b42 <strchr>
    // Serial.println(p);
    if (p[0] == 'A')
   d4616:	7843      	ldrb	r3, [r0, #1]
   d4618:	2b41      	cmp	r3, #65	; 0x41
   d461a:	d101      	bne.n	d4620 <_ZN12Adafruit_GPS5parseEPc+0x408>
      fix = true;
   d461c:	2301      	movs	r3, #1
   d461e:	e003      	b.n	d4628 <_ZN12Adafruit_GPS5parseEPc+0x410>
    else if (p[0] == 'V')
   d4620:	2b56      	cmp	r3, #86	; 0x56
   d4622:	f47f ae1c 	bne.w	d425e <_ZN12Adafruit_GPS5parseEPc+0x46>
      fix = false;
   d4626:	2300      	movs	r3, #0
   d4628:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    else
      return false;

    // parse out latitude
    p = strchr(p, ',')+1;
   d462c:	212c      	movs	r1, #44	; 0x2c
   d462e:	3001      	adds	r0, #1
   d4630:	f003 fa87 	bl	d7b42 <strchr>
    if (',' != *p)
   d4634:	7843      	ldrb	r3, [r0, #1]
   d4636:	2b2c      	cmp	r3, #44	; 0x2c
      fix = false;
    else
      return false;

    // parse out latitude
    p = strchr(p, ',')+1;
   d4638:	4607      	mov	r7, r0
   d463a:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
   d463e:	d051      	beq.n	d46e4 <_ZN12Adafruit_GPS5parseEPc+0x4cc>
    {
      strncpy(degreebuff, p, 2);
   d4640:	4631      	mov	r1, r6
   d4642:	2202      	movs	r2, #2
      p += 2;
      degreebuff[2] = '\0';
   d4644:	f10d 0810 	add.w	r8, sp, #16

    // parse out latitude
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
   d4648:	a801      	add	r0, sp, #4
   d464a:	f003 fac9 	bl	d7be0 <strncpy>
      p += 2;
      degreebuff[2] = '\0';
   d464e:	f04f 0900 	mov.w	r9, #0
      long degree = atol(degreebuff) * 10000000;
   d4652:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
   d4654:	f808 9d0a 	strb.w	r9, [r8, #-10]!
      long degree = atol(degreebuff) * 10000000;
   d4658:	f003 fa49 	bl	d7aee <atol>
   d465c:	4d91      	ldr	r5, [pc, #580]	; (d48a4 <_ZN12Adafruit_GPS5parseEPc+0x68c>)
      strncpy(degreebuff, p, 2); // minutes
   d465e:	2202      	movs	r2, #2
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
   d4660:	4345      	muls	r5, r0
      strncpy(degreebuff, p, 2); // minutes
   d4662:	1cf9      	adds	r1, r7, #3
   d4664:	a801      	add	r0, sp, #4
      p += 3; // skip decimal point
   d4666:	1dbe      	adds	r6, r7, #6
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
   d4668:	f003 faba 	bl	d7be0 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
   d466c:	2204      	movs	r2, #4
   d466e:	4631      	mov	r1, r6
   d4670:	4640      	mov	r0, r8
   d4672:	f003 fab5 	bl	d7be0 <strncpy>
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
   d4676:	a801      	add	r0, sp, #4
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
   d4678:	f88d 900a 	strb.w	r9, [sp, #10]
      long minutes = 50 * atol(degreebuff) / 3;
   d467c:	f003 fa37 	bl	d7aee <atol>
   d4680:	2332      	movs	r3, #50	; 0x32
   d4682:	4358      	muls	r0, r3
   d4684:	2303      	movs	r3, #3
   d4686:	fb90 f0f3 	sdiv	r0, r0, r3
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
   d468a:	ee07 0a90 	vmov	s15, r0
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
   d468e:	182b      	adds	r3, r5, r0
      latitude = degree / 100000 + minutes * 0.000006F;
   d4690:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
   d4694:	6123      	str	r3, [r4, #16]
      latitude = degree / 100000 + minutes * 0.000006F;
   d4696:	4b84      	ldr	r3, [pc, #528]	; (d48a8 <_ZN12Adafruit_GPS5parseEPc+0x690>)
   d4698:	fb95 f3f3 	sdiv	r3, r5, r3
   d469c:	ee07 3a90 	vmov	s15, r3
   d46a0:	eddf 6a82 	vldr	s13, [pc, #520]	; d48ac <_ZN12Adafruit_GPS5parseEPc+0x694>
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
      latitudeDegrees += int(latitude/100);
   d46a4:	ed9f 6a82 	vldr	s12, [pc, #520]	; d48b0 <_ZN12Adafruit_GPS5parseEPc+0x698>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
   d46a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
      latitudeDegrees += int(latitude/100);
   d46ac:	2364      	movs	r3, #100	; 0x64
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
   d46ae:	eee7 7a26 	vfma.f32	s15, s14, s13
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
   d46b2:	eddf 6a80 	vldr	s13, [pc, #512]	; d48b4 <_ZN12Adafruit_GPS5parseEPc+0x69c>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
   d46b6:	edc4 7a02 	vstr	s15, [r4, #8]
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
   d46ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d46be:	eebd 7ac7 	vcvt.s32.f32	s14, s14
      latitudeDegrees += int(latitude/100);
   d46c2:	ee17 2a10 	vmov	r2, s14
   d46c6:	4353      	muls	r3, r2
   d46c8:	ee06 3a90 	vmov	s13, r3
   d46cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   d46d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d46d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
   d46d8:	eec7 6a86 	vdiv.f32	s13, s15, s12
   d46dc:	ee36 7a87 	vadd.f32	s14, s13, s14
   d46e0:	ed84 7a06 	vstr	s14, [r4, #24]
    }

    p = strchr(p, ',')+1;
   d46e4:	212c      	movs	r1, #44	; 0x2c
   d46e6:	4630      	mov	r0, r6
   d46e8:	f003 fa2b 	bl	d7b42 <strchr>
   d46ec:	4603      	mov	r3, r0
   d46ee:	3001      	adds	r0, #1
    if (',' != *p)
   d46f0:	785a      	ldrb	r2, [r3, #1]
   d46f2:	2a2c      	cmp	r2, #44	; 0x2c
   d46f4:	d012      	beq.n	d471c <_ZN12Adafruit_GPS5parseEPc+0x504>
    {
      if (p[0] == 'S') latitudeDegrees *= -1.0;
   d46f6:	2a53      	cmp	r2, #83	; 0x53
   d46f8:	bf02      	ittt	eq
   d46fa:	edd4 7a06 	vldreq	s15, [r4, #24]
   d46fe:	eef1 7a67 	vnegeq.f32	s15, s15
   d4702:	edc4 7a06 	vstreq	s15, [r4, #24]
      if (p[0] == 'N') lat = 'N';
   d4706:	785b      	ldrb	r3, [r3, #1]
   d4708:	2b4e      	cmp	r3, #78	; 0x4e
   d470a:	d005      	beq.n	d4718 <_ZN12Adafruit_GPS5parseEPc+0x500>
      else if (p[0] == 'S') lat = 'S';
   d470c:	2b53      	cmp	r3, #83	; 0x53
   d470e:	d003      	beq.n	d4718 <_ZN12Adafruit_GPS5parseEPc+0x500>
      else if (p[0] == ',') lat = 0;
   d4710:	2b2c      	cmp	r3, #44	; 0x2c
   d4712:	f47f ada4 	bne.w	d425e <_ZN12Adafruit_GPS5parseEPc+0x46>
   d4716:	2300      	movs	r3, #0
   d4718:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
   d471c:	212c      	movs	r1, #44	; 0x2c
   d471e:	f003 fa10 	bl	d7b42 <strchr>
    if (',' != *p)
   d4722:	7843      	ldrb	r3, [r0, #1]
   d4724:	2b2c      	cmp	r3, #44	; 0x2c
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
   d4726:	4607      	mov	r7, r0
   d4728:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
   d472c:	d050      	beq.n	d47d0 <_ZN12Adafruit_GPS5parseEPc+0x5b8>
    {
      strncpy(degreebuff, p, 3);
   d472e:	4631      	mov	r1, r6
   d4730:	2203      	movs	r2, #3
   d4732:	a801      	add	r0, sp, #4
   d4734:	f003 fa54 	bl	d7be0 <strncpy>
      p += 3;
      degreebuff[3] = '\0';
   d4738:	f04f 0800 	mov.w	r8, #0
      degree = atol(degreebuff) * 10000000;
   d473c:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
   d473e:	f88d 8007 	strb.w	r8, [sp, #7]
      degree = atol(degreebuff) * 10000000;
   d4742:	f003 f9d4 	bl	d7aee <atol>
   d4746:	4d57      	ldr	r5, [pc, #348]	; (d48a4 <_ZN12Adafruit_GPS5parseEPc+0x68c>)
      strncpy(degreebuff, p, 2); // minutes
   d4748:	2202      	movs	r2, #2
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
   d474a:	4345      	muls	r5, r0
      strncpy(degreebuff, p, 2); // minutes
   d474c:	1d39      	adds	r1, r7, #4
   d474e:	a801      	add	r0, sp, #4
      p += 3; // skip decimal point
   d4750:	1dfe      	adds	r6, r7, #7
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
   d4752:	f003 fa45 	bl	d7be0 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
   d4756:	2204      	movs	r2, #4
   d4758:	4631      	mov	r1, r6
   d475a:	f10d 0006 	add.w	r0, sp, #6
   d475e:	f003 fa3f 	bl	d7be0 <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
   d4762:	a801      	add	r0, sp, #4
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
   d4764:	f88d 800a 	strb.w	r8, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
   d4768:	f003 f9c1 	bl	d7aee <atol>
   d476c:	2332      	movs	r3, #50	; 0x32
   d476e:	4358      	muls	r0, r3
   d4770:	2303      	movs	r3, #3
   d4772:	fb90 f0f3 	sdiv	r0, r0, r3
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
   d4776:	ee07 0a90 	vmov	s15, r0
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
   d477a:	182b      	adds	r3, r5, r0
      longitude = degree / 100000 + minutes * 0.000006F;
   d477c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
   d4780:	6163      	str	r3, [r4, #20]
      longitude = degree / 100000 + minutes * 0.000006F;
   d4782:	4b49      	ldr	r3, [pc, #292]	; (d48a8 <_ZN12Adafruit_GPS5parseEPc+0x690>)
   d4784:	fb95 f3f3 	sdiv	r3, r5, r3
   d4788:	ee07 3a90 	vmov	s15, r3
   d478c:	eddf 6a47 	vldr	s13, [pc, #284]	; d48ac <_ZN12Adafruit_GPS5parseEPc+0x694>
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
      longitudeDegrees += int(longitude/100);
   d4790:	ed9f 6a47 	vldr	s12, [pc, #284]	; d48b0 <_ZN12Adafruit_GPS5parseEPc+0x698>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
   d4794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
      longitudeDegrees += int(longitude/100);
   d4798:	2364      	movs	r3, #100	; 0x64
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
   d479a:	eee7 7a26 	vfma.f32	s15, s14, s13
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
   d479e:	eddf 6a45 	vldr	s13, [pc, #276]	; d48b4 <_ZN12Adafruit_GPS5parseEPc+0x69c>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
   d47a2:	edc4 7a03 	vstr	s15, [r4, #12]
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
   d47a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d47aa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
      longitudeDegrees += int(longitude/100);
   d47ae:	ee17 2a10 	vmov	r2, s14
   d47b2:	4353      	muls	r3, r2
   d47b4:	ee06 3a90 	vmov	s13, r3
   d47b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   d47bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d47c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
   d47c4:	eec7 6a86 	vdiv.f32	s13, s15, s12
   d47c8:	ee36 7a87 	vadd.f32	s14, s13, s14
   d47cc:	ed84 7a07 	vstr	s14, [r4, #28]
    }

    p = strchr(p, ',')+1;
   d47d0:	212c      	movs	r1, #44	; 0x2c
   d47d2:	4630      	mov	r0, r6
   d47d4:	f003 f9b5 	bl	d7b42 <strchr>
   d47d8:	4603      	mov	r3, r0
   d47da:	3001      	adds	r0, #1
    if (',' != *p)
   d47dc:	785a      	ldrb	r2, [r3, #1]
   d47de:	2a2c      	cmp	r2, #44	; 0x2c
   d47e0:	d012      	beq.n	d4808 <_ZN12Adafruit_GPS5parseEPc+0x5f0>
    {
      if (p[0] == 'W') longitudeDegrees *= -1.0;
   d47e2:	2a57      	cmp	r2, #87	; 0x57
   d47e4:	bf02      	ittt	eq
   d47e6:	edd4 7a07 	vldreq	s15, [r4, #28]
   d47ea:	eef1 7a67 	vnegeq.f32	s15, s15
   d47ee:	edc4 7a07 	vstreq	s15, [r4, #28]
      if (p[0] == 'W') lon = 'W';
   d47f2:	785b      	ldrb	r3, [r3, #1]
   d47f4:	2b57      	cmp	r3, #87	; 0x57
   d47f6:	d005      	beq.n	d4804 <_ZN12Adafruit_GPS5parseEPc+0x5ec>
      else if (p[0] == 'E') lon = 'E';
   d47f8:	2b45      	cmp	r3, #69	; 0x45
   d47fa:	d003      	beq.n	d4804 <_ZN12Adafruit_GPS5parseEPc+0x5ec>
      else if (p[0] == ',') lon = 0;
   d47fc:	2b2c      	cmp	r3, #44	; 0x2c
   d47fe:	f47f ad2e 	bne.w	d425e <_ZN12Adafruit_GPS5parseEPc+0x46>
   d4802:	2300      	movs	r3, #0
   d4804:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      else return false;
    }
    // speed
    p = strchr(p, ',')+1;
   d4808:	212c      	movs	r1, #44	; 0x2c
   d480a:	f003 f99a 	bl	d7b42 <strchr>
    if (',' != *p)
   d480e:	7843      	ldrb	r3, [r0, #1]
   d4810:	2b2c      	cmp	r3, #44	; 0x2c
      else if (p[0] == 'E') lon = 'E';
      else if (p[0] == ',') lon = 0;
      else return false;
    }
    // speed
    p = strchr(p, ',')+1;
   d4812:	f100 0501 	add.w	r5, r0, #1
    if (',' != *p)
   d4816:	d007      	beq.n	d4828 <_ZN12Adafruit_GPS5parseEPc+0x610>
    {
      speed = atof(p);
   d4818:	4628      	mov	r0, r5
   d481a:	f003 f961 	bl	d7ae0 <atof>
   d481e:	ec51 0b10 	vmov	r0, r1, d0
   d4822:	f003 f90d 	bl	d7a40 <__aeabi_d2f>
   d4826:	62a0      	str	r0, [r4, #40]	; 0x28
    }

    // angle
    p = strchr(p, ',')+1;
   d4828:	4628      	mov	r0, r5
   d482a:	212c      	movs	r1, #44	; 0x2c
   d482c:	f003 f989 	bl	d7b42 <strchr>
    if (',' != *p)
   d4830:	7843      	ldrb	r3, [r0, #1]
   d4832:	2b2c      	cmp	r3, #44	; 0x2c
    {
      speed = atof(p);
    }

    // angle
    p = strchr(p, ',')+1;
   d4834:	f100 0501 	add.w	r5, r0, #1
    if (',' != *p)
   d4838:	d007      	beq.n	d484a <_ZN12Adafruit_GPS5parseEPc+0x632>
    {
      angle = atof(p);
   d483a:	4628      	mov	r0, r5
   d483c:	f003 f950 	bl	d7ae0 <atof>
   d4840:	ec51 0b10 	vmov	r0, r1, d0
   d4844:	f003 f8fc 	bl	d7a40 <__aeabi_d2f>
   d4848:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    p = strchr(p, ',')+1;
   d484a:	212c      	movs	r1, #44	; 0x2c
   d484c:	4628      	mov	r0, r5
   d484e:	f003 f978 	bl	d7b42 <strchr>
    if (',' != *p)
   d4852:	7843      	ldrb	r3, [r0, #1]
   d4854:	2b2c      	cmp	r3, #44	; 0x2c
   d4856:	d016      	beq.n	d4886 <_ZN12Adafruit_GPS5parseEPc+0x66e>
    {
      uint32_t fulldate = atof(p);
   d4858:	3001      	adds	r0, #1
   d485a:	f003 f941 	bl	d7ae0 <atof>
   d485e:	ec51 0b10 	vmov	r0, r1, d0
   d4862:	f003 f8cd 	bl	d7a00 <__aeabi_d2uiz>
      day = fulldate / 10000;
   d4866:	f242 7210 	movw	r2, #10000	; 0x2710
   d486a:	fbb0 f3f2 	udiv	r3, r0, r2
   d486e:	7163      	strb	r3, [r4, #5]
      month = (fulldate % 10000) / 100;
   d4870:	fb02 0313 	mls	r3, r2, r3, r0
   d4874:	2264      	movs	r2, #100	; 0x64
   d4876:	fbb3 f3f2 	udiv	r3, r3, r2
   d487a:	7123      	strb	r3, [r4, #4]
      year = (fulldate % 100);
   d487c:	fbb0 f3f2 	udiv	r3, r0, r2
   d4880:	fb02 0013 	mls	r0, r2, r3, r0
   d4884:	70e0      	strb	r0, [r4, #3]
    }
    // we dont parse the remaining, yet!
    return true;
   d4886:	2001      	movs	r0, #1
  }

  return false;
}
   d4888:	b004      	add	sp, #16
   d488a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d488e:	bf00      	nop
   d4890:	00000000 	.word	0x00000000
   d4894:	3ff00000 	.word	0x3ff00000
   d4898:	000d9802 	.word	0x000d9802
   d489c:	000d9809 	.word	0x000d9809
   d48a0:	408f4000 	.word	0x408f4000
   d48a4:	00989680 	.word	0x00989680
   d48a8:	000186a0 	.word	0x000186a0
   d48ac:	36c9539c 	.word	0x36c9539c
   d48b0:	42700000 	.word	0x42700000
   d48b4:	42c80000 	.word	0x42c80000

000d48b8 <_GLOBAL__sub_I_line1>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d48b8:	f000 be16 	b.w	d54e8 <HAL_Pin_Map>

000d48bc <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d48bc:	4770      	bx	lr

000d48be <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   d48be:	4770      	bx	lr

000d48c0 <_ZN12AssetTrackerC1Ev>:
uint8_t internalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x00,0x00,0xF0,0x7D,0x8A,0x2A};
uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker::AssetTracker() {

}
   d48c0:	4770      	bx	lr
	...

000d48c4 <_ZN12AssetTracker5beginEv>:

void AssetTracker::begin() {
   d48c4:	b510      	push	{r4, lr}
    accel.begin(LIS3DH_DEFAULT_ADDRESS);
   d48c6:	4c07      	ldr	r4, [pc, #28]	; (d48e4 <_ZN12AssetTracker5beginEv+0x20>)
   d48c8:	2118      	movs	r1, #24
   d48ca:	4620      	mov	r0, r4
   d48cc:	f000 f9f4 	bl	d4cb8 <_ZN15Adafruit_LIS3DH5beginEh>

    // Default to 5kHz low-power sampling
    accel.setDataRate(LIS3DH_DATARATE_LOWPOWER_5KHZ);
   d48d0:	4620      	mov	r0, r4
   d48d2:	2109      	movs	r1, #9
   d48d4:	f000 f9df 	bl	d4c96 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

    // Default to 4 gravities range
    accel.setRange(LIS3DH_RANGE_4_G);
   d48d8:	4620      	mov	r0, r4
   d48da:	2101      	movs	r1, #1

    // Turn on the GPS module
    // gpsOn();
}
   d48dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    // Default to 5kHz low-power sampling
    accel.setDataRate(LIS3DH_DATARATE_LOWPOWER_5KHZ);

    // Default to 4 gravities range
    accel.setRange(LIS3DH_RANGE_4_G);
   d48e0:	f000 b9c1 	b.w	d4c66 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
   d48e4:	2003d794 	.word	0x2003d794

000d48e8 <_ZN12AssetTracker7readLatEv>:
    // gpsOn();
}

float AssetTracker::readLat() {
    return gps.latitude;
}
   d48e8:	4b01      	ldr	r3, [pc, #4]	; (d48f0 <_ZN12AssetTracker7readLatEv+0x8>)
   d48ea:	ed93 0a02 	vldr	s0, [r3, #8]
   d48ee:	4770      	bx	lr
   d48f0:	2003d7c0 	.word	0x2003d7c0

000d48f4 <_ZN12AssetTracker7readLonEv>:

float AssetTracker::readLon() {
    return gps.longitude;
}
   d48f4:	4b01      	ldr	r3, [pc, #4]	; (d48fc <_ZN12AssetTracker7readLonEv+0x8>)
   d48f6:	ed93 0a03 	vldr	s0, [r3, #12]
   d48fa:	4770      	bx	lr
   d48fc:	2003d7c0 	.word	0x2003d7c0

000d4900 <_ZN12AssetTracker10readLatLonEv>:

float AssetTracker::getAltitude(){
  return gps.altitude;
}

String AssetTracker::readLatLon() {
   d4900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    String latLon = String::format("%f,%f",gps.latitudeDegrees,gps.longitudeDegrees);
   d4902:	4d0a      	ldr	r5, [pc, #40]	; (d492c <_ZN12AssetTracker10readLatLonEv+0x2c>)

float AssetTracker::getAltitude(){
  return gps.altitude;
}

String AssetTracker::readLatLon() {
   d4904:	4604      	mov	r4, r0
    String latLon = String::format("%f,%f",gps.latitudeDegrees,gps.longitudeDegrees);
   d4906:	69a8      	ldr	r0, [r5, #24]
   d4908:	f002 fd4e 	bl	d73a8 <__aeabi_f2d>
   d490c:	4606      	mov	r6, r0
   d490e:	69e8      	ldr	r0, [r5, #28]
   d4910:	460f      	mov	r7, r1
   d4912:	f002 fd49 	bl	d73a8 <__aeabi_f2d>
   d4916:	4632      	mov	r2, r6
   d4918:	e9cd 0100 	strd	r0, r1, [sp]
   d491c:	463b      	mov	r3, r7
   d491e:	4620      	mov	r0, r4
   d4920:	4903      	ldr	r1, [pc, #12]	; (d4930 <_ZN12AssetTracker10readLatLonEv+0x30>)
   d4922:	f001 fff9 	bl	d6918 <_ZN6String6formatEPKcz>
    return latLon;
}
   d4926:	4620      	mov	r0, r4
   d4928:	b003      	add	sp, #12
   d492a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d492c:	2003d7c0 	.word	0x2003d7c0
   d4930:	000d9871 	.word	0x000d9871

000d4934 <_ZN12AssetTracker5gpsOnEv>:

void AssetTracker::gpsOn() {
   d4934:	b538      	push	{r3, r4, r5, lr}
    // Power to the GPS is controlled by a FET connected to D6
    pinMode(D6,OUTPUT);
   d4936:	2101      	movs	r1, #1
   d4938:	2006      	movs	r0, #6
   d493a:	f002 f89b 	bl	d6a74 <pinMode>
    digitalWrite(D6,LOW);
   d493e:	2100      	movs	r1, #0
   d4940:	2006      	movs	r0, #6
   d4942:	f002 f8a8 	bl	d6a96 <digitalWrite>
    gps.begin(9600);
   d4946:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d494a:	4816      	ldr	r0, [pc, #88]	; (d49a4 <_ZN12AssetTracker5gpsOnEv+0x70>)
    delay(500);
    //for ublox maxm8 gps only
    //internal antenna selected as default
    for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]);
   d494c:	4d16      	ldr	r5, [pc, #88]	; (d49a8 <_ZN12AssetTracker5gpsOnEv+0x74>)

void AssetTracker::gpsOn() {
    // Power to the GPS is controlled by a FET connected to D6
    pinMode(D6,OUTPUT);
    digitalWrite(D6,LOW);
    gps.begin(9600);
   d494e:	f7ff fc37 	bl	d41c0 <_ZN12Adafruit_GPS5beginEm>
    gps.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
   d4952:	4916      	ldr	r1, [pc, #88]	; (d49ac <_ZN12AssetTracker5gpsOnEv+0x78>)
   d4954:	4813      	ldr	r0, [pc, #76]	; (d49a4 <_ZN12AssetTracker5gpsOnEv+0x70>)
   d4956:	f7ff fc3c 	bl	d41d2 <_ZN12Adafruit_GPS11sendCommandEPKc>
    delay(500);
   d495a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d495e:	f001 fc93 	bl	d6288 <delay>
    // Default is 1 Hz update rate
    gps.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
   d4962:	4913      	ldr	r1, [pc, #76]	; (d49b0 <_ZN12AssetTracker5gpsOnEv+0x7c>)
   d4964:	480f      	ldr	r0, [pc, #60]	; (d49a4 <_ZN12AssetTracker5gpsOnEv+0x70>)
   d4966:	f7ff fc34 	bl	d41d2 <_ZN12Adafruit_GPS11sendCommandEPKc>
    delay(500);
   d496a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d496e:	f001 fc8b 	bl	d6288 <delay>
    gps.sendCommand(PGCMD_NOANTENNA);
   d4972:	4910      	ldr	r1, [pc, #64]	; (d49b4 <_ZN12AssetTracker5gpsOnEv+0x80>)
   d4974:	480b      	ldr	r0, [pc, #44]	; (d49a4 <_ZN12AssetTracker5gpsOnEv+0x70>)
   d4976:	f7ff fc2c 	bl	d41d2 <_ZN12Adafruit_GPS11sendCommandEPKc>
    delay(500);
   d497a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d497e:	f001 fc83 	bl	d6288 <delay>
   d4982:	2400      	movs	r4, #0
    //for ublox maxm8 gps only
    //internal antenna selected as default
    for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]);
   d4984:	f001 feac 	bl	d66e0 <_Z22__fetch_global_Serial1v>
   d4988:	6803      	ldr	r3, [r0, #0]
   d498a:	5d29      	ldrb	r1, [r5, r4]
   d498c:	689b      	ldr	r3, [r3, #8]
   d498e:	3401      	adds	r4, #1
   d4990:	4798      	blx	r3
    delay(500);
    gps.sendCommand(PGCMD_NOANTENNA);
    delay(500);
    //for ublox maxm8 gps only
    //internal antenna selected as default
    for(uint8_t i=0;i<12;i++)
   d4992:	2c0c      	cmp	r4, #12
   d4994:	d1f6      	bne.n	d4984 <_ZN12AssetTracker5gpsOnEv+0x50>
    {
        Serial1.write(internalANT[i]);
    }
    delay(500);
   d4996:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
   d499a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    //internal antenna selected as default
    for(uint8_t i=0;i<12;i++)
    {
        Serial1.write(internalANT[i]);
    }
    delay(500);
   d499e:	f001 bc73 	b.w	d6288 <delay>
   d49a2:	bf00      	nop
   d49a4:	2003d7c0 	.word	0x2003d7c0
   d49a8:	2003d5d8 	.word	0x2003d5d8
   d49ac:	000d9877 	.word	0x000d9877
   d49b0:	000d98a9 	.word	0x000d98a9
   d49b4:	000d98ba 	.word	0x000d98ba

000d49b8 <_ZN12AssetTracker7preNMEAEv>:
void AssetTracker::gpsOff() {
    digitalWrite(D6,HIGH);
}

char* AssetTracker::preNMEA() {
    return gps.lastNMEA();
   d49b8:	4801      	ldr	r0, [pc, #4]	; (d49c0 <_ZN12AssetTracker7preNMEAEv+0x8>)
   d49ba:	f7ff bc13 	b.w	d41e4 <_ZN12Adafruit_GPS8lastNMEAEv>
   d49be:	bf00      	nop
   d49c0:	2003d7c0 	.word	0x2003d7c0

000d49c4 <_ZN12AssetTracker6gpsFixEv>:
}

bool AssetTracker::gpsFix() {
    if ((gps.latitude == 0.0) || (gps.longitude == 0.0)){
   d49c4:	4b09      	ldr	r3, [pc, #36]	; (d49ec <_ZN12AssetTracker6gpsFixEv+0x28>)
   d49c6:	edd3 7a02 	vldr	s15, [r3, #8]
   d49ca:	eef5 7a40 	vcmp.f32	s15, #0.0
   d49ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d49d2:	d009      	beq.n	d49e8 <_ZN12AssetTracker6gpsFixEv+0x24>
   d49d4:	edd3 7a03 	vldr	s15, [r3, #12]
   d49d8:	eef5 7a40 	vcmp.f32	s15, #0.0
   d49dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d49e0:	bf14      	ite	ne
   d49e2:	2001      	movne	r0, #1
   d49e4:	2000      	moveq	r0, #0
   d49e6:	4770      	bx	lr
        return false;
   d49e8:	2000      	movs	r0, #0
    } else {
        return true;
    }
    //return gps.fix;
}
   d49ea:	4770      	bx	lr
   d49ec:	2003d7c0 	.word	0x2003d7c0

000d49f0 <_ZN12AssetTracker9updateGPSEv>:
// char AssetTracker::checkGPS(){
//     char c = gps.read();
//     return c;
// }

void AssetTracker::updateGPS() {
   d49f0:	b508      	push	{r3, lr}
  //     // this also sets the newNMEAreceived() flag to false
  //     return;  // we can fail to parse a sentence in which case we should just wait for another
  //   }
  // }
  //read the complete sentence
  while (Serial1.available()) {
   d49f2:	f001 fe75 	bl	d66e0 <_Z22__fetch_global_Serial1v>
   d49f6:	6803      	ldr	r3, [r0, #0]
   d49f8:	691b      	ldr	r3, [r3, #16]
   d49fa:	4798      	blx	r3
   d49fc:	b178      	cbz	r0, d4a1e <_ZN12AssetTracker9updateGPSEv+0x2e>
        char c = gps.read();
   d49fe:	4808      	ldr	r0, [pc, #32]	; (d4a20 <_ZN12AssetTracker9updateGPSEv+0x30>)
   d4a00:	f7ff fb58 	bl	d40b4 <_ZN12Adafruit_GPS4readEv>
        if (gps.newNMEAreceived()) {
   d4a04:	4806      	ldr	r0, [pc, #24]	; (d4a20 <_ZN12AssetTracker9updateGPSEv+0x30>)
   d4a06:	f7ff fbe7 	bl	d41d8 <_ZN12Adafruit_GPS15newNMEAreceivedEv>
   d4a0a:	2800      	cmp	r0, #0
   d4a0c:	d0f1      	beq.n	d49f2 <_ZN12AssetTracker9updateGPSEv+0x2>
            gps.parse(gps.lastNMEA());
   d4a0e:	4804      	ldr	r0, [pc, #16]	; (d4a20 <_ZN12AssetTracker9updateGPSEv+0x30>)
   d4a10:	f7ff fbe8 	bl	d41e4 <_ZN12Adafruit_GPS8lastNMEAEv>
   d4a14:	4601      	mov	r1, r0
   d4a16:	4802      	ldr	r0, [pc, #8]	; (d4a20 <_ZN12AssetTracker9updateGPSEv+0x30>)
   d4a18:	f7ff fbfe 	bl	d4218 <_ZN12Adafruit_GPS5parseEPc>
   d4a1c:	e7e9      	b.n	d49f2 <_ZN12AssetTracker9updateGPSEv+0x2>
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	2003d7c0 	.word	0x2003d7c0

000d4a24 <_ZN15Adafruit_LIS3DHD0Ev>:
   d4a24:	b510      	push	{r4, lr}
   d4a26:	4604      	mov	r4, r0
   d4a28:	f7ff fb37 	bl	d409a <_ZdlPv>
   d4a2c:	4620      	mov	r0, r4
   d4a2e:	bd10      	pop	{r4, pc}

000d4a30 <_GLOBAL__sub_I_gps>:
	return accel.setupLowPowerWakeMode(movementThreshold);
}

uint8_t AssetTracker::clearAccelInterrupt() {
	return accel.clearInterrupt();
}
   d4a30:	b510      	push	{r4, lr}
   d4a32:	f000 fd59 	bl	d54e8 <HAL_Pin_Map>
#include "AssetTracker.h"
#include "math.h"

//----------------- Tracker ----------------//

Adafruit_GPS gps = Adafruit_GPS(&Serial1);
   d4a36:	f001 fe53 	bl	d66e0 <_Z22__fetch_global_Serial1v>
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
   d4a3a:	4c08      	ldr	r4, [pc, #32]	; (d4a5c <_GLOBAL__sub_I_gps+0x2c>)
#include "AssetTracker.h"
#include "math.h"

//----------------- Tracker ----------------//

Adafruit_GPS gps = Adafruit_GPS(&Serial1);
   d4a3c:	4601      	mov	r1, r0
   d4a3e:	4808      	ldr	r0, [pc, #32]	; (d4a60 <_GLOBAL__sub_I_gps+0x30>)
   d4a40:	f7ff fbb8 	bl	d41b4 <_ZN12Adafruit_GPSC1EP11USARTSerial>
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
   d4a44:	2111      	movs	r1, #17
   d4a46:	4620      	mov	r0, r4
   d4a48:	f000 f830 	bl	d4aac <_ZN15Adafruit_LIS3DHC1Ea>
   d4a4c:	4620      	mov	r0, r4
   d4a4e:	4a05      	ldr	r2, [pc, #20]	; (d4a64 <_GLOBAL__sub_I_gps+0x34>)
   d4a50:	4905      	ldr	r1, [pc, #20]	; (d4a68 <_GLOBAL__sub_I_gps+0x38>)
	return accel.setupLowPowerWakeMode(movementThreshold);
}

uint8_t AssetTracker::clearAccelInterrupt() {
	return accel.clearInterrupt();
}
   d4a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "math.h"

//----------------- Tracker ----------------//

Adafruit_GPS gps = Adafruit_GPS(&Serial1);
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
   d4a56:	f002 b84a 	b.w	d6aee <__aeabi_atexit>
   d4a5a:	bf00      	nop
   d4a5c:	2003d794 	.word	0x2003d794
   d4a60:	2003d7c0 	.word	0x2003d7c0
   d4a64:	2003d694 	.word	0x2003d694
   d4a68:	000d48bf 	.word	0x000d48bf

000d4a6c <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d4a6c:	b538      	push	{r3, r4, r5, lr}
   d4a6e:	460c      	mov	r4, r1
   d4a70:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d4a72:	2228      	movs	r2, #40	; 0x28
   d4a74:	2100      	movs	r1, #0
   d4a76:	4620      	mov	r0, r4
   d4a78:	f003 f85b 	bl	d7b32 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d4a7c:	220b      	movs	r2, #11
   d4a7e:	4908      	ldr	r1, [pc, #32]	; (d4aa0 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
   d4a80:	4620      	mov	r0, r4
   d4a82:	f003 f8ad 	bl	d7be0 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d4a86:	2300      	movs	r3, #0
  sensor->version     = 1;
   d4a88:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d4a8a:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
   d4a8c:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
   d4a8e:	69a9      	ldr	r1, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
   d4a90:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value   = 0;
   d4a92:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
   d4a94:	6121      	str	r1, [r4, #16]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   d4a96:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
   d4a98:	61a3      	str	r3, [r4, #24]
  sensor->min_value   = 0;
   d4a9a:	61e3      	str	r3, [r4, #28]
  sensor->resolution  = 0;
   d4a9c:	6223      	str	r3, [r4, #32]
   d4a9e:	bd38      	pop	{r3, r4, r5, pc}
   d4aa0:	000d98c9 	.word	0x000d98c9

000d4aa4 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4aa4:	6803      	ldr	r3, [r0, #0]
   d4aa6:	b2c9      	uxtb	r1, r1
   d4aa8:	689b      	ldr	r3, [r3, #8]
   d4aaa:	4718      	bx	r3

000d4aac <_ZN15Adafruit_LIS3DHC1Ea>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
{
}

Adafruit_LIS3DH::Adafruit_LIS3DH(int8_t cspin)
  : _cs(cspin), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   d4aac:	4a06      	ldr	r2, [pc, #24]	; (d4ac8 <_ZN15Adafruit_LIS3DHC1Ea+0x1c>)
   d4aae:	6002      	str	r2, [r0, #0]
   d4ab0:	f04f 32ff 	mov.w	r2, #4294967295
   d4ab4:	6182      	str	r2, [r0, #24]
   d4ab6:	7741      	strb	r1, [r0, #29]
   d4ab8:	7782      	strb	r2, [r0, #30]
   d4aba:	21ff      	movs	r1, #255	; 0xff
   d4abc:	f880 2020 	strb.w	r2, [r0, #32]
   d4ac0:	2208      	movs	r2, #8
   d4ac2:	77c1      	strb	r1, [r0, #31]
   d4ac4:	6242      	str	r2, [r0, #36]	; 0x24
{ }
   d4ac6:	4770      	bx	lr
   d4ac8:	000d98d8 	.word	0x000d98d8

000d4acc <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d4acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
   d4ad0:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4ad4:	3301      	adds	r3, #1
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d4ad6:	4605      	mov	r5, r0
   d4ad8:	460f      	mov	r7, r1
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
   d4ada:	d104      	bne.n	d4ae6 <_ZN15Adafruit_LIS3DH7spixferEh+0x1a>
    return SPI.transfer(x);
   d4adc:	4816      	ldr	r0, [pc, #88]	; (d4b38 <_ZN15Adafruit_LIS3DH7spixferEh+0x6c>)
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
   d4ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
    return SPI.transfer(x);
   d4ae2:	f000 bf87 	b.w	d59f4 <_ZN8SPIClass8transferEh>
   d4ae6:	2607      	movs	r6, #7
   d4ae8:	2400      	movs	r4, #0
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
   d4aea:	f04f 0801 	mov.w	r8, #1
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_sck, LOW);
   d4aee:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d4af2:	2100      	movs	r1, #0
   d4af4:	b280      	uxth	r0, r0
   d4af6:	f001 ffce 	bl	d6a96 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   d4afa:	f995 001e 	ldrsb.w	r0, [r5, #30]
   d4afe:	fa08 f106 	lsl.w	r1, r8, r6
   d4b02:	4039      	ands	r1, r7
   d4b04:	b280      	uxth	r0, r0
   d4b06:	f001 ffc6 	bl	d6a96 <digitalWrite>
    digitalWrite(_sck, HIGH);
   d4b0a:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d4b0e:	2101      	movs	r1, #1
   d4b10:	b280      	uxth	r0, r0
   d4b12:	f001 ffc0 	bl	d6a96 <digitalWrite>
    if (digitalRead(_miso))
   d4b16:	f995 001f 	ldrsb.w	r0, [r5, #31]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
   d4b1a:	0064      	lsls	r4, r4, #1
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
   d4b1c:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
   d4b1e:	b2e4      	uxtb	r4, r4
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
   d4b20:	f001 ffd2 	bl	d6ac8 <digitalRead>
   d4b24:	b108      	cbz	r0, d4b2a <_ZN15Adafruit_LIS3DH7spixferEh+0x5e>
      reply |= 1;
   d4b26:	f044 0401 	orr.w	r4, r4, #1
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
   d4b2a:	f116 36ff 	adds.w	r6, r6, #4294967295
   d4b2e:	d2de      	bcs.n	d4aee <_ZN15Adafruit_LIS3DH7spixferEh+0x22>
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
   d4b30:	4620      	mov	r0, r4
   d4b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4b36:	bf00      	nop
   d4b38:	2003e730 	.word	0x2003e730

000d4b3c <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   d4b3c:	b510      	push	{r4, lr}
#ifdef PARTICLE
    SPI.setBitOrder(MSBFIRST);
   d4b3e:	4c08      	ldr	r4, [pc, #32]	; (d4b60 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x24>)
   d4b40:	2101      	movs	r1, #1
   d4b42:	4620      	mov	r0, r4
   d4b44:	f000 ff17 	bl	d5976 <_ZN8SPIClass11setBitOrderEh>
    SPI.setClockSpeed(500000);
   d4b48:	4906      	ldr	r1, [pc, #24]	; (d4b64 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   d4b4a:	4620      	mov	r0, r4
   d4b4c:	2201      	movs	r2, #1
   d4b4e:	f000 ff2f 	bl	d59b0 <_ZN8SPIClass13setClockSpeedEjj>
    SPI.setDataMode(SPI_MODE0);
   d4b52:	4620      	mov	r0, r4
   d4b54:	2100      	movs	r1, #0
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   d4b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void Adafruit_LIS3DH::beginTransaction() {
#ifdef PARTICLE
    SPI.setBitOrder(MSBFIRST);
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
   d4b5a:	f000 bf0f 	b.w	d597c <_ZN8SPIClass11setDataModeEh>
   d4b5e:	bf00      	nop
   d4b60:	2003e730 	.word	0x2003e730
   d4b64:	0007a120 	.word	0x0007a120

000d4b68 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d4b68:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   d4b6a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4b6e:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d4b70:	4604      	mov	r4, r0
   d4b72:	460e      	mov	r6, r1
   d4b74:	4615      	mov	r5, r2
  if (_cs == -1) {
   d4b76:	d116      	bne.n	d4ba6 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d4b78:	f001 fef6 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4b7c:	7f21      	ldrb	r1, [r4, #28]
   d4b7e:	f000 ffac 	bl	d5ada <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d4b82:	f001 fef1 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4b86:	6803      	ldr	r3, [r0, #0]
   d4b88:	4631      	mov	r1, r6
   d4b8a:	689b      	ldr	r3, [r3, #8]
   d4b8c:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d4b8e:	f001 feeb 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4b92:	6803      	ldr	r3, [r0, #0]
   d4b94:	4629      	mov	r1, r5
   d4b96:	689b      	ldr	r3, [r3, #8]
   d4b98:	4798      	blx	r3
    Wire.endTransmission();
   d4b9a:	f001 fee5 	bl	d6968 <_Z19__fetch_global_Wirev>
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
    	endTransaction();
  }
  #endif
}
   d4b9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
  if (_cs == -1) {
    Wire.beginTransmission((uint8_t)_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)value);
    Wire.endTransmission();
   d4ba2:	f000 bfa5 	b.w	d5af0 <_ZN7TwoWire15endTransmissionEv>
  }
  #ifndef __AVR_ATtiny85__
  else {
	if (_sck == -1)
   d4ba6:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4baa:	3301      	adds	r3, #1
   d4bac:	d101      	bne.n	d4bb2 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   d4bae:	f7ff ffc5 	bl	d4b3c <_ZN15Adafruit_LIS3DH16beginTransactionEv>

    digitalWrite(_cs, LOW);
   d4bb2:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4bb6:	2100      	movs	r1, #0
   d4bb8:	b280      	uxth	r0, r0
   d4bba:	f001 ff6c 	bl	d6a96 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   d4bbe:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4bc2:	4620      	mov	r0, r4
   d4bc4:	f7ff ff82 	bl	d4acc <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   d4bc8:	4629      	mov	r1, r5
   d4bca:	4620      	mov	r0, r4
   d4bcc:	f7ff ff7e 	bl	d4acc <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   d4bd0:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4bd4:	2101      	movs	r1, #1
   d4bd6:	b280      	uxth	r0, r0
    if (_sck == -1)
    	endTransaction();
  }
  #endif
}
   d4bd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  beginTransaction();

    digitalWrite(_cs, LOW);
    spixfer(reg & ~0x80); // write, bit 7 low
    spixfer(value);
    digitalWrite(_cs, HIGH);
   d4bdc:	f001 bf5b 	b.w	d6a96 <digitalWrite>

000d4be0 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d4be0:	b538      	push	{r3, r4, r5, lr}
  uint8_t value;

  if (_cs == -1) {
   d4be2:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4be6:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d4be8:	4604      	mov	r4, r0
   d4bea:	460d      	mov	r5, r1
  uint8_t value;

  if (_cs == -1) {
   d4bec:	d11d      	bne.n	d4c2a <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   d4bee:	f001 febb 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4bf2:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d4bf6:	f000 ff74 	bl	d5ae2 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   d4bfa:	f001 feb5 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4bfe:	6803      	ldr	r3, [r0, #0]
   d4c00:	4629      	mov	r1, r5
   d4c02:	689b      	ldr	r3, [r3, #8]
   d4c04:	4798      	blx	r3
    Wire.endTransmission();
   d4c06:	f001 feaf 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4c0a:	f000 ff71 	bl	d5af0 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(_i2caddr, 1);
   d4c0e:	f001 feab 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4c12:	2201      	movs	r2, #1
   d4c14:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d4c18:	f000 ff55 	bl	d5ac6 <_ZN7TwoWire11requestFromEii>
    value = Wire.read();
   d4c1c:	f001 fea4 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4c20:	6803      	ldr	r3, [r0, #0]
   d4c22:	695b      	ldr	r3, [r3, #20]
   d4c24:	4798      	blx	r3
   d4c26:	b2c5      	uxtb	r5, r0
   d4c28:	e01b      	b.n	d4c62 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x82>
  }
  #ifndef __AVR_ATtiny85__
  else {
	if (_sck == -1)
   d4c2a:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4c2e:	3301      	adds	r3, #1
   d4c30:	d101      	bne.n	d4c36 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   d4c32:	f7ff ff83 	bl	d4b3c <_ZN15Adafruit_LIS3DH16beginTransactionEv>

	digitalWrite(_cs, LOW);
   d4c36:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4c3a:	2100      	movs	r1, #0
   d4c3c:	b280      	uxth	r0, r0
   d4c3e:	f001 ff2a 	bl	d6a96 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d4c42:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4c46:	4620      	mov	r0, r4
   d4c48:	f7ff ff40 	bl	d4acc <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   d4c4c:	2100      	movs	r1, #0
   d4c4e:	4620      	mov	r0, r4
   d4c50:	f7ff ff3c 	bl	d4acc <_ZN15Adafruit_LIS3DH7spixferEh>
   d4c54:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   d4c56:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4c5a:	2101      	movs	r1, #1
   d4c5c:	b280      	uxth	r0, r0
   d4c5e:	f001 ff1a 	bl	d6a96 <digitalWrite>
    if (_sck == -1)
    	endTransaction();
  }
  #endif
  return value;
}
   d4c62:	4628      	mov	r0, r5
   d4c64:	bd38      	pop	{r3, r4, r5, pc}

000d4c66 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
   d4c66:	b538      	push	{r3, r4, r5, lr}
   d4c68:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d4c6a:	2123      	movs	r1, #35	; 0x23
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
   d4c6c:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d4c6e:	f7ff ffb7 	bl	d4be0 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
  r |= range << 4;
   d4c72:	f020 0030 	bic.w	r0, r0, #48	; 0x30
   d4c76:	ea40 1205 	orr.w	r2, r0, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d4c7a:	b2d2      	uxtb	r2, r2
   d4c7c:	4620      	mov	r0, r4
   d4c7e:	2123      	movs	r1, #35	; 0x23
}
   d4c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
  r &= ~(0x30);
  r |= range << 4;
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d4c84:	f7ff bf70 	b.w	d4b68 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d4c88 <_ZN15Adafruit_LIS3DH8getRangeEv>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
lis3dh_range_t Adafruit_LIS3DH::getRange(void)
{
   d4c88:	b508      	push	{r3, lr}
  /* Read the data format register to preserve bits */
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   d4c8a:	2123      	movs	r1, #35	; 0x23
   d4c8c:	f7ff ffa8 	bl	d4be0 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   d4c90:	f3c0 1001 	ubfx	r0, r0, #4, #2
   d4c94:	bd08      	pop	{r3, pc}

000d4c96 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
/*!
    @brief  Sets the data rate for the LIS3DH (controls power consumption)
*/
/**************************************************************************/
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
   d4c96:	b538      	push	{r3, r4, r5, lr}
   d4c98:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d4c9a:	2120      	movs	r1, #32
/*!
    @brief  Sets the data rate for the LIS3DH (controls power consumption)
*/
/**************************************************************************/
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
   d4c9c:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d4c9e:	f7ff ff9f 	bl	d4be0 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
  ctl1 |= (dataRate << 4);
   d4ca2:	f000 000f 	and.w	r0, r0, #15
   d4ca6:	ea40 1205 	orr.w	r2, r0, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d4caa:	b2d2      	uxtb	r2, r2
   d4cac:	4620      	mov	r0, r4
   d4cae:	2120      	movs	r1, #32
}
   d4cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
  ctl1 &= ~(0xF0); // mask off bits
  ctl1 |= (dataRate << 4);
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d4cb4:	f7ff bf58 	b.w	d4b68 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d4cb8 <_ZN15Adafruit_LIS3DH5beginEh>:
/**************************************************************************/
/*!
    @brief  Setups the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   d4cb8:	b510      	push	{r4, lr}
   d4cba:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   d4cbc:	7701      	strb	r1, [r0, #28]


  if (_cs == -1) {
   d4cbe:	f990 001d 	ldrsb.w	r0, [r0, #29]
   d4cc2:	1c42      	adds	r2, r0, #1
   d4cc4:	d104      	bne.n	d4cd0 <_ZN15Adafruit_LIS3DH5beginEh+0x18>
    // i2c
    Wire.begin();
   d4cc6:	f001 fe4f 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4cca:	f000 feed 	bl	d5aa8 <_ZN7TwoWire5beginEv>
   d4cce:	e021      	b.n	d4d14 <_ZN15Adafruit_LIS3DH5beginEh+0x5c>
  } else {
    digitalWrite(_cs, HIGH);
   d4cd0:	2101      	movs	r1, #1
   d4cd2:	b280      	uxth	r0, r0
   d4cd4:	f001 fedf 	bl	d6a96 <digitalWrite>
    pinMode(_cs, OUTPUT);
   d4cd8:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4cdc:	2101      	movs	r1, #1
   d4cde:	b280      	uxth	r0, r0
   d4ce0:	f001 fec8 	bl	d6a74 <pinMode>

#ifndef __AVR_ATtiny85__
    if (_sck == -1) {
   d4ce4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4ce8:	1c43      	adds	r3, r0, #1
   d4cea:	d103      	bne.n	d4cf4 <_ZN15Adafruit_LIS3DH5beginEh+0x3c>
      // hardware SPI
      SPI.begin();
   d4cec:	481a      	ldr	r0, [pc, #104]	; (d4d58 <_ZN15Adafruit_LIS3DH5beginEh+0xa0>)
   d4cee:	f000 fe3d 	bl	d596c <_ZN8SPIClass5beginEv>
   d4cf2:	e00f      	b.n	d4d14 <_ZN15Adafruit_LIS3DH5beginEh+0x5c>
    } else {
      // software SPI
      pinMode(_sck, OUTPUT);
   d4cf4:	2101      	movs	r1, #1
   d4cf6:	b280      	uxth	r0, r0
   d4cf8:	f001 febc 	bl	d6a74 <pinMode>
      pinMode(_mosi, OUTPUT);
   d4cfc:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d4d00:	2101      	movs	r1, #1
   d4d02:	b280      	uxth	r0, r0
   d4d04:	f001 feb6 	bl	d6a74 <pinMode>
      pinMode(_miso, INPUT);
   d4d08:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4d0c:	2100      	movs	r1, #0
   d4d0e:	b280      	uxth	r0, r0
   d4d10:	f001 feb0 	bl	d6a74 <pinMode>
    Serial.println(readRegister8(i), HEX);
  }
  */

  /* Check connection */
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   d4d14:	210f      	movs	r1, #15
   d4d16:	4620      	mov	r0, r4
   d4d18:	f7ff ff62 	bl	d4be0 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   d4d1c:	2833      	cmp	r0, #51	; 0x33
   d4d1e:	d119      	bne.n	d4d54 <_ZN15Adafruit_LIS3DH5beginEh+0x9c>
    //Serial.println(deviceid, HEX);
    return false;
  }

  // enable all axes, normal mode
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   d4d20:	2207      	movs	r2, #7
   d4d22:	4620      	mov	r0, r4
   d4d24:	2120      	movs	r1, #32
   d4d26:	f7ff ff1f 	bl	d4b68 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  // 400Hz rate
  setDataRate(LIS3DH_DATARATE_400_HZ);
   d4d2a:	4620      	mov	r0, r4
   d4d2c:	2107      	movs	r1, #7
   d4d2e:	f7ff ffb2 	bl	d4c96 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

  // High res & BDU enabled
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   d4d32:	4620      	mov	r0, r4
   d4d34:	2288      	movs	r2, #136	; 0x88
   d4d36:	2123      	movs	r1, #35	; 0x23
   d4d38:	f7ff ff16 	bl	d4b68 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

  // DRDY on INT1
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   d4d3c:	4620      	mov	r0, r4
   d4d3e:	2210      	movs	r2, #16
   d4d40:	2122      	movs	r1, #34	; 0x22
   d4d42:	f7ff ff11 	bl	d4b68 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

  // Turn on orientation config
  //writeRegister8(LIS3DH_REG_PL_CFG, 0x40);

  // enable adcs
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   d4d46:	4620      	mov	r0, r4
   d4d48:	2280      	movs	r2, #128	; 0x80
   d4d4a:	211f      	movs	r1, #31
   d4d4c:	f7ff ff0c 	bl	d4b68 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
    Serial.print(i, HEX); Serial.print(" = 0x");
    Serial.println(readRegister8(i), HEX);
  }
  */

  return true;
   d4d50:	2001      	movs	r0, #1
   d4d52:	bd10      	pop	{r4, pc}
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
  if (deviceid != 0x33)
  {
    /* No LIS3DH detected ... return false */
    //Serial.println(deviceid, HEX);
    return false;
   d4d54:	2000      	movs	r0, #0
    Serial.println(readRegister8(i), HEX);
  }
  */

  return true;
}
   d4d56:	bd10      	pop	{r4, pc}
   d4d58:	2003e730 	.word	0x2003e730

000d4d5c <_ZN15Adafruit_LIS3DH4readEv>:


void Adafruit_LIS3DH::read(void) {
   d4d5c:	b510      	push	{r4, lr}
  // read x y z at once

  if (_cs == -1) {
   d4d5e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4d62:	3301      	adds	r3, #1

  return true;
}


void Adafruit_LIS3DH::read(void) {
   d4d64:	4604      	mov	r4, r0
  // read x y z at once

  if (_cs == -1) {
   d4d66:	d143      	bne.n	d4df0 <_ZN15Adafruit_LIS3DH4readEv+0x94>
    // i2c
    Wire.beginTransmission(_i2caddr);
   d4d68:	f001 fdfe 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4d6c:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d4d70:	f000 feb7 	bl	d5ae2 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   d4d74:	f001 fdf8 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4d78:	21a8      	movs	r1, #168	; 0xa8
   d4d7a:	f7ff fe93 	bl	d4aa4 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d4d7e:	f001 fdf3 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4d82:	f000 feb5 	bl	d5af0 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(_i2caddr, 6);
   d4d86:	f001 fdef 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4d8a:	2206      	movs	r2, #6
   d4d8c:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d4d90:	f000 fe99 	bl	d5ac6 <_ZN7TwoWire11requestFromEii>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d4d94:	f001 fde8 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4d98:	6803      	ldr	r3, [r0, #0]
   d4d9a:	695b      	ldr	r3, [r3, #20]
   d4d9c:	4798      	blx	r3
   d4d9e:	80e0      	strh	r0, [r4, #6]
   d4da0:	f001 fde2 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4da4:	6803      	ldr	r3, [r0, #0]
   d4da6:	695b      	ldr	r3, [r3, #20]
   d4da8:	4798      	blx	r3
   d4daa:	88e3      	ldrh	r3, [r4, #6]
   d4dac:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4db0:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   d4db2:	f001 fdd9 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4db6:	6803      	ldr	r3, [r0, #0]
   d4db8:	695b      	ldr	r3, [r3, #20]
   d4dba:	4798      	blx	r3
   d4dbc:	8120      	strh	r0, [r4, #8]
   d4dbe:	f001 fdd3 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4dc2:	6803      	ldr	r3, [r0, #0]
   d4dc4:	695b      	ldr	r3, [r3, #20]
   d4dc6:	4798      	blx	r3
   d4dc8:	8923      	ldrh	r3, [r4, #8]
   d4dca:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4dce:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   d4dd0:	f001 fdca 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4dd4:	6803      	ldr	r3, [r0, #0]
   d4dd6:	695b      	ldr	r3, [r3, #20]
   d4dd8:	4798      	blx	r3
   d4dda:	8160      	strh	r0, [r4, #10]
   d4ddc:	f001 fdc4 	bl	d6968 <_Z19__fetch_global_Wirev>
   d4de0:	6803      	ldr	r3, [r0, #0]
   d4de2:	695b      	ldr	r3, [r3, #20]
   d4de4:	4798      	blx	r3
   d4de6:	8963      	ldrh	r3, [r4, #10]
   d4de8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4dec:	8160      	strh	r0, [r4, #10]
   d4dee:	e03c      	b.n	d4e6a <_ZN15Adafruit_LIS3DH4readEv+0x10e>
  }
  #ifndef __AVR_ATtiny85__
  else {
    if (_sck == -1)
   d4df0:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4df4:	3301      	adds	r3, #1
   d4df6:	d101      	bne.n	d4dfc <_ZN15Adafruit_LIS3DH4readEv+0xa0>
      beginTransaction();
   d4df8:	f7ff fea0 	bl	d4b3c <_ZN15Adafruit_LIS3DH16beginTransactionEv>

    digitalWrite(_cs, LOW);
   d4dfc:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4e00:	2100      	movs	r1, #0
   d4e02:	b280      	uxth	r0, r0
   d4e04:	f001 fe47 	bl	d6a96 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   d4e08:	21e8      	movs	r1, #232	; 0xe8
   d4e0a:	4620      	mov	r0, r4
   d4e0c:	f7ff fe5e 	bl	d4acc <_ZN15Adafruit_LIS3DH7spixferEh>

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   d4e10:	21ff      	movs	r1, #255	; 0xff
   d4e12:	4620      	mov	r0, r4
   d4e14:	f7ff fe5a 	bl	d4acc <_ZN15Adafruit_LIS3DH7spixferEh>
   d4e18:	21ff      	movs	r1, #255	; 0xff
   d4e1a:	80e0      	strh	r0, [r4, #6]
   d4e1c:	4620      	mov	r0, r4
   d4e1e:	f7ff fe55 	bl	d4acc <_ZN15Adafruit_LIS3DH7spixferEh>
   d4e22:	88e3      	ldrh	r3, [r4, #6]
   d4e24:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4e28:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   d4e2a:	21ff      	movs	r1, #255	; 0xff
   d4e2c:	4620      	mov	r0, r4
   d4e2e:	f7ff fe4d 	bl	d4acc <_ZN15Adafruit_LIS3DH7spixferEh>
   d4e32:	21ff      	movs	r1, #255	; 0xff
   d4e34:	8120      	strh	r0, [r4, #8]
   d4e36:	4620      	mov	r0, r4
   d4e38:	f7ff fe48 	bl	d4acc <_ZN15Adafruit_LIS3DH7spixferEh>
   d4e3c:	8923      	ldrh	r3, [r4, #8]
   d4e3e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4e42:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   d4e44:	21ff      	movs	r1, #255	; 0xff
   d4e46:	4620      	mov	r0, r4
   d4e48:	f7ff fe40 	bl	d4acc <_ZN15Adafruit_LIS3DH7spixferEh>
   d4e4c:	21ff      	movs	r1, #255	; 0xff
   d4e4e:	8160      	strh	r0, [r4, #10]
   d4e50:	4620      	mov	r0, r4
   d4e52:	f7ff fe3b 	bl	d4acc <_ZN15Adafruit_LIS3DH7spixferEh>
   d4e56:	8963      	ldrh	r3, [r4, #10]
   d4e58:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4e5c:	8160      	strh	r0, [r4, #10]

    digitalWrite(_cs, HIGH);
   d4e5e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4e62:	2101      	movs	r1, #1
   d4e64:	b280      	uxth	r0, r0
   d4e66:	f001 fe16 	bl	d6a96 <digitalWrite>
    if (_sck == -1)
    	endTransaction();

  }
  #endif
  uint8_t range = getRange();
   d4e6a:	4620      	mov	r0, r4
   d4e6c:	f7ff ff0c 	bl	d4c88 <_ZN15Adafruit_LIS3DH8getRangeEv>
  uint16_t divider = 1;
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d4e70:	2803      	cmp	r0, #3
   d4e72:	d009      	beq.n	d4e88 <_ZN15Adafruit_LIS3DH4readEv+0x12c>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d4e74:	2802      	cmp	r0, #2
   d4e76:	d00a      	beq.n	d4e8e <_ZN15Adafruit_LIS3DH4readEv+0x132>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d4e78:	2801      	cmp	r0, #1
   d4e7a:	d00b      	beq.n	d4e94 <_ZN15Adafruit_LIS3DH4readEv+0x138>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   d4e7c:	2800      	cmp	r0, #0
   d4e7e:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   d4e82:	bf18      	it	ne
   d4e84:	2301      	movne	r3, #1
   d4e86:	e007      	b.n	d4e98 <_ZN15Adafruit_LIS3DH4readEv+0x13c>

  }
  #endif
  uint8_t range = getRange();
  uint16_t divider = 1;
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d4e88:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d4e8c:	e004      	b.n	d4e98 <_ZN15Adafruit_LIS3DH4readEv+0x13c>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d4e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d4e92:	e001      	b.n	d4e98 <_ZN15Adafruit_LIS3DH4readEv+0x13c>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d4e94:	f641 73fe 	movw	r3, #8190	; 0x1ffe
  if (range == LIS3DH_RANGE_2_G) divider = 16380;

  x_g = (float)x / divider;
   d4e98:	ee07 3a90 	vmov	s15, r3
   d4e9c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d4ea0:	ee07 3a10 	vmov	s14, r3
   d4ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4ea8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d4eac:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
  if (range == LIS3DH_RANGE_2_G) divider = 16380;

  x_g = (float)x / divider;
   d4eb0:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   d4eb4:	ee07 3a10 	vmov	s14, r3
   d4eb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
  if (range == LIS3DH_RANGE_2_G) divider = 16380;

  x_g = (float)x / divider;
   d4ebc:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   d4ec0:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   d4ec4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d4ec8:	ee07 3a10 	vmov	s14, r3
   d4ecc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
  if (range == LIS3DH_RANGE_2_G) divider = 16380;

  x_g = (float)x / divider;
  y_g = (float)y / divider;
   d4ed0:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   d4ed4:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d4ed8:	edc4 6a05 	vstr	s13, [r4, #20]
   d4edc:	bd10      	pop	{r4, pc}

000d4ede <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
/**************************************************************************/
/*!
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   d4ede:	b570      	push	{r4, r5, r6, lr}
   d4ee0:	460c      	mov	r4, r1
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d4ee2:	2624      	movs	r6, #36	; 0x24
/**************************************************************************/
/*!
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   d4ee4:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d4ee6:	4632      	mov	r2, r6
   d4ee8:	2100      	movs	r1, #0
   d4eea:	4620      	mov	r0, r4
   d4eec:	f002 fe21 	bl	d7b32 <memset>

  event->version   = sizeof(sensors_event_t);
   d4ef0:	6026      	str	r6, [r4, #0]
  event->sensor_id = _sensorID;
   d4ef2:	69ab      	ldr	r3, [r5, #24]
   d4ef4:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   d4ef6:	2301      	movs	r3, #1
   d4ef8:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
   d4efa:	2300      	movs	r3, #0
   d4efc:	6123      	str	r3, [r4, #16]

  read();
   d4efe:	4628      	mov	r0, r5
   d4f00:	f7ff ff2c 	bl	d4d5c <_ZN15Adafruit_LIS3DH4readEv>

  event->acceleration.x = x_g;
   d4f04:	68eb      	ldr	r3, [r5, #12]
   d4f06:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   d4f08:	692b      	ldr	r3, [r5, #16]
   d4f0a:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   d4f0c:	696b      	ldr	r3, [r5, #20]
   d4f0e:	61e3      	str	r3, [r4, #28]
}
   d4f10:	bd70      	pop	{r4, r5, r6, pc}

000d4f12 <_GLOBAL__sub_I__ZN15Adafruit_LIS3DHC2Ev>:
   d4f12:	f000 bae9 	b.w	d54e8 <HAL_Pin_Map>
	...

000d4f18 <_Z12gpsResetList6String>:
}

// reset the counter for the log
int gps_index_orig;
int gpsResetList(String coemmand){
    gps_index_orig = gps_index;
   d4f18:	4b03      	ldr	r3, [pc, #12]	; (d4f28 <_Z12gpsResetList6String+0x10>)
   d4f1a:	4a04      	ldr	r2, [pc, #16]	; (d4f2c <_Z12gpsResetList6String+0x14>)
   d4f1c:	6818      	ldr	r0, [r3, #0]
   d4f1e:	6010      	str	r0, [r2, #0]
    gps_index = 0;
   d4f20:	2200      	movs	r2, #0
   d4f22:	601a      	str	r2, [r3, #0]
    return gps_index_orig;
}
   d4f24:	4770      	bx	lr
   d4f26:	bf00      	nop
   d4f28:	2003e35c 	.word	0x2003e35c
   d4f2c:	2003ddb4 	.word	0x2003ddb4

000d4f30 <_Z14gpsPublishList6String>:
            Particle.publish("GL", output, 60, PRIVATE);
        }
        // uncomment next line if you want a manual publish to reset delay counter
        // lastPublish = millis();
        return 1;
}
   d4f30:	2001      	movs	r0, #1
   d4f32:	4770      	bx	lr

000d4f34 <_Z12transmitMode6String>:
}

// Allows you to remotely change whether a device is publishing to the cloud
// or is only reporting data over Serial. Saves data when using only Serial!
// Change the default at the top of the code.
int transmitMode(String command) {
   d4f34:	b508      	push	{r3, lr}
    transmittingData = atoi(command);
   d4f36:	6800      	ldr	r0, [r0, #0]
   d4f38:	f002 fdd5 	bl	d7ae6 <atoi>
   d4f3c:	4b01      	ldr	r3, [pc, #4]	; (d4f44 <_Z12transmitMode6String+0x10>)
   d4f3e:	6018      	str	r0, [r3, #0]
    return 1;
}
   d4f40:	2001      	movs	r0, #1
   d4f42:	bd08      	pop	{r3, pc}
   d4f44:	2003d5e4 	.word	0x2003d5e4

000d4f48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4f48:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4f4a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4f4c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4f4e:	b17c      	cbz	r4, d4f70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4f50:	6863      	ldr	r3, [r4, #4]
   d4f52:	3b01      	subs	r3, #1
   d4f54:	6063      	str	r3, [r4, #4]
   d4f56:	b95b      	cbnz	r3, d4f70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4f58:	6823      	ldr	r3, [r4, #0]
   d4f5a:	4620      	mov	r0, r4
   d4f5c:	689b      	ldr	r3, [r3, #8]
   d4f5e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4f60:	68a3      	ldr	r3, [r4, #8]
   d4f62:	3b01      	subs	r3, #1
   d4f64:	60a3      	str	r3, [r4, #8]
   d4f66:	b91b      	cbnz	r3, d4f70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4f68:	6823      	ldr	r3, [r4, #0]
   d4f6a:	4620      	mov	r0, r4
   d4f6c:	68db      	ldr	r3, [r3, #12]
   d4f6e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4f70:	4628      	mov	r0, r5
   d4f72:	bd38      	pop	{r3, r4, r5, pc}

000d4f74 <loop>:
    Particle.function("gps list", gpsPublishList);
    Particle.function("reset log", gpsResetList);
}

// loop() runs continuously
void loop() {
   d4f74:	b530      	push	{r4, r5, lr}
    // You'll need to run this every loop to capture the GPS output
    t.updateGPS();

    if (gps_index >= NUM_SAVE) {
   d4f76:	4c32      	ldr	r4, [pc, #200]	; (d5040 <loop+0xcc>)
}

// loop() runs continuously
void loop() {
    // You'll need to run this every loop to capture the GPS output
    t.updateGPS();
   d4f78:	4832      	ldr	r0, [pc, #200]	; (d5044 <loop+0xd0>)
    if (gps_index >= NUM_SAVE) {
        gps_index = 0;
    }

    // if the current time - the last time we published is greater than your set delay...
    if (millis()-lastPublish > delayMinutes*60*1000) {
   d4f7a:	4d33      	ldr	r5, [pc, #204]	; (d5048 <loop+0xd4>)
    Particle.function("gps list", gpsPublishList);
    Particle.function("reset log", gpsResetList);
}

// loop() runs continuously
void loop() {
   d4f7c:	b089      	sub	sp, #36	; 0x24
    // You'll need to run this every loop to capture the GPS output
    t.updateGPS();
   d4f7e:	f7ff fd37 	bl	d49f0 <_ZN12AssetTracker9updateGPSEv>

    if (gps_index >= NUM_SAVE) {
   d4f82:	6823      	ldr	r3, [r4, #0]
   d4f84:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
        gps_index = 0;
   d4f88:	bfa4      	itt	ge
   d4f8a:	2300      	movge	r3, #0
   d4f8c:	6023      	strge	r3, [r4, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4f8e:	f000 fa63 	bl	d5458 <HAL_Timer_Get_Milli_Seconds>
    }

    // if the current time - the last time we published is greater than your set delay...
    if (millis()-lastPublish > delayMinutes*60*1000) {
   d4f92:	682b      	ldr	r3, [r5, #0]
   d4f94:	1ac0      	subs	r0, r0, r3
   d4f96:	4b2d      	ldr	r3, [pc, #180]	; (d504c <loop+0xd8>)
   d4f98:	681a      	ldr	r2, [r3, #0]
   d4f9a:	f64e 2360 	movw	r3, #60000	; 0xea60
   d4f9e:	4353      	muls	r3, r2
   d4fa0:	4298      	cmp	r0, r3
   d4fa2:	d94b      	bls.n	d503c <loop+0xc8>
   d4fa4:	f000 fa58 	bl	d5458 <HAL_Timer_Get_Milli_Seconds>
        // Remember when we published
        lastPublish = millis();
   d4fa8:	6028      	str	r0, [r5, #0]
        //String pubAccel = String::format("%d,%d,%d", t.readX(), t.readY(), t.readZ());
        //Serial.println(pubAccel);
        //Particle.publish("A", pubAccel, 60, PRIVATE);

        // Dumps the full NMEA sentence to serial in case you're curious
        Serial.println(t.preNMEA());
   d4faa:	f000 fe05 	bl	d5bb8 <_Z16_fetch_usbserialv>
   d4fae:	4605      	mov	r5, r0
   d4fb0:	4824      	ldr	r0, [pc, #144]	; (d5044 <loop+0xd0>)
   d4fb2:	f7ff fd01 	bl	d49b8 <_ZN12AssetTracker7preNMEAEv>
   d4fb6:	4601      	mov	r1, r0
   d4fb8:	4628      	mov	r0, r5
   d4fba:	f001 fb0e 	bl	d65da <_ZN5Print7printlnEPKc>

        // GPS requires a "fix" on the satellites to give good data,
        // so we should only publish data if there's a fix
        if (t.gpsFix()) {
   d4fbe:	4821      	ldr	r0, [pc, #132]	; (d5044 <loop+0xd0>)
   d4fc0:	f7ff fd00 	bl	d49c4 <_ZN12AssetTracker6gpsFixEv>
   d4fc4:	2800      	cmp	r0, #0
   d4fc6:	d039      	beq.n	d503c <loop+0xc8>
            // Only publish if we're in transmittingData mode 1;
            if (transmittingData) {
   d4fc8:	4b21      	ldr	r3, [pc, #132]	; (d5050 <loop+0xdc>)
   d4fca:	681b      	ldr	r3, [r3, #0]
   d4fcc:	b19b      	cbz	r3, d4ff6 <loop+0x82>
                // Short publish names save data!
                Particle.publish("G", t.readLatLon(), 60, PRIVATE);
   d4fce:	491d      	ldr	r1, [pc, #116]	; (d5044 <loop+0xd0>)
   d4fd0:	a804      	add	r0, sp, #16
   d4fd2:	f7ff fc95 	bl	d4900 <_ZN12AssetTracker10readLatLonEv>
   d4fd6:	4b1f      	ldr	r3, [pc, #124]	; (d5054 <loop+0xe0>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4fd8:	9a04      	ldr	r2, [sp, #16]
   d4fda:	781b      	ldrb	r3, [r3, #0]
   d4fdc:	f88d 3000 	strb.w	r3, [sp]
   d4fe0:	491d      	ldr	r1, [pc, #116]	; (d5058 <loop+0xe4>)
   d4fe2:	233c      	movs	r3, #60	; 0x3c
   d4fe4:	a802      	add	r0, sp, #8
   d4fe6:	f000 ffeb 	bl	d5fc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4fea:	a803      	add	r0, sp, #12
   d4fec:	f7ff ffac 	bl	d4f48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ff0:	a804      	add	r0, sp, #16
   d4ff2:	f001 fbe7 	bl	d67c4 <_ZN6StringD1Ev>
            }
            lat[gps_index] = t.readLat();
   d4ff6:	4813      	ldr	r0, [pc, #76]	; (d5044 <loop+0xd0>)
   d4ff8:	6825      	ldr	r5, [r4, #0]
   d4ffa:	f7ff fc75 	bl	d48e8 <_ZN12AssetTracker7readLatEv>
   d4ffe:	4b17      	ldr	r3, [pc, #92]	; (d505c <loop+0xe8>)
            lon[gps_index] = t.readLon();
   d5000:	4810      	ldr	r0, [pc, #64]	; (d5044 <loop+0xd0>)
            // Only publish if we're in transmittingData mode 1;
            if (transmittingData) {
                // Short publish names save data!
                Particle.publish("G", t.readLatLon(), 60, PRIVATE);
            }
            lat[gps_index] = t.readLat();
   d5002:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   d5006:	ed83 0a00 	vstr	s0, [r3]
            lon[gps_index] = t.readLon();
   d500a:	6825      	ldr	r5, [r4, #0]
   d500c:	f7ff fc72 	bl	d48f4 <_ZN12AssetTracker7readLonEv>
   d5010:	4b13      	ldr	r3, [pc, #76]	; (d5060 <loop+0xec>)
   d5012:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   d5016:	ed83 0a00 	vstr	s0, [r3]
            gps_index++;
   d501a:	6823      	ldr	r3, [r4, #0]
   d501c:	3301      	adds	r3, #1
   d501e:	6023      	str	r3, [r4, #0]
            // but always report the data over serial for local development
            Serial.println(t.readLatLon());
   d5020:	f000 fdca 	bl	d5bb8 <_Z16_fetch_usbserialv>
   d5024:	4907      	ldr	r1, [pc, #28]	; (d5044 <loop+0xd0>)
   d5026:	4604      	mov	r4, r0
   d5028:	a804      	add	r0, sp, #16
   d502a:	f7ff fc69 	bl	d4900 <_ZN12AssetTracker10readLatLonEv>
   d502e:	9904      	ldr	r1, [sp, #16]
   d5030:	4620      	mov	r0, r4
   d5032:	f001 fad2 	bl	d65da <_ZN5Print7printlnEPKc>
   d5036:	a804      	add	r0, sp, #16
   d5038:	f001 fbc4 	bl	d67c4 <_ZN6StringD1Ev>
        }
    }
}
   d503c:	b009      	add	sp, #36	; 0x24
   d503e:	bd30      	pop	{r4, r5, pc}
   d5040:	2003e35c 	.word	0x2003e35c
   d5044:	2003e358 	.word	0x2003e358
   d5048:	2003ddb0 	.word	0x2003ddb0
   d504c:	2003d5e8 	.word	0x2003d5e8
   d5050:	2003d5e4 	.word	0x2003d5e4
   d5054:	2003e359 	.word	0x2003e359
   d5058:	000d9851 	.word	0x000d9851
   d505c:	2003d810 	.word	0x2003d810
   d5060:	2003ddb8 	.word	0x2003ddb8

000d5064 <_Z10gpsPublish6String>:
    gps_index = 0;
    return gps_index_orig;
}
// Actively ask for a GPS reading if you're impatient. Only publishes if there's
// a GPS fix, otherwise returns '0'
int gpsPublish(String command) {
   d5064:	b500      	push	{lr}
    //Particle.publish("GT", t.readLatLon(), 60, PRIVATE);
    if (t.gpsFix()) {
   d5066:	480e      	ldr	r0, [pc, #56]	; (d50a0 <_Z10gpsPublish6String+0x3c>)
    gps_index = 0;
    return gps_index_orig;
}
// Actively ask for a GPS reading if you're impatient. Only publishes if there's
// a GPS fix, otherwise returns '0'
int gpsPublish(String command) {
   d5068:	b089      	sub	sp, #36	; 0x24
    //Particle.publish("GT", t.readLatLon(), 60, PRIVATE);
    if (t.gpsFix()) {
   d506a:	f7ff fcab 	bl	d49c4 <_ZN12AssetTracker6gpsFixEv>
   d506e:	b1a0      	cbz	r0, d509a <_Z10gpsPublish6String+0x36>
        Particle.publish("G", t.readLatLon(), 60, PRIVATE);
   d5070:	490b      	ldr	r1, [pc, #44]	; (d50a0 <_Z10gpsPublish6String+0x3c>)
   d5072:	a804      	add	r0, sp, #16
   d5074:	f7ff fc44 	bl	d4900 <_ZN12AssetTracker10readLatLonEv>
   d5078:	4b0a      	ldr	r3, [pc, #40]	; (d50a4 <_Z10gpsPublish6String+0x40>)
   d507a:	9a04      	ldr	r2, [sp, #16]
   d507c:	781b      	ldrb	r3, [r3, #0]
   d507e:	490a      	ldr	r1, [pc, #40]	; (d50a8 <_Z10gpsPublish6String+0x44>)
   d5080:	f88d 3000 	strb.w	r3, [sp]
   d5084:	a802      	add	r0, sp, #8
   d5086:	233c      	movs	r3, #60	; 0x3c
   d5088:	f000 ff9a 	bl	d5fc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d508c:	a803      	add	r0, sp, #12
   d508e:	f7ff ff5b 	bl	d4f48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5092:	a804      	add	r0, sp, #16
   d5094:	f001 fb96 	bl	d67c4 <_ZN6StringD1Ev>
   d5098:	2001      	movs	r0, #1
        // lastPublish = millis();
        return 1;
    } else {
      return 0;
    }
}
   d509a:	b009      	add	sp, #36	; 0x24
   d509c:	f85d fb04 	ldr.w	pc, [sp], #4
   d50a0:	2003e358 	.word	0x2003e358
   d50a4:	2003e359 	.word	0x2003e359
   d50a8:	000d9851 	.word	0x000d9851

000d50ac <_Z13batteryStatus6String>:
}

// Lets you remotely check the battery status by calling the function "batt"
// Triggers a publish with the info (so subscribe or watch the dashboard)
// and also returns a '1' if there's >10% battery left and a '0' if below
int batteryStatus(String command){
   d50ac:	b570      	push	{r4, r5, r6, lr}
    // Publish the battery voltage and percentage of battery remaining
    // if you want to be really efficient, just report one of these
    // the String::format("%f.2") part gives us a string to publish,
    // but with only 2 decimal points to save space
    Particle.publish("B",
          "v:" + String::format("%.2f",fuel.getVCell()) +
   d50ae:	4c28      	ldr	r4, [pc, #160]	; (d5150 <_Z13batteryStatus6String+0xa4>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d50b0:	4928      	ldr	r1, [pc, #160]	; (d5154 <_Z13batteryStatus6String+0xa8>)
   d50b2:	4d29      	ldr	r5, [pc, #164]	; (d5158 <_Z13batteryStatus6String+0xac>)
}

// Lets you remotely check the battery status by calling the function "batt"
// Triggers a publish with the info (so subscribe or watch the dashboard)
// and also returns a '1' if there's >10% battery left and a '0' if below
int batteryStatus(String command){
   d50b4:	b090      	sub	sp, #64	; 0x40
   d50b6:	a808      	add	r0, sp, #32
   d50b8:	f001 fbcb 	bl	d6852 <_ZN6StringC1EPK19__FlashStringHelper>
    // Publish the battery voltage and percentage of battery remaining
    // if you want to be really efficient, just report one of these
    // the String::format("%f.2") part gives us a string to publish,
    // but with only 2 decimal points to save space
    Particle.publish("B",
          "v:" + String::format("%.2f",fuel.getVCell()) +
   d50bc:	4620      	mov	r0, r4
   d50be:	f001 f9a1 	bl	d6404 <_ZN9FuelGauge8getVCellEv>
   d50c2:	ee10 0a10 	vmov	r0, s0
   d50c6:	f002 f96f 	bl	d73a8 <__aeabi_f2d>
   d50ca:	4602      	mov	r2, r0
   d50cc:	460b      	mov	r3, r1
   d50ce:	a804      	add	r0, sp, #16
   d50d0:	4629      	mov	r1, r5
   d50d2:	f001 fc21 	bl	d6918 <_ZN6String6formatEPKcz>
   d50d6:	a904      	add	r1, sp, #16
   d50d8:	a808      	add	r0, sp, #32
   d50da:	f001 fbfe 	bl	d68da <_ZplRK15StringSumHelperRK6String>
          ",c:" + String::format("%.2f",fuel.getSoC()),
   d50de:	491f      	ldr	r1, [pc, #124]	; (d515c <_Z13batteryStatus6String+0xb0>)
   d50e0:	f001 fc07 	bl	d68f2 <_ZplRK15StringSumHelperPKc>
   d50e4:	4606      	mov	r6, r0
   d50e6:	4620      	mov	r0, r4
   d50e8:	f001 f9a2 	bl	d6430 <_ZN9FuelGauge6getSoCEv>
   d50ec:	ee10 0a10 	vmov	r0, s0
   d50f0:	f002 f95a 	bl	d73a8 <__aeabi_f2d>
   d50f4:	4602      	mov	r2, r0
   d50f6:	460b      	mov	r3, r1
   d50f8:	a80c      	add	r0, sp, #48	; 0x30
   d50fa:	4629      	mov	r1, r5
   d50fc:	f001 fc0c 	bl	d6918 <_ZN6String6formatEPKcz>
   d5100:	a90c      	add	r1, sp, #48	; 0x30
   d5102:	4630      	mov	r0, r6
   d5104:	f001 fbe9 	bl	d68da <_ZplRK15StringSumHelperRK6String>
   d5108:	4b15      	ldr	r3, [pc, #84]	; (d5160 <_Z13batteryStatus6String+0xb4>)
   d510a:	6802      	ldr	r2, [r0, #0]
   d510c:	781b      	ldrb	r3, [r3, #0]
   d510e:	4915      	ldr	r1, [pc, #84]	; (d5164 <_Z13batteryStatus6String+0xb8>)
   d5110:	f88d 3000 	strb.w	r3, [sp]
   d5114:	a802      	add	r0, sp, #8
   d5116:	233c      	movs	r3, #60	; 0x3c
   d5118:	f000 ff52 	bl	d5fc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d511c:	a803      	add	r0, sp, #12
   d511e:	f7ff ff13 	bl	d4f48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5122:	a80c      	add	r0, sp, #48	; 0x30
   d5124:	f001 fb4e 	bl	d67c4 <_ZN6StringD1Ev>
    // Publish the battery voltage and percentage of battery remaining
    // if you want to be really efficient, just report one of these
    // the String::format("%f.2") part gives us a string to publish,
    // but with only 2 decimal points to save space
    Particle.publish("B",
          "v:" + String::format("%.2f",fuel.getVCell()) +
   d5128:	a804      	add	r0, sp, #16
   d512a:	f001 fb4b 	bl	d67c4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d512e:	a808      	add	r0, sp, #32
   d5130:	f001 fb48 	bl	d67c4 <_ZN6StringD1Ev>
          ",c:" + String::format("%.2f",fuel.getSoC()),
          60, PRIVATE
    );
    // if there's more than 10% of the battery left, then return 1
    if (fuel.getSoC()>10){ return 1;}
   d5134:	4620      	mov	r0, r4
   d5136:	f001 f97b 	bl	d6430 <_ZN9FuelGauge6getSoCEv>
   d513a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   d513e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    // if you're running out of battery, return 0
    else { return 0;}
}
   d5146:	bfcc      	ite	gt
   d5148:	2001      	movgt	r0, #1
   d514a:	2000      	movle	r0, #0
   d514c:	b010      	add	sp, #64	; 0x40
   d514e:	bd70      	pop	{r4, r5, r6, pc}
   d5150:	2003e360 	.word	0x2003e360
   d5154:	000d98ec 	.word	0x000d98ec
   d5158:	000d98ef 	.word	0x000d98ef
   d515c:	000d98f4 	.word	0x000d98f4
   d5160:	2003e359 	.word	0x2003e359
   d5164:	000d98f8 	.word	0x000d98f8

000d5168 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d5168:	4602      	mov	r2, r0
   d516a:	4801      	ldr	r0, [pc, #4]	; (d5170 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d516c:	f000 be08 	b.w	d5d80 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5170:	000d5d55 	.word	0x000d5d55

000d5174 <setup>:
// A FuelGauge named 'fuel' for checking on the battery state
FuelGauge fuel;

// setup() and loop() are both required. setup() runs once when the device starts
// and is used for registering functions and variables and initializing things
void setup() {
   d5174:	b510      	push	{r4, lr}
    // Sets up all the necessary AssetTracker bits
    t.begin();
   d5176:	4c11      	ldr	r4, [pc, #68]	; (d51bc <setup+0x48>)
   d5178:	4620      	mov	r0, r4
   d517a:	f7ff fba3 	bl	d48c4 <_ZN12AssetTracker5beginEv>

    // Enable the GPS module. Defaults to off to save power.
    // Takes 1.5s or so because of delays.
    t.gpsOn();
   d517e:	4620      	mov	r0, r4
   d5180:	f7ff fbd8 	bl	d4934 <_ZN12AssetTracker5gpsOnEv>

    // Opens up a Serial port so you can listen over USB
    Serial.begin(9600);
   d5184:	f000 fd18 	bl	d5bb8 <_Z16_fetch_usbserialv>
   d5188:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d518c:	f000 fd08 	bl	d5ba0 <_ZN9USBSerial5beginEl>

    // These three functions are useful for remote diagnostics. Read more below.
    Particle.function("tmode", transmitMode);
   d5190:	490b      	ldr	r1, [pc, #44]	; (d51c0 <setup+0x4c>)
   d5192:	480c      	ldr	r0, [pc, #48]	; (d51c4 <setup+0x50>)
   d5194:	f7ff ffe8 	bl	d5168 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("batt", batteryStatus);
   d5198:	490b      	ldr	r1, [pc, #44]	; (d51c8 <setup+0x54>)
   d519a:	480c      	ldr	r0, [pc, #48]	; (d51cc <setup+0x58>)
   d519c:	f7ff ffe4 	bl	d5168 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("gps", gpsPublish);
   d51a0:	490b      	ldr	r1, [pc, #44]	; (d51d0 <setup+0x5c>)
   d51a2:	480c      	ldr	r0, [pc, #48]	; (d51d4 <setup+0x60>)
   d51a4:	f7ff ffe0 	bl	d5168 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("gps list", gpsPublishList);
   d51a8:	490b      	ldr	r1, [pc, #44]	; (d51d8 <setup+0x64>)
   d51aa:	480c      	ldr	r0, [pc, #48]	; (d51dc <setup+0x68>)
   d51ac:	f7ff ffdc 	bl	d5168 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("reset log", gpsResetList);
   d51b0:	490b      	ldr	r1, [pc, #44]	; (d51e0 <setup+0x6c>)
   d51b2:	480c      	ldr	r0, [pc, #48]	; (d51e4 <setup+0x70>)
   d51b4:	f7ff ffd8 	bl	d5168 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_>
   d51b8:	bd10      	pop	{r4, pc}
   d51ba:	bf00      	nop
   d51bc:	2003e358 	.word	0x2003e358
   d51c0:	000d4f35 	.word	0x000d4f35
   d51c4:	000d98fa 	.word	0x000d98fa
   d51c8:	000d50ad 	.word	0x000d50ad
   d51cc:	000d9900 	.word	0x000d9900
   d51d0:	000d5065 	.word	0x000d5065
   d51d4:	000d9905 	.word	0x000d9905
   d51d8:	000d4f31 	.word	0x000d4f31
   d51dc:	000d9909 	.word	0x000d9909
   d51e0:	000d4f19 	.word	0x000d4f19
   d51e4:	000d9912 	.word	0x000d9912

000d51e8 <_GLOBAL__sub_I_transmittingData>:
    );
    // if there's more than 10% of the battery left, then return 1
    if (fuel.getSoC()>10){ return 1;}
    // if you're running out of battery, return 0
    else { return 0;}
}
   d51e8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d51ea:	4b0a      	ldr	r3, [pc, #40]	; (d5214 <_GLOBAL__sub_I_transmittingData+0x2c>)
float lat[NUM_SAVE];
float lon[NUM_SAVE];
int gps_index = 0;

// A FuelGauge named 'fuel' for checking on the battery state
FuelGauge fuel;
   d51ec:	4c0a      	ldr	r4, [pc, #40]	; (d5218 <_GLOBAL__sub_I_transmittingData+0x30>)
   d51ee:	2201      	movs	r2, #1
   d51f0:	701a      	strb	r2, [r3, #0]
   d51f2:	f000 f979 	bl	d54e8 <HAL_Pin_Map>

// How many minutes between publishes? 10+ recommended for long-time continuous publishing!
int delayMinutes = 10;

// Creating an AssetTracker named 't' for us to reference
AssetTracker t = AssetTracker();
   d51f6:	4809      	ldr	r0, [pc, #36]	; (d521c <_GLOBAL__sub_I_transmittingData+0x34>)
   d51f8:	f7ff fb62 	bl	d48c0 <_ZN12AssetTrackerC1Ev>
float lat[NUM_SAVE];
float lon[NUM_SAVE];
int gps_index = 0;

// A FuelGauge named 'fuel' for checking on the battery state
FuelGauge fuel;
   d51fc:	2100      	movs	r1, #0
   d51fe:	4620      	mov	r0, r4
   d5200:	f001 f8c0 	bl	d6384 <_ZN9FuelGaugeC1Eb>
   d5204:	4620      	mov	r0, r4
   d5206:	4a06      	ldr	r2, [pc, #24]	; (d5220 <_GLOBAL__sub_I_transmittingData+0x38>)
   d5208:	4906      	ldr	r1, [pc, #24]	; (d5224 <_GLOBAL__sub_I_transmittingData+0x3c>)
    );
    // if there's more than 10% of the battery left, then return 1
    if (fuel.getSoC()>10){ return 1;}
    // if you're running out of battery, return 0
    else { return 0;}
}
   d520a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
float lat[NUM_SAVE];
float lon[NUM_SAVE];
int gps_index = 0;

// A FuelGauge named 'fuel' for checking on the battery state
FuelGauge fuel;
   d520e:	f001 bc6e 	b.w	d6aee <__aeabi_atexit>
   d5212:	bf00      	nop
   d5214:	2003e359 	.word	0x2003e359
   d5218:	2003e360 	.word	0x2003e360
   d521c:	2003e358 	.word	0x2003e358
   d5220:	2003d694 	.word	0x2003d694
   d5224:	000d63a3 	.word	0x000d63a3

000d5228 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5228:	b508      	push	{r3, lr}
   d522a:	4b02      	ldr	r3, [pc, #8]	; (d5234 <HAL_USB_USART_Init+0xc>)
   d522c:	681b      	ldr	r3, [r3, #0]
   d522e:	681b      	ldr	r3, [r3, #0]
   d5230:	9301      	str	r3, [sp, #4]
   d5232:	bd08      	pop	{r3, pc}
   d5234:	0003024c 	.word	0x0003024c

000d5238 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5238:	b508      	push	{r3, lr}
   d523a:	4b02      	ldr	r3, [pc, #8]	; (d5244 <HAL_USB_USART_Begin+0xc>)
   d523c:	681b      	ldr	r3, [r3, #0]
   d523e:	685b      	ldr	r3, [r3, #4]
   d5240:	9301      	str	r3, [sp, #4]
   d5242:	bd08      	pop	{r3, pc}
   d5244:	0003024c 	.word	0x0003024c

000d5248 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5248:	b508      	push	{r3, lr}
   d524a:	4b02      	ldr	r3, [pc, #8]	; (d5254 <HAL_USB_USART_Available_Data+0xc>)
   d524c:	681b      	ldr	r3, [r3, #0]
   d524e:	691b      	ldr	r3, [r3, #16]
   d5250:	9301      	str	r3, [sp, #4]
   d5252:	bd08      	pop	{r3, pc}
   d5254:	0003024c 	.word	0x0003024c

000d5258 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b02      	ldr	r3, [pc, #8]	; (d5264 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	695b      	ldr	r3, [r3, #20]
   d5260:	9301      	str	r3, [sp, #4]
   d5262:	bd08      	pop	{r3, pc}
   d5264:	0003024c 	.word	0x0003024c

000d5268 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5268:	b508      	push	{r3, lr}
   d526a:	4b02      	ldr	r3, [pc, #8]	; (d5274 <HAL_USB_USART_Receive_Data+0xc>)
   d526c:	681b      	ldr	r3, [r3, #0]
   d526e:	699b      	ldr	r3, [r3, #24]
   d5270:	9301      	str	r3, [sp, #4]
   d5272:	bd08      	pop	{r3, pc}
   d5274:	0003024c 	.word	0x0003024c

000d5278 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5278:	b508      	push	{r3, lr}
   d527a:	4b02      	ldr	r3, [pc, #8]	; (d5284 <HAL_USB_USART_Send_Data+0xc>)
   d527c:	681b      	ldr	r3, [r3, #0]
   d527e:	69db      	ldr	r3, [r3, #28]
   d5280:	9301      	str	r3, [sp, #4]
   d5282:	bd08      	pop	{r3, pc}
   d5284:	0003024c 	.word	0x0003024c

000d5288 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5288:	b508      	push	{r3, lr}
   d528a:	4b02      	ldr	r3, [pc, #8]	; (d5294 <HAL_USB_USART_Flush_Data+0xc>)
   d528c:	681b      	ldr	r3, [r3, #0]
   d528e:	6a1b      	ldr	r3, [r3, #32]
   d5290:	9301      	str	r3, [sp, #4]
   d5292:	bd08      	pop	{r3, pc}
   d5294:	0003024c 	.word	0x0003024c

000d5298 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5298:	b508      	push	{r3, lr}
   d529a:	4b02      	ldr	r3, [pc, #8]	; (d52a4 <HAL_I2C_Begin+0xc>)
   d529c:	681b      	ldr	r3, [r3, #0]
   d529e:	68db      	ldr	r3, [r3, #12]
   d52a0:	9301      	str	r3, [sp, #4]
   d52a2:	bd08      	pop	{r3, pc}
   d52a4:	00030228 	.word	0x00030228

000d52a8 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d52a8:	b508      	push	{r3, lr}
   d52aa:	4b02      	ldr	r3, [pc, #8]	; (d52b4 <HAL_I2C_Request_Data+0xc>)
   d52ac:	681b      	ldr	r3, [r3, #0]
   d52ae:	695b      	ldr	r3, [r3, #20]
   d52b0:	9301      	str	r3, [sp, #4]
   d52b2:	bd08      	pop	{r3, pc}
   d52b4:	00030228 	.word	0x00030228

000d52b8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <HAL_I2C_Begin_Transmission+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	699b      	ldr	r3, [r3, #24]
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	00030228 	.word	0x00030228

000d52c8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <HAL_I2C_End_Transmission+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	69db      	ldr	r3, [r3, #28]
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	00030228 	.word	0x00030228

000d52d8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <HAL_I2C_Write_Data+0xc>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	6a1b      	ldr	r3, [r3, #32]
   d52e0:	9301      	str	r3, [sp, #4]
   d52e2:	bd08      	pop	{r3, pc}
   d52e4:	00030228 	.word	0x00030228

000d52e8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d52e8:	b508      	push	{r3, lr}
   d52ea:	4b02      	ldr	r3, [pc, #8]	; (d52f4 <HAL_I2C_Available_Data+0xc>)
   d52ec:	681b      	ldr	r3, [r3, #0]
   d52ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d52f0:	9301      	str	r3, [sp, #4]
   d52f2:	bd08      	pop	{r3, pc}
   d52f4:	00030228 	.word	0x00030228

000d52f8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d52f8:	b508      	push	{r3, lr}
   d52fa:	4b02      	ldr	r3, [pc, #8]	; (d5304 <HAL_I2C_Read_Data+0xc>)
   d52fc:	681b      	ldr	r3, [r3, #0]
   d52fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5300:	9301      	str	r3, [sp, #4]
   d5302:	bd08      	pop	{r3, pc}
   d5304:	00030228 	.word	0x00030228

000d5308 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5308:	b508      	push	{r3, lr}
   d530a:	4b02      	ldr	r3, [pc, #8]	; (d5314 <HAL_I2C_Peek_Data+0xc>)
   d530c:	681b      	ldr	r3, [r3, #0]
   d530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5310:	9301      	str	r3, [sp, #4]
   d5312:	bd08      	pop	{r3, pc}
   d5314:	00030228 	.word	0x00030228

000d5318 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5318:	b508      	push	{r3, lr}
   d531a:	4b02      	ldr	r3, [pc, #8]	; (d5324 <HAL_I2C_Flush_Data+0xc>)
   d531c:	681b      	ldr	r3, [r3, #0]
   d531e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5320:	9301      	str	r3, [sp, #4]
   d5322:	bd08      	pop	{r3, pc}
   d5324:	00030228 	.word	0x00030228

000d5328 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5328:	b508      	push	{r3, lr}
   d532a:	4b02      	ldr	r3, [pc, #8]	; (d5334 <HAL_I2C_Is_Enabled+0xc>)
   d532c:	681b      	ldr	r3, [r3, #0]
   d532e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5330:	9301      	str	r3, [sp, #4]
   d5332:	bd08      	pop	{r3, pc}
   d5334:	00030228 	.word	0x00030228

000d5338 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5338:	b508      	push	{r3, lr}
   d533a:	4b02      	ldr	r3, [pc, #8]	; (d5344 <HAL_I2C_Init+0xc>)
   d533c:	681b      	ldr	r3, [r3, #0]
   d533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5340:	9301      	str	r3, [sp, #4]
   d5342:	bd08      	pop	{r3, pc}
   d5344:	00030228 	.word	0x00030228

000d5348 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d5348:	b508      	push	{r3, lr}
   d534a:	4b02      	ldr	r3, [pc, #8]	; (d5354 <HAL_I2C_Acquire+0xc>)
   d534c:	681b      	ldr	r3, [r3, #0]
   d534e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5350:	9301      	str	r3, [sp, #4]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	00030228 	.word	0x00030228

000d5358 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d5358:	b508      	push	{r3, lr}
   d535a:	4b02      	ldr	r3, [pc, #8]	; (d5364 <HAL_I2C_Release+0xc>)
   d535c:	681b      	ldr	r3, [r3, #0]
   d535e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5360:	9301      	str	r3, [sp, #4]
   d5362:	bd08      	pop	{r3, pc}
   d5364:	00030228 	.word	0x00030228

000d5368 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5368:	b508      	push	{r3, lr}
   d536a:	4b02      	ldr	r3, [pc, #8]	; (d5374 <HAL_USART_Init+0xc>)
   d536c:	681b      	ldr	r3, [r3, #0]
   d536e:	681b      	ldr	r3, [r3, #0]
   d5370:	9301      	str	r3, [sp, #4]
   d5372:	bd08      	pop	{r3, pc}
   d5374:	0003023c 	.word	0x0003023c

000d5378 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b02      	ldr	r3, [pc, #8]	; (d5384 <HAL_USART_Write_Data+0xc>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	68db      	ldr	r3, [r3, #12]
   d5380:	9301      	str	r3, [sp, #4]
   d5382:	bd08      	pop	{r3, pc}
   d5384:	0003023c 	.word	0x0003023c

000d5388 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5388:	b508      	push	{r3, lr}
   d538a:	4b02      	ldr	r3, [pc, #8]	; (d5394 <HAL_USART_Available_Data+0xc>)
   d538c:	681b      	ldr	r3, [r3, #0]
   d538e:	691b      	ldr	r3, [r3, #16]
   d5390:	9301      	str	r3, [sp, #4]
   d5392:	bd08      	pop	{r3, pc}
   d5394:	0003023c 	.word	0x0003023c

000d5398 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5398:	b508      	push	{r3, lr}
   d539a:	4b02      	ldr	r3, [pc, #8]	; (d53a4 <HAL_USART_Read_Data+0xc>)
   d539c:	681b      	ldr	r3, [r3, #0]
   d539e:	695b      	ldr	r3, [r3, #20]
   d53a0:	9301      	str	r3, [sp, #4]
   d53a2:	bd08      	pop	{r3, pc}
   d53a4:	0003023c 	.word	0x0003023c

000d53a8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d53a8:	b508      	push	{r3, lr}
   d53aa:	4b02      	ldr	r3, [pc, #8]	; (d53b4 <HAL_USART_Peek_Data+0xc>)
   d53ac:	681b      	ldr	r3, [r3, #0]
   d53ae:	699b      	ldr	r3, [r3, #24]
   d53b0:	9301      	str	r3, [sp, #4]
   d53b2:	bd08      	pop	{r3, pc}
   d53b4:	0003023c 	.word	0x0003023c

000d53b8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d53b8:	b508      	push	{r3, lr}
   d53ba:	4b02      	ldr	r3, [pc, #8]	; (d53c4 <HAL_USART_Flush_Data+0xc>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	69db      	ldr	r3, [r3, #28]
   d53c0:	9301      	str	r3, [sp, #4]
   d53c2:	bd08      	pop	{r3, pc}
   d53c4:	0003023c 	.word	0x0003023c

000d53c8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <HAL_USART_Is_Enabled+0xc>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	6a1b      	ldr	r3, [r3, #32]
   d53d0:	9301      	str	r3, [sp, #4]
   d53d2:	bd08      	pop	{r3, pc}
   d53d4:	0003023c 	.word	0x0003023c

000d53d8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d53d8:	b508      	push	{r3, lr}
   d53da:	4b02      	ldr	r3, [pc, #8]	; (d53e4 <HAL_USART_Available_Data_For_Write+0xc>)
   d53dc:	681b      	ldr	r3, [r3, #0]
   d53de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d53e0:	9301      	str	r3, [sp, #4]
   d53e2:	bd08      	pop	{r3, pc}
   d53e4:	0003023c 	.word	0x0003023c

000d53e8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d53e8:	b508      	push	{r3, lr}
   d53ea:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <HAL_USART_BeginConfig+0xc>)
   d53ec:	681b      	ldr	r3, [r3, #0]
   d53ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d53f0:	9301      	str	r3, [sp, #4]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	0003023c 	.word	0x0003023c

000d53f8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d53f8:	b508      	push	{r3, lr}
   d53fa:	4b02      	ldr	r3, [pc, #8]	; (d5404 <inet_inet_ntop+0xc>)
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	695b      	ldr	r3, [r3, #20]
   d5400:	9301      	str	r3, [sp, #4]
   d5402:	bd08      	pop	{r3, pc}
   d5404:	00030264 	.word	0x00030264

000d5408 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5408:	b508      	push	{r3, lr}
   d540a:	4b02      	ldr	r3, [pc, #8]	; (d5414 <os_thread_is_current+0xc>)
   d540c:	681b      	ldr	r3, [r3, #0]
   d540e:	689b      	ldr	r3, [r3, #8]
   d5410:	9301      	str	r3, [sp, #4]
   d5412:	bd08      	pop	{r3, pc}
   d5414:	00030248 	.word	0x00030248

000d5418 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5418:	b508      	push	{r3, lr}
   d541a:	4b02      	ldr	r3, [pc, #8]	; (d5424 <os_thread_join+0xc>)
   d541c:	681b      	ldr	r3, [r3, #0]
   d541e:	691b      	ldr	r3, [r3, #16]
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	bd08      	pop	{r3, pc}
   d5424:	00030248 	.word	0x00030248

000d5428 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5428:	b508      	push	{r3, lr}
   d542a:	4b02      	ldr	r3, [pc, #8]	; (d5434 <os_thread_cleanup+0xc>)
   d542c:	681b      	ldr	r3, [r3, #0]
   d542e:	695b      	ldr	r3, [r3, #20]
   d5430:	9301      	str	r3, [sp, #4]
   d5432:	bd08      	pop	{r3, pc}
   d5434:	00030248 	.word	0x00030248

000d5438 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5438:	b508      	push	{r3, lr}
   d543a:	4b02      	ldr	r3, [pc, #8]	; (d5444 <os_mutex_create+0xc>)
   d543c:	681b      	ldr	r3, [r3, #0]
   d543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5440:	9301      	str	r3, [sp, #4]
   d5442:	bd08      	pop	{r3, pc}
   d5444:	00030248 	.word	0x00030248

000d5448 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5448:	b508      	push	{r3, lr}
   d544a:	4b02      	ldr	r3, [pc, #8]	; (d5454 <os_mutex_recursive_create+0xc>)
   d544c:	681b      	ldr	r3, [r3, #0]
   d544e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5450:	9301      	str	r3, [sp, #4]
   d5452:	bd08      	pop	{r3, pc}
   d5454:	00030248 	.word	0x00030248

000d5458 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5458:	b508      	push	{r3, lr}
   d545a:	4b02      	ldr	r3, [pc, #8]	; (d5464 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d545c:	681b      	ldr	r3, [r3, #0]
   d545e:	695b      	ldr	r3, [r3, #20]
   d5460:	9301      	str	r3, [sp, #4]
   d5462:	bd08      	pop	{r3, pc}
   d5464:	00030218 	.word	0x00030218

000d5468 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5468:	b508      	push	{r3, lr}
   d546a:	4b02      	ldr	r3, [pc, #8]	; (d5474 <HAL_SPI_Begin+0xc>)
   d546c:	681b      	ldr	r3, [r3, #0]
   d546e:	681b      	ldr	r3, [r3, #0]
   d5470:	9301      	str	r3, [sp, #4]
   d5472:	bd08      	pop	{r3, pc}
   d5474:	00030230 	.word	0x00030230

000d5478 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d5478:	b508      	push	{r3, lr}
   d547a:	4b02      	ldr	r3, [pc, #8]	; (d5484 <HAL_SPI_Set_Bit_Order+0xc>)
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	689b      	ldr	r3, [r3, #8]
   d5480:	9301      	str	r3, [sp, #4]
   d5482:	bd08      	pop	{r3, pc}
   d5484:	00030230 	.word	0x00030230

000d5488 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5488:	b508      	push	{r3, lr}
   d548a:	4b02      	ldr	r3, [pc, #8]	; (d5494 <HAL_SPI_Set_Data_Mode+0xc>)
   d548c:	681b      	ldr	r3, [r3, #0]
   d548e:	68db      	ldr	r3, [r3, #12]
   d5490:	9301      	str	r3, [sp, #4]
   d5492:	bd08      	pop	{r3, pc}
   d5494:	00030230 	.word	0x00030230

000d5498 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <HAL_SPI_Set_Clock_Divider+0xc>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	691b      	ldr	r3, [r3, #16]
   d54a0:	9301      	str	r3, [sp, #4]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	00030230 	.word	0x00030230

000d54a8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <HAL_SPI_Send_Receive_Data+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	695b      	ldr	r3, [r3, #20]
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	00030230 	.word	0x00030230

000d54b8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <HAL_SPI_Init+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	69db      	ldr	r3, [r3, #28]
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	00030230 	.word	0x00030230

000d54c8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <HAL_SPI_Is_Enabled+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	6a1b      	ldr	r3, [r3, #32]
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	00030230 	.word	0x00030230

000d54d8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <HAL_SPI_Info+0xc>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d54e0:	9301      	str	r3, [sp, #4]
   d54e2:	bd08      	pop	{r3, pc}
   d54e4:	00030230 	.word	0x00030230

000d54e8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <HAL_Pin_Map+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	681b      	ldr	r3, [r3, #0]
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	0003022c 	.word	0x0003022c

000d54f8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <HAL_Pin_Mode+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	689b      	ldr	r3, [r3, #8]
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	0003022c 	.word	0x0003022c

000d5508 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <HAL_Get_Pin_Mode+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	68db      	ldr	r3, [r3, #12]
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	0003022c 	.word	0x0003022c

000d5518 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <HAL_GPIO_Write+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	691b      	ldr	r3, [r3, #16]
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	0003022c 	.word	0x0003022c

000d5528 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b02      	ldr	r3, [pc, #8]	; (d5534 <HAL_GPIO_Read+0xc>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	695b      	ldr	r3, [r3, #20]
   d5530:	9301      	str	r3, [sp, #4]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	0003022c 	.word	0x0003022c

000d5538 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5538:	b508      	push	{r3, lr}
   d553a:	4b02      	ldr	r3, [pc, #8]	; (d5544 <netdb_freeaddrinfo+0xc>)
   d553c:	681b      	ldr	r3, [r3, #0]
   d553e:	689b      	ldr	r3, [r3, #8]
   d5540:	9301      	str	r3, [sp, #4]
   d5542:	bd08      	pop	{r3, pc}
   d5544:	00030268 	.word	0x00030268

000d5548 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b02      	ldr	r3, [pc, #8]	; (d5554 <netdb_getaddrinfo+0xc>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	68db      	ldr	r3, [r3, #12]
   d5550:	9301      	str	r3, [sp, #4]
   d5552:	bd08      	pop	{r3, pc}
   d5554:	00030268 	.word	0x00030268

000d5558 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5558:	b508      	push	{r3, lr}
   d555a:	4b02      	ldr	r3, [pc, #8]	; (d5564 <spark_function+0xc>)
   d555c:	681b      	ldr	r3, [r3, #0]
   d555e:	685b      	ldr	r3, [r3, #4]
   d5560:	9301      	str	r3, [sp, #4]
   d5562:	bd08      	pop	{r3, pc}
   d5564:	00030244 	.word	0x00030244

000d5568 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5568:	b508      	push	{r3, lr}
   d556a:	4b02      	ldr	r3, [pc, #8]	; (d5574 <spark_send_event+0xc>)
   d556c:	681b      	ldr	r3, [r3, #0]
   d556e:	6a1b      	ldr	r3, [r3, #32]
   d5570:	9301      	str	r3, [sp, #4]
   d5572:	bd08      	pop	{r3, pc}
   d5574:	00030244 	.word	0x00030244

000d5578 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5578:	b508      	push	{r3, lr}
   d557a:	4b02      	ldr	r3, [pc, #8]	; (d5584 <spark_set_random_seed_from_cloud_handler+0xc>)
   d557c:	681b      	ldr	r3, [r3, #0]
   d557e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5580:	9301      	str	r3, [sp, #4]
   d5582:	bd08      	pop	{r3, pc}
   d5584:	00030244 	.word	0x00030244

000d5588 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5588:	b508      	push	{r3, lr}
   d558a:	4b02      	ldr	r3, [pc, #8]	; (d5594 <network_connect+0xc>)
   d558c:	681b      	ldr	r3, [r3, #0]
   d558e:	685b      	ldr	r3, [r3, #4]
   d5590:	9301      	str	r3, [sp, #4]
   d5592:	bd08      	pop	{r3, pc}
   d5594:	00030240 	.word	0x00030240

000d5598 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5598:	b508      	push	{r3, lr}
   d559a:	4b02      	ldr	r3, [pc, #8]	; (d55a4 <network_connecting+0xc>)
   d559c:	681b      	ldr	r3, [r3, #0]
   d559e:	689b      	ldr	r3, [r3, #8]
   d55a0:	9301      	str	r3, [sp, #4]
   d55a2:	bd08      	pop	{r3, pc}
   d55a4:	00030240 	.word	0x00030240

000d55a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d55a8:	b508      	push	{r3, lr}
   d55aa:	4b02      	ldr	r3, [pc, #8]	; (d55b4 <network_disconnect+0xc>)
   d55ac:	681b      	ldr	r3, [r3, #0]
   d55ae:	68db      	ldr	r3, [r3, #12]
   d55b0:	9301      	str	r3, [sp, #4]
   d55b2:	bd08      	pop	{r3, pc}
   d55b4:	00030240 	.word	0x00030240

000d55b8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d55b8:	b508      	push	{r3, lr}
   d55ba:	4b02      	ldr	r3, [pc, #8]	; (d55c4 <network_ready+0xc>)
   d55bc:	681b      	ldr	r3, [r3, #0]
   d55be:	691b      	ldr	r3, [r3, #16]
   d55c0:	9301      	str	r3, [sp, #4]
   d55c2:	bd08      	pop	{r3, pc}
   d55c4:	00030240 	.word	0x00030240

000d55c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d55c8:	b508      	push	{r3, lr}
   d55ca:	4b02      	ldr	r3, [pc, #8]	; (d55d4 <network_on+0xc>)
   d55cc:	681b      	ldr	r3, [r3, #0]
   d55ce:	695b      	ldr	r3, [r3, #20]
   d55d0:	9301      	str	r3, [sp, #4]
   d55d2:	bd08      	pop	{r3, pc}
   d55d4:	00030240 	.word	0x00030240

000d55d8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d55d8:	b508      	push	{r3, lr}
   d55da:	4b02      	ldr	r3, [pc, #8]	; (d55e4 <network_off+0xc>)
   d55dc:	681b      	ldr	r3, [r3, #0]
   d55de:	699b      	ldr	r3, [r3, #24]
   d55e0:	9301      	str	r3, [sp, #4]
   d55e2:	bd08      	pop	{r3, pc}
   d55e4:	00030240 	.word	0x00030240

000d55e8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d55e8:	b508      	push	{r3, lr}
   d55ea:	4b02      	ldr	r3, [pc, #8]	; (d55f4 <network_listen+0xc>)
   d55ec:	681b      	ldr	r3, [r3, #0]
   d55ee:	69db      	ldr	r3, [r3, #28]
   d55f0:	9301      	str	r3, [sp, #4]
   d55f2:	bd08      	pop	{r3, pc}
   d55f4:	00030240 	.word	0x00030240

000d55f8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d55f8:	b508      	push	{r3, lr}
   d55fa:	4b02      	ldr	r3, [pc, #8]	; (d5604 <network_listening+0xc>)
   d55fc:	681b      	ldr	r3, [r3, #0]
   d55fe:	6a1b      	ldr	r3, [r3, #32]
   d5600:	9301      	str	r3, [sp, #4]
   d5602:	bd08      	pop	{r3, pc}
   d5604:	00030240 	.word	0x00030240

000d5608 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5608:	b508      	push	{r3, lr}
   d560a:	4b02      	ldr	r3, [pc, #8]	; (d5614 <network_set_listen_timeout+0xc>)
   d560c:	681b      	ldr	r3, [r3, #0]
   d560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	bd08      	pop	{r3, pc}
   d5614:	00030240 	.word	0x00030240

000d5618 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5618:	b508      	push	{r3, lr}
   d561a:	4b02      	ldr	r3, [pc, #8]	; (d5624 <network_get_listen_timeout+0xc>)
   d561c:	681b      	ldr	r3, [r3, #0]
   d561e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	bd08      	pop	{r3, pc}
   d5624:	00030240 	.word	0x00030240

000d5628 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5628:	b508      	push	{r3, lr}
   d562a:	4b02      	ldr	r3, [pc, #8]	; (d5634 <set_system_mode+0xc>)
   d562c:	681b      	ldr	r3, [r3, #0]
   d562e:	685b      	ldr	r3, [r3, #4]
   d5630:	9301      	str	r3, [sp, #4]
   d5632:	bd08      	pop	{r3, pc}
   d5634:	00030220 	.word	0x00030220

000d5638 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <system_delay_ms+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	695b      	ldr	r3, [r3, #20]
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	00030220 	.word	0x00030220

000d5648 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <application_thread_current+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	00030220 	.word	0x00030220

000d5658 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <application_thread_invoke+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	00030220 	.word	0x00030220

000d5668 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b03      	ldr	r3, [pc, #12]	; (d5678 <system_ctrl_set_app_request_handler+0x10>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5672:	9301      	str	r3, [sp, #4]
   d5674:	bd08      	pop	{r3, pc}
   d5676:	0000      	.short	0x0000
   d5678:	00030220 	.word	0x00030220

000d567c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d567c:	b508      	push	{r3, lr}
   d567e:	4b03      	ldr	r3, [pc, #12]	; (d568c <system_ctrl_set_result+0x10>)
   d5680:	681b      	ldr	r3, [r3, #0]
   d5682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5686:	9301      	str	r3, [sp, #4]
   d5688:	bd08      	pop	{r3, pc}
   d568a:	0000      	.short	0x0000
   d568c:	00030220 	.word	0x00030220

000d5690 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5690:	b508      	push	{r3, lr}
   d5692:	4b02      	ldr	r3, [pc, #8]	; (d569c <malloc+0xc>)
   d5694:	681b      	ldr	r3, [r3, #0]
   d5696:	681b      	ldr	r3, [r3, #0]
   d5698:	9301      	str	r3, [sp, #4]
   d569a:	bd08      	pop	{r3, pc}
   d569c:	0003021c 	.word	0x0003021c

000d56a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d56a0:	b508      	push	{r3, lr}
   d56a2:	4b02      	ldr	r3, [pc, #8]	; (d56ac <free+0xc>)
   d56a4:	681b      	ldr	r3, [r3, #0]
   d56a6:	685b      	ldr	r3, [r3, #4]
   d56a8:	9301      	str	r3, [sp, #4]
   d56aa:	bd08      	pop	{r3, pc}
   d56ac:	0003021c 	.word	0x0003021c

000d56b0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d56b0:	b508      	push	{r3, lr}
   d56b2:	4b02      	ldr	r3, [pc, #8]	; (d56bc <realloc+0xc>)
   d56b4:	681b      	ldr	r3, [r3, #0]
   d56b6:	689b      	ldr	r3, [r3, #8]
   d56b8:	9301      	str	r3, [sp, #4]
   d56ba:	bd08      	pop	{r3, pc}
   d56bc:	0003021c 	.word	0x0003021c

000d56c0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d56c0:	b508      	push	{r3, lr}
   d56c2:	4b02      	ldr	r3, [pc, #8]	; (d56cc <vsnprintf+0xc>)
   d56c4:	681b      	ldr	r3, [r3, #0]
   d56c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d56c8:	9301      	str	r3, [sp, #4]
   d56ca:	bd08      	pop	{r3, pc}
   d56cc:	0003021c 	.word	0x0003021c

000d56d0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d56d0:	b508      	push	{r3, lr}
   d56d2:	4b02      	ldr	r3, [pc, #8]	; (d56dc <abort+0xc>)
   d56d4:	681b      	ldr	r3, [r3, #0]
   d56d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d56d8:	9301      	str	r3, [sp, #4]
   d56da:	bd08      	pop	{r3, pc}
   d56dc:	0003021c 	.word	0x0003021c

000d56e0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d56e0:	b508      	push	{r3, lr}
   d56e2:	4b02      	ldr	r3, [pc, #8]	; (d56ec <_malloc_r+0xc>)
   d56e4:	681b      	ldr	r3, [r3, #0]
   d56e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56e8:	9301      	str	r3, [sp, #4]
   d56ea:	bd08      	pop	{r3, pc}
   d56ec:	0003021c 	.word	0x0003021c

000d56f0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d56f0:	b508      	push	{r3, lr}
   d56f2:	4b02      	ldr	r3, [pc, #8]	; (d56fc <__errno+0xc>)
   d56f4:	681b      	ldr	r3, [r3, #0]
   d56f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d56f8:	9301      	str	r3, [sp, #4]
   d56fa:	bd08      	pop	{r3, pc}
   d56fc:	0003021c 	.word	0x0003021c

000d5700 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5700:	2300      	movs	r3, #0
   d5702:	461a      	mov	r2, r3
   d5704:	6840      	ldr	r0, [r0, #4]
   d5706:	f7ff bf3f 	b.w	d5588 <network_connect>

000d570a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d570a:	2200      	movs	r2, #0
   d570c:	2102      	movs	r1, #2
   d570e:	6840      	ldr	r0, [r0, #4]
   d5710:	f7ff bf4a 	b.w	d55a8 <network_disconnect>

000d5714 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5714:	2200      	movs	r2, #0
   d5716:	4611      	mov	r1, r2
   d5718:	6840      	ldr	r0, [r0, #4]
   d571a:	f7ff bf3d 	b.w	d5598 <network_connecting>

000d571e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d571e:	2200      	movs	r2, #0
   d5720:	4611      	mov	r1, r2
   d5722:	6840      	ldr	r0, [r0, #4]
   d5724:	f7ff bf48 	b.w	d55b8 <network_ready>

000d5728 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5728:	2300      	movs	r3, #0
   d572a:	461a      	mov	r2, r3
   d572c:	4619      	mov	r1, r3
   d572e:	6840      	ldr	r0, [r0, #4]
   d5730:	f7ff bf4a 	b.w	d55c8 <network_on>

000d5734 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5734:	2300      	movs	r3, #0
   d5736:	461a      	mov	r2, r3
   d5738:	4619      	mov	r1, r3
   d573a:	6840      	ldr	r0, [r0, #4]
   d573c:	f7ff bf4c 	b.w	d55d8 <network_off>

000d5740 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5740:	2200      	movs	r2, #0
   d5742:	f081 0101 	eor.w	r1, r1, #1
   d5746:	6840      	ldr	r0, [r0, #4]
   d5748:	f7ff bf4e 	b.w	d55e8 <network_listen>

000d574c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d574c:	2200      	movs	r2, #0
   d574e:	6840      	ldr	r0, [r0, #4]
   d5750:	f7ff bf5a 	b.w	d5608 <network_set_listen_timeout>

000d5754 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5754:	2200      	movs	r2, #0
   d5756:	4611      	mov	r1, r2
   d5758:	6840      	ldr	r0, [r0, #4]
   d575a:	f7ff bf5d 	b.w	d5618 <network_get_listen_timeout>

000d575e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d575e:	2200      	movs	r2, #0
   d5760:	4611      	mov	r1, r2
   d5762:	6840      	ldr	r0, [r0, #4]
   d5764:	f7ff bf48 	b.w	d55f8 <network_listening>

000d5768 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5768:	b570      	push	{r4, r5, r6, lr}
   d576a:	b08c      	sub	sp, #48	; 0x30
   d576c:	4614      	mov	r4, r2
   d576e:	4606      	mov	r6, r0
    IPAddress addr;
   d5770:	f000 fa82 	bl	d5c78 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5774:	ab0c      	add	r3, sp, #48	; 0x30
   d5776:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5778:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d577a:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d577e:	4620      	mov	r0, r4
   d5780:	f7ff fee2 	bl	d5548 <netdb_getaddrinfo>
    if (!r && ai) {
   d5784:	4601      	mov	r1, r0
   d5786:	bb58      	cbnz	r0, d57e0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d5788:	9b00      	ldr	r3, [sp, #0]
   d578a:	b34b      	cbz	r3, d57e0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d578c:	685a      	ldr	r2, [r3, #4]
   d578e:	2a02      	cmp	r2, #2
   d5790:	d00e      	beq.n	d57b0 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d5792:	2a0a      	cmp	r2, #10
   d5794:	d124      	bne.n	d57e0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d5796:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d5798:	2211      	movs	r2, #17
   d579a:	a801      	add	r0, sp, #4
   d579c:	f002 f9c9 	bl	d7b32 <memset>
                a.v = 6;
   d57a0:	2306      	movs	r3, #6
   d57a2:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d57a6:	ad01      	add	r5, sp, #4
   d57a8:	f104 0308 	add.w	r3, r4, #8
   d57ac:	3418      	adds	r4, #24
   d57ae:	e005      	b.n	d57bc <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d57b0:	6959      	ldr	r1, [r3, #20]
   d57b2:	4630      	mov	r0, r6
   d57b4:	3104      	adds	r1, #4
   d57b6:	f000 fa8c 	bl	d5cd2 <_ZN9IPAddressaSEPKh>
                break;
   d57ba:	e011      	b.n	d57e0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d57bc:	6818      	ldr	r0, [r3, #0]
   d57be:	6859      	ldr	r1, [r3, #4]
   d57c0:	462a      	mov	r2, r5
   d57c2:	c203      	stmia	r2!, {r0, r1}
   d57c4:	3308      	adds	r3, #8
   d57c6:	42a3      	cmp	r3, r4
   d57c8:	4615      	mov	r5, r2
   d57ca:	d1f7      	bne.n	d57bc <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d57cc:	a901      	add	r1, sp, #4
   d57ce:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d57d0:	ad07      	add	r5, sp, #28
   d57d2:	f000 fa5f 	bl	d5c94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d57d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d57d8:	1d34      	adds	r4, r6, #4
   d57da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d57dc:	682b      	ldr	r3, [r5, #0]
   d57de:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d57e0:	9800      	ldr	r0, [sp, #0]
   d57e2:	f7ff fea9 	bl	d5538 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d57e6:	4630      	mov	r0, r6
   d57e8:	b00c      	add	sp, #48	; 0x30
   d57ea:	bd70      	pop	{r4, r5, r6, pc}

000d57ec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d57ec:	4b02      	ldr	r3, [pc, #8]	; (d57f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d57ee:	4a03      	ldr	r2, [pc, #12]	; (d57fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d57f0:	601a      	str	r2, [r3, #0]
   d57f2:	2200      	movs	r2, #0
   d57f4:	605a      	str	r2, [r3, #4]
   d57f6:	4770      	bx	lr
   d57f8:	2003e368 	.word	0x2003e368
   d57fc:	000d9924 	.word	0x000d9924

000d5800 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5800:	2200      	movs	r2, #0
   d5802:	4611      	mov	r1, r2
   d5804:	6840      	ldr	r0, [r0, #4]
   d5806:	f7ff bef7 	b.w	d55f8 <network_listening>

000d580a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d580a:	2200      	movs	r2, #0
   d580c:	4611      	mov	r1, r2
   d580e:	6840      	ldr	r0, [r0, #4]
   d5810:	f7ff bf02 	b.w	d5618 <network_get_listen_timeout>

000d5814 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5814:	2200      	movs	r2, #0
   d5816:	6840      	ldr	r0, [r0, #4]
   d5818:	f7ff bef6 	b.w	d5608 <network_set_listen_timeout>

000d581c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d581c:	2200      	movs	r2, #0
   d581e:	f081 0101 	eor.w	r1, r1, #1
   d5822:	6840      	ldr	r0, [r0, #4]
   d5824:	f7ff bee0 	b.w	d55e8 <network_listen>

000d5828 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5828:	2300      	movs	r3, #0
   d582a:	461a      	mov	r2, r3
   d582c:	4619      	mov	r1, r3
   d582e:	6840      	ldr	r0, [r0, #4]
   d5830:	f7ff bed2 	b.w	d55d8 <network_off>

000d5834 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5834:	2300      	movs	r3, #0
   d5836:	461a      	mov	r2, r3
   d5838:	4619      	mov	r1, r3
   d583a:	6840      	ldr	r0, [r0, #4]
   d583c:	f7ff bec4 	b.w	d55c8 <network_on>

000d5840 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5840:	2200      	movs	r2, #0
   d5842:	4611      	mov	r1, r2
   d5844:	6840      	ldr	r0, [r0, #4]
   d5846:	f7ff beb7 	b.w	d55b8 <network_ready>

000d584a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d584a:	2200      	movs	r2, #0
   d584c:	4611      	mov	r1, r2
   d584e:	6840      	ldr	r0, [r0, #4]
   d5850:	f7ff bea2 	b.w	d5598 <network_connecting>

000d5854 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5854:	2200      	movs	r2, #0
   d5856:	2102      	movs	r1, #2
   d5858:	6840      	ldr	r0, [r0, #4]
   d585a:	f7ff bea5 	b.w	d55a8 <network_disconnect>

000d585e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d585e:	2300      	movs	r3, #0
   d5860:	461a      	mov	r2, r3
   d5862:	6840      	ldr	r0, [r0, #4]
   d5864:	f7ff be90 	b.w	d5588 <network_connect>

000d5868 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5868:	b110      	cbz	r0, d5870 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d586a:	6803      	ldr	r3, [r0, #0]
   d586c:	685b      	ldr	r3, [r3, #4]
   d586e:	4718      	bx	r3
   d5870:	4770      	bx	lr

000d5872 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d5872:	b538      	push	{r3, r4, r5, lr}
   d5874:	4604      	mov	r4, r0
   d5876:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d5878:	b1d0      	cbz	r0, d58b0 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d587a:	f7ff fdc5 	bl	d5408 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d587e:	b9b8      	cbnz	r0, d58b0 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d5880:	7c23      	ldrb	r3, [r4, #16]
   d5882:	b91b      	cbnz	r3, d588c <_ZN6Thread7disposeEv+0x1a>
   d5884:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d5886:	b108      	cbz	r0, d588c <_ZN6Thread7disposeEv+0x1a>
   d5888:	f7ff fdc6 	bl	d5418 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d588c:	6865      	ldr	r5, [r4, #4]
   d588e:	b155      	cbz	r5, d58a6 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5890:	68ab      	ldr	r3, [r5, #8]
   d5892:	b11b      	cbz	r3, d589c <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5894:	2203      	movs	r2, #3
   d5896:	4629      	mov	r1, r5
   d5898:	4628      	mov	r0, r5
   d589a:	4798      	blx	r3
            delete wrapper;
   d589c:	4628      	mov	r0, r5
   d589e:	f7fe fbfc 	bl	d409a <_ZdlPv>
            wrapper = NULL;
   d58a2:	2300      	movs	r3, #0
   d58a4:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d58a6:	6820      	ldr	r0, [r4, #0]
   d58a8:	f7ff fdbe 	bl	d5428 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d58ac:	2300      	movs	r3, #0
   d58ae:	6023      	str	r3, [r4, #0]
   d58b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d58b4 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d58b4:	b538      	push	{r3, r4, r5, lr}
   d58b6:	4b0b      	ldr	r3, [pc, #44]	; (d58e4 <_ZN5spark9MeshClassD1Ev+0x30>)
   d58b8:	6003      	str	r3, [r0, #0]
   d58ba:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d58bc:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d58c0:	b108      	cbz	r0, d58c6 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d58c2:	f7fe fbec 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d58c6:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d58ca:	b12d      	cbz	r5, d58d8 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d58cc:	4628      	mov	r0, r5
   d58ce:	f7ff ffd0 	bl	d5872 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d58d2:	4628      	mov	r0, r5
   d58d4:	f7fe fbe1 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d58d8:	68a0      	ldr	r0, [r4, #8]
   d58da:	b108      	cbz	r0, d58e0 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d58dc:	f7ff ffc4 	bl	d5868 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d58e0:	4620      	mov	r0, r4
   d58e2:	bd38      	pop	{r3, r4, r5, pc}
   d58e4:	000d9958 	.word	0x000d9958

000d58e8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d58e8:	b538      	push	{r3, r4, r5, lr}
   d58ea:	4c0d      	ldr	r4, [pc, #52]	; (d5920 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d58ec:	4b0d      	ldr	r3, [pc, #52]	; (d5924 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d58ee:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d58f0:	2500      	movs	r5, #0
   d58f2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d58f4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d58f8:	6063      	str	r3, [r4, #4]
   d58fa:	60a5      	str	r5, [r4, #8]
   d58fc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5900:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5904:	f7ff fda0 	bl	d5448 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5908:	4b07      	ldr	r3, [pc, #28]	; (d5928 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d590a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d590e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5910:	4620      	mov	r0, r4
   d5912:	4a06      	ldr	r2, [pc, #24]	; (d592c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5914:	4906      	ldr	r1, [pc, #24]	; (d5930 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d591a:	f001 b8e8 	b.w	d6aee <__aeabi_atexit>
   d591e:	bf00      	nop
   d5920:	2003e370 	.word	0x2003e370
   d5924:	000d9924 	.word	0x000d9924
   d5928:	000d9958 	.word	0x000d9958
   d592c:	2003d694 	.word	0x2003d694
   d5930:	000d58b5 	.word	0x000d58b5

000d5934 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5934:	4770      	bx	lr

000d5936 <_ZN8SPIClassD0Ev>:
   d5936:	b510      	push	{r4, lr}
   d5938:	4604      	mov	r4, r0
   d593a:	f7fe fbae 	bl	d409a <_ZdlPv>
   d593e:	4620      	mov	r0, r4
   d5940:	bd10      	pop	{r4, pc}
	...

000d5944 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5944:	b570      	push	{r4, r5, r6, lr}
   d5946:	4b08      	ldr	r3, [pc, #32]	; (d5968 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5948:	6003      	str	r3, [r0, #0]
   d594a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d594c:	2500      	movs	r5, #0
   d594e:	460e      	mov	r6, r1
   d5950:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5954:	f7ff fd70 	bl	d5438 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5958:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d595a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d595c:	f7ff fdac 	bl	d54b8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5960:	60a5      	str	r5, [r4, #8]
}
   d5962:	4620      	mov	r0, r4
   d5964:	bd70      	pop	{r4, r5, r6, pc}
   d5966:	bf00      	nop
   d5968:	000d998c 	.word	0x000d998c

000d596c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d596c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5970:	7900      	ldrb	r0, [r0, #4]
   d5972:	f7ff bd79 	b.w	d5468 <HAL_SPI_Begin>

000d5976 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d5976:	7900      	ldrb	r0, [r0, #4]
   d5978:	f7ff bd7e 	b.w	d5478 <HAL_SPI_Set_Bit_Order>

000d597c <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
   d597c:	7900      	ldrb	r0, [r0, #4]
   d597e:	f7ff bd83 	b.w	d5488 <HAL_SPI_Set_Data_Mode>
	...

000d5984 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d5984:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d5986:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d5988:	6018      	str	r0, [r3, #0]
   d598a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d598c:	6818      	ldr	r0, [r3, #0]
   d598e:	4288      	cmp	r0, r1
   d5990:	b2e5      	uxtb	r5, r4
   d5992:	d906      	bls.n	d59a2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5994:	3401      	adds	r4, #1
   d5996:	2c08      	cmp	r4, #8
   d5998:	d002      	beq.n	d59a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d599a:	0840      	lsrs	r0, r0, #1
   d599c:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d599e:	e7f5      	b.n	d598c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d59a0:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d59a2:	4b02      	ldr	r3, [pc, #8]	; (d59ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d59a4:	5d5b      	ldrb	r3, [r3, r5]
   d59a6:	7013      	strb	r3, [r2, #0]
   d59a8:	bd30      	pop	{r4, r5, pc}
   d59aa:	bf00      	nop
   d59ac:	000d9994 	.word	0x000d9994

000d59b0 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d59b0:	b570      	push	{r4, r5, r6, lr}
   d59b2:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
   d59b4:	7906      	ldrb	r6, [r0, #4]
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
   d59b6:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d59ba:	4604      	mov	r4, r0
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d59bc:	2214      	movs	r2, #20
   d59be:	2100      	movs	r1, #0
   d59c0:	a803      	add	r0, sp, #12
   d59c2:	f002 f8b6 	bl	d7b32 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d59c6:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d59c8:	a903      	add	r1, sp, #12
   d59ca:	4630      	mov	r0, r6
   d59cc:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d59ce:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
   d59d2:	f7ff fd81 	bl	d54d8 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
   d59d6:	ab02      	add	r3, sp, #8
   d59d8:	f10d 0207 	add.w	r2, sp, #7
   d59dc:	4629      	mov	r1, r5
   d59de:	9804      	ldr	r0, [sp, #16]
   d59e0:	f7ff ffd0 	bl	d5984 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
   d59e4:	7920      	ldrb	r0, [r4, #4]
   d59e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d59ea:	f7ff fd55 	bl	d5498 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
   d59ee:	9802      	ldr	r0, [sp, #8]
   d59f0:	b008      	add	sp, #32
   d59f2:	bd70      	pop	{r4, r5, r6, pc}

000d59f4 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d59f4:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d59f6:	7900      	ldrb	r0, [r0, #4]
   d59f8:	f7ff fd56 	bl	d54a8 <HAL_SPI_Send_Receive_Data>
}
   d59fc:	b2c0      	uxtb	r0, r0
   d59fe:	bd08      	pop	{r3, pc}

000d5a00 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5a00:	7900      	ldrb	r0, [r0, #4]
   d5a02:	f7ff bd61 	b.w	d54c8 <HAL_SPI_Is_Enabled>

000d5a06 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5a06:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5a08:	6883      	ldr	r3, [r0, #8]
   d5a0a:	4604      	mov	r4, r0
   d5a0c:	b90b      	cbnz	r3, d5a12 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5a0e:	f001 f873 	bl	d6af8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5a12:	68c3      	ldr	r3, [r0, #12]
   d5a14:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5a16:	68a3      	ldr	r3, [r4, #8]
   d5a18:	b11b      	cbz	r3, d5a22 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a1a:	2203      	movs	r2, #3
   d5a1c:	4621      	mov	r1, r4
   d5a1e:	4620      	mov	r0, r4
   d5a20:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5a22:	4620      	mov	r0, r4
}
   d5a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5a28:	f7fe bb37 	b.w	d409a <_ZdlPv>

000d5a2c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5a2c:	4770      	bx	lr

000d5a2e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a30:	4606      	mov	r6, r0
   d5a32:	4615      	mov	r5, r2
   d5a34:	460c      	mov	r4, r1
   d5a36:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5a38:	42bc      	cmp	r4, r7
   d5a3a:	d006      	beq.n	d5a4a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5a3c:	6833      	ldr	r3, [r6, #0]
   d5a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5a42:	689b      	ldr	r3, [r3, #8]
   d5a44:	4630      	mov	r0, r6
   d5a46:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5a48:	e7f6      	b.n	d5a38 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5a4a:	4628      	mov	r0, r5
   d5a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a4e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5a4e:	2200      	movs	r2, #0
   d5a50:	7c00      	ldrb	r0, [r0, #16]
   d5a52:	f7ff bc41 	b.w	d52d8 <HAL_I2C_Write_Data>

000d5a56 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5a56:	2100      	movs	r1, #0
   d5a58:	7c00      	ldrb	r0, [r0, #16]
   d5a5a:	f7ff bc45 	b.w	d52e8 <HAL_I2C_Available_Data>

000d5a5e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5a5e:	2100      	movs	r1, #0
   d5a60:	7c00      	ldrb	r0, [r0, #16]
   d5a62:	f7ff bc49 	b.w	d52f8 <HAL_I2C_Read_Data>

000d5a66 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5a66:	2100      	movs	r1, #0
   d5a68:	7c00      	ldrb	r0, [r0, #16]
   d5a6a:	f7ff bc4d 	b.w	d5308 <HAL_I2C_Peek_Data>

000d5a6e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5a6e:	2100      	movs	r1, #0
   d5a70:	7c00      	ldrb	r0, [r0, #16]
   d5a72:	f7ff bc51 	b.w	d5318 <HAL_I2C_Flush_Data>

000d5a76 <_ZN7TwoWireD0Ev>:
   d5a76:	b510      	push	{r4, lr}
   d5a78:	4604      	mov	r4, r0
   d5a7a:	f7fe fb0e 	bl	d409a <_ZdlPv>
   d5a7e:	4620      	mov	r0, r4
   d5a80:	bd10      	pop	{r4, pc}
	...

000d5a84 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5a84:	b510      	push	{r4, lr}
   d5a86:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5a88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a8c:	4608      	mov	r0, r1
   d5a8e:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5a90:	2100      	movs	r1, #0
   d5a92:	4b04      	ldr	r3, [pc, #16]	; (d5aa4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5a94:	7420      	strb	r0, [r4, #16]
   d5a96:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5a98:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5a9a:	f7ff fc4d 	bl	d5338 <HAL_I2C_Init>

}
   d5a9e:	4620      	mov	r0, r4
   d5aa0:	bd10      	pop	{r4, pc}
   d5aa2:	bf00      	nop
   d5aa4:	000d99a4 	.word	0x000d99a4

000d5aa8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5aa8:	2300      	movs	r3, #0
   d5aaa:	461a      	mov	r2, r3
   d5aac:	4619      	mov	r1, r3
   d5aae:	7c00      	ldrb	r0, [r0, #16]
   d5ab0:	f7ff bbf2 	b.w	d5298 <HAL_I2C_Begin>

000d5ab4 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d5ab4:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d5ab6:	2400      	movs	r4, #0
   d5ab8:	7c00      	ldrb	r0, [r0, #16]
   d5aba:	9400      	str	r4, [sp, #0]
   d5abc:	f7ff fbf4 	bl	d52a8 <HAL_I2C_Request_Data>
  return result;
}
   d5ac0:	b2c0      	uxtb	r0, r0
   d5ac2:	b002      	add	sp, #8
   d5ac4:	bd10      	pop	{r4, pc}

000d5ac6 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d5ac6:	2301      	movs	r3, #1
   d5ac8:	b2d2      	uxtb	r2, r2
   d5aca:	b2c9      	uxtb	r1, r1
   d5acc:	f7ff bff2 	b.w	d5ab4 <_ZN7TwoWire11requestFromEhhh>

000d5ad0 <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   d5ad0:	b2db      	uxtb	r3, r3
   d5ad2:	b2d2      	uxtb	r2, r2
   d5ad4:	b2c9      	uxtb	r1, r1
   d5ad6:	f7ff bfed 	b.w	d5ab4 <_ZN7TwoWire11requestFromEhhh>

000d5ada <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5ada:	2200      	movs	r2, #0
   d5adc:	7c00      	ldrb	r0, [r0, #16]
   d5ade:	f7ff bbeb 	b.w	d52b8 <HAL_I2C_Begin_Transmission>

000d5ae2 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5ae2:	b2c9      	uxtb	r1, r1
   d5ae4:	f7ff bff9 	b.w	d5ada <_ZN7TwoWire17beginTransmissionEh>

000d5ae8 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5ae8:	2200      	movs	r2, #0
   d5aea:	7c00      	ldrb	r0, [r0, #16]
   d5aec:	f7ff bbec 	b.w	d52c8 <HAL_I2C_End_Transmission>

000d5af0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5af0:	2101      	movs	r1, #1
   d5af2:	f7ff bff9 	b.w	d5ae8 <_ZN7TwoWire15endTransmissionEh>

000d5af6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5af6:	2100      	movs	r1, #0
   d5af8:	7c00      	ldrb	r0, [r0, #16]
   d5afa:	f7ff bc15 	b.w	d5328 <HAL_I2C_Is_Enabled>

000d5afe <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d5afe:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d5b00:	2100      	movs	r1, #0
   d5b02:	7c00      	ldrb	r0, [r0, #16]
   d5b04:	f7ff fc20 	bl	d5348 <HAL_I2C_Acquire>
}
   d5b08:	fab0 f080 	clz	r0, r0
   d5b0c:	0940      	lsrs	r0, r0, #5
   d5b0e:	bd08      	pop	{r3, pc}

000d5b10 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d5b10:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d5b12:	2100      	movs	r1, #0
   d5b14:	7c00      	ldrb	r0, [r0, #16]
   d5b16:	f7ff fc1f 	bl	d5358 <HAL_I2C_Release>
}
   d5b1a:	fab0 f080 	clz	r0, r0
   d5b1e:	0940      	lsrs	r0, r0, #5
   d5b20:	bd08      	pop	{r3, pc}

000d5b22 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b22:	7441      	strb	r1, [r0, #17]
   d5b24:	4770      	bx	lr

000d5b26 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5b26:	4770      	bx	lr

000d5b28 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5b28:	2100      	movs	r1, #0
   d5b2a:	7c00      	ldrb	r0, [r0, #16]
   d5b2c:	f7ff bb9c 	b.w	d5268 <HAL_USB_USART_Receive_Data>

000d5b30 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d5b30:	2101      	movs	r1, #1
   d5b32:	7c00      	ldrb	r0, [r0, #16]
   d5b34:	f7ff bb98 	b.w	d5268 <HAL_USB_USART_Receive_Data>

000d5b38 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5b38:	7c00      	ldrb	r0, [r0, #16]
   d5b3a:	f7ff bb8d 	b.w	d5258 <HAL_USB_USART_Available_Data_For_Write>

000d5b3e <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5b3e:	7c00      	ldrb	r0, [r0, #16]
   d5b40:	f7ff bb82 	b.w	d5248 <HAL_USB_USART_Available_Data>

000d5b44 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5b44:	b538      	push	{r3, r4, r5, lr}
   d5b46:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5b48:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5b4a:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5b4c:	f7ff fb84 	bl	d5258 <HAL_USB_USART_Available_Data_For_Write>
   d5b50:	2800      	cmp	r0, #0
   d5b52:	dc01      	bgt.n	d5b58 <_ZN9USBSerial5writeEh+0x14>
   d5b54:	7c60      	ldrb	r0, [r4, #17]
   d5b56:	b120      	cbz	r0, d5b62 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5b58:	4629      	mov	r1, r5
   d5b5a:	7c20      	ldrb	r0, [r4, #16]
   d5b5c:	f7ff fb8c 	bl	d5278 <HAL_USB_USART_Send_Data>
    return 1;
   d5b60:	2001      	movs	r0, #1
  }
  return 0;
}
   d5b62:	bd38      	pop	{r3, r4, r5, pc}

000d5b64 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5b64:	7c00      	ldrb	r0, [r0, #16]
   d5b66:	f7ff bb8f 	b.w	d5288 <HAL_USB_USART_Flush_Data>

000d5b6a <_ZN9USBSerialD0Ev>:
   d5b6a:	b510      	push	{r4, lr}
   d5b6c:	4604      	mov	r4, r0
   d5b6e:	f7fe fa94 	bl	d409a <_ZdlPv>
   d5b72:	4620      	mov	r0, r4
   d5b74:	bd10      	pop	{r4, pc}
	...

000d5b78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5b78:	b510      	push	{r4, lr}
   d5b7a:	4604      	mov	r4, r0
   d5b7c:	2300      	movs	r3, #0
   d5b7e:	6063      	str	r3, [r4, #4]
   d5b80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5b84:	60a3      	str	r3, [r4, #8]
   d5b86:	4b05      	ldr	r3, [pc, #20]	; (d5b9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5b88:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5b8a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5b8c:	4608      	mov	r0, r1
{
  _serial = serial;
   d5b8e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5b90:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5b92:	4611      	mov	r1, r2
   d5b94:	f7ff fb48 	bl	d5228 <HAL_USB_USART_Init>
}
   d5b98:	4620      	mov	r0, r4
   d5b9a:	bd10      	pop	{r4, pc}
   d5b9c:	000d99cc 	.word	0x000d99cc

000d5ba0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5ba0:	2200      	movs	r2, #0
   d5ba2:	7c00      	ldrb	r0, [r0, #16]
   d5ba4:	f7ff bb48 	b.w	d5238 <HAL_USB_USART_Begin>

000d5ba8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5ba8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5baa:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5bac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5bae:	2100      	movs	r1, #0
   d5bb0:	f001 ffbf 	bl	d7b32 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5bb4:	4620      	mov	r0, r4
   d5bb6:	bd10      	pop	{r4, pc}

000d5bb8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5bb8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5bba:	4d0e      	ldr	r5, [pc, #56]	; (d5bf4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5bbc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5bbe:	a801      	add	r0, sp, #4
   d5bc0:	f7ff fff2 	bl	d5ba8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5bc4:	6829      	ldr	r1, [r5, #0]
   d5bc6:	f011 0401 	ands.w	r4, r1, #1
   d5bca:	d110      	bne.n	d5bee <_Z16_fetch_usbserialv+0x36>
   d5bcc:	4628      	mov	r0, r5
   d5bce:	f7fe fa68 	bl	d40a2 <__cxa_guard_acquire>
   d5bd2:	b160      	cbz	r0, d5bee <_Z16_fetch_usbserialv+0x36>
   d5bd4:	aa01      	add	r2, sp, #4
   d5bd6:	4621      	mov	r1, r4
   d5bd8:	4807      	ldr	r0, [pc, #28]	; (d5bf8 <_Z16_fetch_usbserialv+0x40>)
   d5bda:	f7ff ffcd 	bl	d5b78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5bde:	4628      	mov	r0, r5
   d5be0:	f7fe fa64 	bl	d40ac <__cxa_guard_release>
   d5be4:	4a05      	ldr	r2, [pc, #20]	; (d5bfc <_Z16_fetch_usbserialv+0x44>)
   d5be6:	4906      	ldr	r1, [pc, #24]	; (d5c00 <_Z16_fetch_usbserialv+0x48>)
   d5be8:	4803      	ldr	r0, [pc, #12]	; (d5bf8 <_Z16_fetch_usbserialv+0x40>)
   d5bea:	f000 ff80 	bl	d6aee <__aeabi_atexit>
	return _usbserial;
}
   d5bee:	4802      	ldr	r0, [pc, #8]	; (d5bf8 <_Z16_fetch_usbserialv+0x40>)
   d5bf0:	b007      	add	sp, #28
   d5bf2:	bd30      	pop	{r4, r5, pc}
   d5bf4:	2003e540 	.word	0x2003e540
   d5bf8:	2003e544 	.word	0x2003e544
   d5bfc:	2003d694 	.word	0x2003d694
   d5c00:	000d5b27 	.word	0x000d5b27

000d5c04 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5c04:	4770      	bx	lr

000d5c06 <_ZN9IPAddressD0Ev>:
   d5c06:	b510      	push	{r4, lr}
   d5c08:	4604      	mov	r4, r0
   d5c0a:	f7fe fa46 	bl	d409a <_ZdlPv>
   d5c0e:	4620      	mov	r0, r4
   d5c10:	bd10      	pop	{r4, pc}

000d5c12 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5c12:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d5c14:	7d03      	ldrb	r3, [r0, #20]
   d5c16:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5c18:	b08d      	sub	sp, #52	; 0x34
   d5c1a:	460e      	mov	r6, r1
   d5c1c:	f100 0704 	add.w	r7, r0, #4
   d5c20:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d5c24:	d002      	beq.n	d5c2c <_ZNK9IPAddress7printToER5Print+0x1a>
   d5c26:	f100 0508 	add.w	r5, r0, #8
   d5c2a:	e018      	b.n	d5c5e <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5c2c:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5c2e:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5c30:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5c34:	232f      	movs	r3, #47	; 0x2f
   d5c36:	462a      	mov	r2, r5
   d5c38:	200a      	movs	r0, #10
   d5c3a:	f7ff fbdd 	bl	d53f8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c3e:	4628      	mov	r0, r5
   d5c40:	f001 ffb1 	bl	d7ba6 <strlen>
   d5c44:	6833      	ldr	r3, [r6, #0]
   d5c46:	4602      	mov	r2, r0
   d5c48:	68db      	ldr	r3, [r3, #12]
   d5c4a:	4629      	mov	r1, r5
   d5c4c:	4630      	mov	r0, r6
   d5c4e:	4798      	blx	r3
   d5c50:	e00f      	b.n	d5c72 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5c52:	b124      	cbz	r4, d5c5e <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5c54:	212e      	movs	r1, #46	; 0x2e
   d5c56:	4630      	mov	r0, r6
   d5c58:	f000 fcb0 	bl	d65bc <_ZN5Print5printEc>
   d5c5c:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5c5e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5c62:	220a      	movs	r2, #10
   d5c64:	4630      	mov	r0, r6
   d5c66:	f000 fcef 	bl	d6648 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c6a:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c6c:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c6e:	d1f0      	bne.n	d5c52 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c70:	4620      	mov	r0, r4
    }
    return n;
}
   d5c72:	b00d      	add	sp, #52	; 0x34
   d5c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5c78 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d5c78:	b510      	push	{r4, lr}
   d5c7a:	4b05      	ldr	r3, [pc, #20]	; (d5c90 <_ZN9IPAddressC1Ev+0x18>)
   d5c7c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5c7e:	2211      	movs	r2, #17
   d5c80:	f840 3b04 	str.w	r3, [r0], #4
   d5c84:	2100      	movs	r1, #0
   d5c86:	f001 ff54 	bl	d7b32 <memset>
{
    clear();
}
   d5c8a:	4620      	mov	r0, r4
   d5c8c:	bd10      	pop	{r4, pc}
   d5c8e:	bf00      	nop
   d5c90:	000d99fc 	.word	0x000d99fc

000d5c94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5c94:	4603      	mov	r3, r0
   d5c96:	4a07      	ldr	r2, [pc, #28]	; (d5cb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5c98:	b510      	push	{r4, lr}
   d5c9a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5c9e:	f101 0210 	add.w	r2, r1, #16
   d5ca2:	f851 4b04 	ldr.w	r4, [r1], #4
   d5ca6:	f843 4b04 	str.w	r4, [r3], #4
   d5caa:	4291      	cmp	r1, r2
   d5cac:	d1f9      	bne.n	d5ca2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5cae:	780a      	ldrb	r2, [r1, #0]
   d5cb0:	701a      	strb	r2, [r3, #0]
}
   d5cb2:	bd10      	pop	{r4, pc}
   d5cb4:	000d99fc 	.word	0x000d99fc

000d5cb8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5cb8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5cba:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5cbe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5cc2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5cc6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5cca:	2304      	movs	r3, #4
   d5ccc:	6041      	str	r1, [r0, #4]
   d5cce:	7503      	strb	r3, [r0, #20]
   d5cd0:	bd10      	pop	{r4, pc}

000d5cd2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5cd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5cd4:	780d      	ldrb	r5, [r1, #0]
   d5cd6:	788b      	ldrb	r3, [r1, #2]
   d5cd8:	784a      	ldrb	r2, [r1, #1]
   d5cda:	78c9      	ldrb	r1, [r1, #3]
   d5cdc:	9100      	str	r1, [sp, #0]
   d5cde:	4629      	mov	r1, r5
   d5ce0:	f7ff ffea 	bl	d5cb8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5ce4:	b003      	add	sp, #12
   d5ce6:	bd30      	pop	{r4, r5, pc}

000d5ce8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5ce8:	4770      	bx	lr

000d5cea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5cea:	2000      	movs	r0, #0
   d5cec:	4770      	bx	lr

000d5cee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5cee:	b510      	push	{r4, lr}
   d5cf0:	4604      	mov	r4, r0
   d5cf2:	f7fe f9d2 	bl	d409a <_ZdlPv>
   d5cf6:	4620      	mov	r0, r4
   d5cf8:	bd10      	pop	{r4, pc}

000d5cfa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5cfa:	b508      	push	{r3, lr}
      { delete this; }
   d5cfc:	b108      	cbz	r0, d5d02 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5cfe:	f7ff fff6 	bl	d5cee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5d02:	bd08      	pop	{r3, pc}

000d5d04 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5d04:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5d06:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5d08:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5d0a:	b113      	cbz	r3, d5d12 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5d0c:	2203      	movs	r2, #3
   d5d0e:	4601      	mov	r1, r0
   d5d10:	4798      	blx	r3
    }
   d5d12:	4620      	mov	r0, r4
   d5d14:	bd10      	pop	{r4, pc}

000d5d16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5d16:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5d18:	68c4      	ldr	r4, [r0, #12]
   d5d1a:	b1d4      	cbz	r4, d5d52 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5d1c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5d1e:	2b02      	cmp	r3, #2
   d5d20:	d102      	bne.n	d5d28 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5d22:	68e0      	ldr	r0, [r4, #12]
   d5d24:	f7ff fcbc 	bl	d56a0 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5d28:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5d2a:	b12d      	cbz	r5, d5d38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d2c:	4628      	mov	r0, r5
   d5d2e:	f7ff ffe9 	bl	d5d04 <_ZNSt14_Function_baseD1Ev>
   d5d32:	4628      	mov	r0, r5
   d5d34:	f7fe f9b1 	bl	d409a <_ZdlPv>
   d5d38:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5d3a:	b12d      	cbz	r5, d5d48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d5d3c:	4628      	mov	r0, r5
   d5d3e:	f7ff ffe1 	bl	d5d04 <_ZNSt14_Function_baseD1Ev>
   d5d42:	4628      	mov	r0, r5
   d5d44:	f7fe f9a9 	bl	d409a <_ZdlPv>
   d5d48:	4620      	mov	r0, r4
   d5d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5d4e:	f7fe b9a4 	b.w	d409a <_ZdlPv>
   d5d52:	bd38      	pop	{r3, r4, r5, pc}

000d5d54 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5d54:	b510      	push	{r4, lr}
   d5d56:	b088      	sub	sp, #32
   d5d58:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5d5a:	4668      	mov	r0, sp
   d5d5c:	f000 fd79 	bl	d6852 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d5d60:	4669      	mov	r1, sp
   d5d62:	a804      	add	r0, sp, #16
   d5d64:	f000 fd97 	bl	d6896 <_ZN6StringC1ERKS_>
   d5d68:	a804      	add	r0, sp, #16
   d5d6a:	47a0      	blx	r4
   d5d6c:	4604      	mov	r4, r0
   d5d6e:	a804      	add	r0, sp, #16
   d5d70:	f000 fd28 	bl	d67c4 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5d74:	4668      	mov	r0, sp
   d5d76:	f000 fd25 	bl	d67c4 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d5d7a:	4620      	mov	r0, r4
   d5d7c:	b008      	add	sp, #32
   d5d7e:	bd10      	pop	{r4, pc}

000d5d80 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d5d82:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5d84:	b085      	sub	sp, #20
   d5d86:	4607      	mov	r7, r0
   d5d88:	460e      	mov	r6, r1
   d5d8a:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d5d8c:	2100      	movs	r1, #0
   d5d8e:	4622      	mov	r2, r4
   d5d90:	4668      	mov	r0, sp
   d5d92:	f001 fece 	bl	d7b32 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5d96:	2200      	movs	r2, #0
   d5d98:	4669      	mov	r1, sp
   d5d9a:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d5d9c:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d5da0:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d5da2:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d5da4:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5da6:	f7ff fbd7 	bl	d5558 <spark_function>
}
   d5daa:	b005      	add	sp, #20
   d5dac:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5dae <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5dae:	b513      	push	{r0, r1, r4, lr}
   d5db0:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5db2:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5db6:	2300      	movs	r3, #0
   d5db8:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5dba:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5dbc:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5dbe:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5dc0:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5dc2:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5dc4:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5dc6:	f7ff f8bf 	bl	d4f48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5dca:	4620      	mov	r0, r4
   d5dcc:	b002      	add	sp, #8
   d5dce:	bd10      	pop	{r4, pc}

000d5dd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5dd0:	680b      	ldr	r3, [r1, #0]
   d5dd2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5dd4:	b113      	cbz	r3, d5ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5dd6:	685a      	ldr	r2, [r3, #4]
   d5dd8:	3201      	adds	r2, #1
   d5dda:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5ddc:	4770      	bx	lr

000d5dde <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5dde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5de0:	460c      	mov	r4, r1
   d5de2:	ad02      	add	r5, sp, #8
   d5de4:	f854 3b04 	ldr.w	r3, [r4], #4
   d5de8:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5dec:	4606      	mov	r6, r0
   d5dee:	460f      	mov	r7, r1
   d5df0:	a801      	add	r0, sp, #4
   d5df2:	4621      	mov	r1, r4
   d5df4:	f7ff ffec 	bl	d5dd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5df8:	4629      	mov	r1, r5
   d5dfa:	4630      	mov	r0, r6
   d5dfc:	f7ff ffd7 	bl	d5dae <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e00:	a801      	add	r0, sp, #4
   d5e02:	f7ff f8a1 	bl	d4f48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e06:	4620      	mov	r0, r4
   d5e08:	f7ff f89e 	bl	d4f48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5e0c:	4638      	mov	r0, r7
   d5e0e:	f7fe f944 	bl	d409a <_ZdlPv>
        return p;
    }
   d5e12:	4630      	mov	r0, r6
   d5e14:	b003      	add	sp, #12
   d5e16:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e18 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5e18:	b513      	push	{r0, r1, r4, lr}
   d5e1a:	460b      	mov	r3, r1
   d5e1c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e1e:	c803      	ldmia	r0, {r0, r1}
   d5e20:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5e24:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5e28:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5e2c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5e30:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5e34:	b002      	add	sp, #8
   d5e36:	bd10      	pop	{r4, pc}

000d5e38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e38:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5e3a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e3c:	b90a      	cbnz	r2, d5e42 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5e3e:	f000 fe5b 	bl	d6af8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e42:	68c3      	ldr	r3, [r0, #12]
    }
   d5e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e48:	4718      	bx	r3

000d5e4a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5e4a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5e4c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5e4e:	f100 0110 	add.w	r1, r0, #16
   d5e52:	f7ff fff1 	bl	d5e38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5e56:	bd08      	pop	{r3, pc}

000d5e58 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e58:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5e5a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e5c:	b90a      	cbnz	r2, d5e62 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5e5e:	f000 fe4b 	bl	d6af8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e62:	68c3      	ldr	r3, [r0, #12]
    }
   d5e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e68:	4718      	bx	r3

000d5e6a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5e6a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5e6c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5e6e:	f100 0110 	add.w	r1, r0, #16
   d5e72:	f7ff fff1 	bl	d5e58 <_ZNKSt8functionIFvRKbEEclES1_>
   d5e76:	bd08      	pop	{r3, pc}

000d5e78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5e78:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e7a:	2300      	movs	r3, #0
   d5e7c:	6083      	str	r3, [r0, #8]
   d5e7e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5e80:	4604      	mov	r4, r0
   d5e82:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5e84:	b12b      	cbz	r3, d5e92 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5e86:	2202      	movs	r2, #2
   d5e88:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5e8a:	68eb      	ldr	r3, [r5, #12]
   d5e8c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5e8e:	68ab      	ldr	r3, [r5, #8]
   d5e90:	60a3      	str	r3, [r4, #8]
	}
    }
   d5e92:	4620      	mov	r0, r4
   d5e94:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d5e9c:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5ea0:	b086      	sub	sp, #24
   d5ea2:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5ea4:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ea8:	808b      	strh	r3, [r1, #4]
   d5eaa:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5eac:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5eae:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d5eb2:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5eb4:	f04f 0002 	mov.w	r0, #2
   d5eb8:	e8d4 1f4f 	ldrexb	r1, [r4]
   d5ebc:	4299      	cmp	r1, r3
   d5ebe:	d103      	bne.n	d5ec8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d5ec0:	e8c4 0f45 	strexb	r5, r0, [r4]
   d5ec4:	2d00      	cmp	r5, #0
   d5ec6:	d1f7      	bne.n	d5eb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5ec8:	d002      	beq.n	d5ed0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d5eca:	f88d 1000 	strb.w	r1, [sp]
   d5ece:	e06a      	b.n	d5fa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5ed0:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5ed4:	bf1e      	ittt	ne
   d5ed6:	60e7      	strne	r7, [r4, #12]
   d5ed8:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5eda:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5edc:	2301      	movs	r3, #1
   d5ede:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5ee2:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5ee4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5ee6:	f104 0308 	add.w	r3, r4, #8
   d5eea:	f3bf 8f5f 	dmb	sy
   d5eee:	e853 6f00 	ldrex	r6, [r3]
   d5ef2:	e843 0200 	strex	r2, r0, [r3]
   d5ef6:	2a00      	cmp	r2, #0
   d5ef8:	d1f9      	bne.n	d5eee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d5efa:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5efe:	2e00      	cmp	r6, #0
   d5f00:	d051      	beq.n	d5fa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5f02:	f7ff fba1 	bl	d5648 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5f06:	b120      	cbz	r0, d5f12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5f08:	4629      	mov	r1, r5
   d5f0a:	4630      	mov	r0, r6
   d5f0c:	f7ff ff94 	bl	d5e38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5f10:	e043      	b.n	d5f9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5f12:	4631      	mov	r1, r6
   d5f14:	4668      	mov	r0, sp
   d5f16:	f7ff ffaf 	bl	d5e78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5f1a:	68e0      	ldr	r0, [r4, #12]
   d5f1c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5f20:	b108      	cbz	r0, d5f26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d5f22:	f001 fe25 	bl	d7b70 <strdup>
   d5f26:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5f28:	2010      	movs	r0, #16
   d5f2a:	f8ad 5014 	strh.w	r5, [sp, #20]
   d5f2e:	f7fe f8b2 	bl	d4096 <_Znwj>
   d5f32:	4605      	mov	r5, r0
   d5f34:	b330      	cbz	r0, d5f84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f36:	f04f 0800 	mov.w	r8, #0
   d5f3a:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f3e:	2018      	movs	r0, #24
   d5f40:	f7fe f8a9 	bl	d4096 <_Znwj>
   d5f44:	4604      	mov	r4, r0
   d5f46:	b1c0      	cbz	r0, d5f7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f48:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5f4c:	4601      	mov	r1, r0
   d5f4e:	4668      	mov	r0, sp
   d5f50:	f7ff ff62 	bl	d5e18 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f54:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5f56:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f58:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f5a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5f5c:	9202      	str	r2, [sp, #8]
   d5f5e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f60:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5f62:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d5f66:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f68:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5f6c:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5f70:	9b04      	ldr	r3, [sp, #16]
   d5f72:	9203      	str	r2, [sp, #12]
   d5f74:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f76:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5f7a:	4b0e      	ldr	r3, [pc, #56]	; (d5fb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d5f7c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5f7e:	4b0e      	ldr	r3, [pc, #56]	; (d5fb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f80:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5f82:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5f84:	9804      	ldr	r0, [sp, #16]
   d5f86:	f7ff fb8b 	bl	d56a0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5f8a:	4668      	mov	r0, sp
   d5f8c:	f7ff feba 	bl	d5d04 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5f90:	2200      	movs	r2, #0
   d5f92:	4629      	mov	r1, r5
   d5f94:	4809      	ldr	r0, [pc, #36]	; (d5fbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d5f96:	f7ff fb5f 	bl	d5658 <application_thread_invoke>
   d5f9a:	4630      	mov	r0, r6
   d5f9c:	f7ff feb2 	bl	d5d04 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5fa0:	4630      	mov	r0, r6
   d5fa2:	f7fe f87a 	bl	d409a <_ZdlPv>
   d5fa6:	4638      	mov	r0, r7
   d5fa8:	f7ff fb7a 	bl	d56a0 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d5fac:	b006      	add	sp, #24
   d5fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5fb2:	bf00      	nop
   d5fb4:	000d5e4b 	.word	0x000d5e4b
   d5fb8:	000d60a9 	.word	0x000d60a9
   d5fbc:	000d5a07 	.word	0x000d5a07

000d5fc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5fc4:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5fc6:	ad07      	add	r5, sp, #28
   d5fc8:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5fcc:	4606      	mov	r6, r0
   d5fce:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5fd0:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5fd2:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5fd4:	460f      	mov	r7, r1
   d5fd6:	4690      	mov	r8, r2
   d5fd8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5fdc:	f8c5 b004 	str.w	fp, [r5, #4]
   d5fe0:	f8c5 b008 	str.w	fp, [r5, #8]
   d5fe4:	9307      	str	r3, [sp, #28]
   d5fe6:	f7fe f856 	bl	d4096 <_Znwj>
   d5fea:	4604      	mov	r4, r0
   d5fec:	b138      	cbz	r0, d5ffe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5fee:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5ff2:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5ff6:	f8c0 b004 	str.w	fp, [r0, #4]
   d5ffa:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5ffe:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6000:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6002:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6004:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6006:	f7fe f846 	bl	d4096 <_Znwj>
   d600a:	b128      	cbz	r0, d6018 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d600c:	2301      	movs	r3, #1
   d600e:	6043      	str	r3, [r0, #4]
   d6010:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6012:	4b23      	ldr	r3, [pc, #140]	; (d60a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d6014:	6003      	str	r3, [r0, #0]
   d6016:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6018:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d601a:	4b22      	ldr	r3, [pc, #136]	; (d60a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d601c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d601e:	2008      	movs	r0, #8
   d6020:	f7fe f839 	bl	d4096 <_Znwj>
   d6024:	4604      	mov	r4, r0
   d6026:	b128      	cbz	r0, d6034 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6028:	9b03      	ldr	r3, [sp, #12]
   d602a:	f840 3b04 	str.w	r3, [r0], #4
   d602e:	a904      	add	r1, sp, #16
   d6030:	f7ff fece 	bl	d5dd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6034:	9500      	str	r5, [sp, #0]
   d6036:	fa5f f38a 	uxtb.w	r3, sl
   d603a:	464a      	mov	r2, r9
   d603c:	4641      	mov	r1, r8
   d603e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6040:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6042:	f7ff fa91 	bl	d5568 <spark_send_event>
   d6046:	b9b8      	cbnz	r0, d6078 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6048:	9b03      	ldr	r3, [sp, #12]
   d604a:	785b      	ldrb	r3, [r3, #1]
   d604c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6050:	b993      	cbnz	r3, d6078 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6052:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6056:	a905      	add	r1, sp, #20
   d6058:	a803      	add	r0, sp, #12
   d605a:	9205      	str	r2, [sp, #20]
   d605c:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6060:	f7ff ff1a 	bl	d5e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d6064:	9805      	ldr	r0, [sp, #20]
   d6066:	f7ff fb1b 	bl	d56a0 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d606a:	a805      	add	r0, sp, #20
   d606c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d606e:	f7ff feb6 	bl	d5dde <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6072:	a806      	add	r0, sp, #24
   d6074:	f7fe ff68 	bl	d4f48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6078:	9b03      	ldr	r3, [sp, #12]
   d607a:	9305      	str	r3, [sp, #20]
   d607c:	a904      	add	r1, sp, #16
   d607e:	a806      	add	r0, sp, #24
   d6080:	f7ff fea6 	bl	d5dd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6084:	a905      	add	r1, sp, #20
   d6086:	4630      	mov	r0, r6
   d6088:	f7ff fe91 	bl	d5dae <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d608c:	a806      	add	r0, sp, #24
   d608e:	f7fe ff5b 	bl	d4f48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6092:	a804      	add	r0, sp, #16
   d6094:	f7fe ff58 	bl	d4f48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d6098:	4630      	mov	r0, r6
   d609a:	b00b      	add	sp, #44	; 0x2c
   d609c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d60a0:	000d9a10 	.word	0x000d9a10
   d60a4:	000d6211 	.word	0x000d6211

000d60a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d60a8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d60aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d60ac:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d60ae:	d006      	beq.n	d60be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d60b0:	2a03      	cmp	r2, #3
   d60b2:	d017      	beq.n	d60e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d60b4:	2a01      	cmp	r2, #1
   d60b6:	d120      	bne.n	d60fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d60b8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d60ba:	6003      	str	r3, [r0, #0]
	      break;
   d60bc:	e01d      	b.n	d60fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d60be:	2018      	movs	r0, #24
   d60c0:	680e      	ldr	r6, [r1, #0]
   d60c2:	f7fd ffe8 	bl	d4096 <_Znwj>
   d60c6:	4605      	mov	r5, r0
   d60c8:	b150      	cbz	r0, d60e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d60ca:	4631      	mov	r1, r6
   d60cc:	f7ff fed4 	bl	d5e78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d60d0:	6930      	ldr	r0, [r6, #16]
   d60d2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d60d6:	b108      	cbz	r0, d60dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d60d8:	f001 fd4a 	bl	d7b70 <strdup>
   d60dc:	6128      	str	r0, [r5, #16]
   d60de:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d60e0:	6025      	str	r5, [r4, #0]
   d60e2:	e00a      	b.n	d60fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d60e4:	6804      	ldr	r4, [r0, #0]
   d60e6:	b144      	cbz	r4, d60fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d60e8:	6920      	ldr	r0, [r4, #16]
   d60ea:	f7ff fad9 	bl	d56a0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d60ee:	4620      	mov	r0, r4
   d60f0:	f7ff fe08 	bl	d5d04 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d60f4:	4620      	mov	r0, r4
   d60f6:	f7fd ffd0 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d60fa:	2000      	movs	r0, #0
   d60fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d60fe <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d60fe:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6100:	2300      	movs	r3, #0
   d6102:	6083      	str	r3, [r0, #8]
   d6104:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6106:	4604      	mov	r4, r0
   d6108:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d610a:	b12b      	cbz	r3, d6118 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d610c:	2202      	movs	r2, #2
   d610e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6110:	68eb      	ldr	r3, [r5, #12]
   d6112:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6114:	68ab      	ldr	r3, [r5, #8]
   d6116:	60a3      	str	r3, [r4, #8]
	}
    }
   d6118:	4620      	mov	r0, r4
   d611a:	bd38      	pop	{r3, r4, r5, pc}

000d611c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d611c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d611e:	b570      	push	{r4, r5, r6, lr}
   d6120:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6122:	d006      	beq.n	d6132 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6124:	2a03      	cmp	r2, #3
   d6126:	d011      	beq.n	d614c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6128:	2a01      	cmp	r2, #1
   d612a:	d117      	bne.n	d615c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d612c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d612e:	6003      	str	r3, [r0, #0]
	      break;
   d6130:	e014      	b.n	d615c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6132:	2014      	movs	r0, #20
   d6134:	680e      	ldr	r6, [r1, #0]
   d6136:	f7fd ffae 	bl	d4096 <_Znwj>
   d613a:	4605      	mov	r5, r0
   d613c:	b120      	cbz	r0, d6148 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d613e:	4631      	mov	r1, r6
   d6140:	f7ff ffdd 	bl	d60fe <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6144:	7c33      	ldrb	r3, [r6, #16]
   d6146:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6148:	6025      	str	r5, [r4, #0]
   d614a:	e007      	b.n	d615c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d614c:	6804      	ldr	r4, [r0, #0]
   d614e:	b12c      	cbz	r4, d615c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6150:	4620      	mov	r0, r4
   d6152:	f7ff fdd7 	bl	d5d04 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6156:	4620      	mov	r0, r4
   d6158:	f7fd ff9f 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d615c:	2000      	movs	r0, #0
   d615e:	bd70      	pop	{r4, r5, r6, pc}

000d6160 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6160:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6162:	2300      	movs	r3, #0
   d6164:	b087      	sub	sp, #28
   d6166:	460c      	mov	r4, r1
   d6168:	f3bf 8f5f 	dmb	sy
   d616c:	e850 6f00 	ldrex	r6, [r0]
   d6170:	e840 3200 	strex	r2, r3, [r0]
   d6174:	2a00      	cmp	r2, #0
   d6176:	d1f9      	bne.n	d616c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6178:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d617c:	2e00      	cmp	r6, #0
   d617e:	d03e      	beq.n	d61fe <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6180:	4618      	mov	r0, r3
   d6182:	f7ff fa61 	bl	d5648 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6186:	4607      	mov	r7, r0
   d6188:	b120      	cbz	r0, d6194 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d618a:	4621      	mov	r1, r4
   d618c:	4630      	mov	r0, r6
   d618e:	f7ff fe63 	bl	d5e58 <_ZNKSt8functionIFvRKbEEclES1_>
   d6192:	e02e      	b.n	d61f2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6194:	4631      	mov	r1, r6
   d6196:	a801      	add	r0, sp, #4
   d6198:	f7ff ffb1 	bl	d60fe <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d619c:	7823      	ldrb	r3, [r4, #0]
   d619e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d61a2:	2010      	movs	r0, #16
   d61a4:	f7fd ff77 	bl	d4096 <_Znwj>
   d61a8:	4605      	mov	r5, r0
   d61aa:	b1d0      	cbz	r0, d61e2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d61ac:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d61ae:	2014      	movs	r0, #20
   d61b0:	f7fd ff71 	bl	d4096 <_Znwj>
   d61b4:	4604      	mov	r4, r0
   d61b6:	b178      	cbz	r0, d61d8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d61b8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d61ba:	4601      	mov	r1, r0
   d61bc:	a801      	add	r0, sp, #4
   d61be:	f7ff fe2b 	bl	d5e18 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61c2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d61c4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d61c6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61c8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d61ca:	9203      	str	r2, [sp, #12]
   d61cc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d61ce:	60e3      	str	r3, [r4, #12]
   d61d0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d61d4:	9204      	str	r2, [sp, #16]
   d61d6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d61d8:	4b0a      	ldr	r3, [pc, #40]	; (d6204 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d61da:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d61dc:	4b0a      	ldr	r3, [pc, #40]	; (d6208 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d61de:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d61e0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d61e2:	a801      	add	r0, sp, #4
   d61e4:	f7ff fd8e 	bl	d5d04 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d61e8:	2200      	movs	r2, #0
   d61ea:	4629      	mov	r1, r5
   d61ec:	4807      	ldr	r0, [pc, #28]	; (d620c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d61ee:	f7ff fa33 	bl	d5658 <application_thread_invoke>
   d61f2:	4630      	mov	r0, r6
   d61f4:	f7ff fd86 	bl	d5d04 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d61f8:	4630      	mov	r0, r6
   d61fa:	f7fd ff4e 	bl	d409a <_ZdlPv>
        }
    }
   d61fe:	b007      	add	sp, #28
   d6200:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6202:	bf00      	nop
   d6204:	000d5e6b 	.word	0x000d5e6b
   d6208:	000d611d 	.word	0x000d611d
   d620c:	000d5a07 	.word	0x000d5a07

000d6210 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6210:	b530      	push	{r4, r5, lr}
   d6212:	b085      	sub	sp, #20
   d6214:	4604      	mov	r4, r0
   d6216:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6218:	4668      	mov	r0, sp
   d621a:	4611      	mov	r1, r2
   d621c:	f7ff fddf 	bl	d5dde <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6220:	b17c      	cbz	r4, d6242 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6222:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6224:	4628      	mov	r0, r5
   d6226:	b10d      	cbz	r5, d622c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6228:	f001 fca2 	bl	d7b70 <strdup>
   d622c:	9002      	str	r0, [sp, #8]
   d622e:	a902      	add	r1, sp, #8
   d6230:	4668      	mov	r0, sp
   d6232:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6236:	f7ff fe2f 	bl	d5e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d623a:	9802      	ldr	r0, [sp, #8]
   d623c:	f7ff fa30 	bl	d56a0 <free>
   d6240:	e01d      	b.n	d627e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6242:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6244:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6248:	f04f 0201 	mov.w	r2, #1
   d624c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6250:	42a3      	cmp	r3, r4
   d6252:	d103      	bne.n	d625c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6254:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6258:	2900      	cmp	r1, #0
   d625a:	d1f7      	bne.n	d624c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d625c:	d002      	beq.n	d6264 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d625e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6262:	e00c      	b.n	d627e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6264:	f110 010c 	adds.w	r1, r0, #12
   d6268:	f04f 0301 	mov.w	r3, #1
   d626c:	bf18      	it	ne
   d626e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6270:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6274:	3004      	adds	r0, #4
   d6276:	f800 3c03 	strb.w	r3, [r0, #-3]
   d627a:	f7ff ff71 	bl	d6160 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d627e:	a801      	add	r0, sp, #4
   d6280:	f7fe fe62 	bl	d4f48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6284:	b005      	add	sp, #20
   d6286:	bd30      	pop	{r4, r5, pc}

000d6288 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6288:	2100      	movs	r1, #0
   d628a:	f7ff b9d5 	b.w	d5638 <system_delay_ms>
	...

000d6290 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6290:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6292:	4b0c      	ldr	r3, [pc, #48]	; (d62c4 <serialEventRun+0x34>)
   d6294:	b133      	cbz	r3, d62a4 <serialEventRun+0x14>
   d6296:	f7ff fc8f 	bl	d5bb8 <_Z16_fetch_usbserialv>
   d629a:	6803      	ldr	r3, [r0, #0]
   d629c:	691b      	ldr	r3, [r3, #16]
   d629e:	4798      	blx	r3
   d62a0:	2800      	cmp	r0, #0
   d62a2:	dc09      	bgt.n	d62b8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d62a4:	4b08      	ldr	r3, [pc, #32]	; (d62c8 <serialEventRun+0x38>)
   d62a6:	b163      	cbz	r3, d62c2 <serialEventRun+0x32>
   d62a8:	f000 fa1a 	bl	d66e0 <_Z22__fetch_global_Serial1v>
   d62ac:	6803      	ldr	r3, [r0, #0]
   d62ae:	691b      	ldr	r3, [r3, #16]
   d62b0:	4798      	blx	r3
   d62b2:	2800      	cmp	r0, #0
   d62b4:	dc03      	bgt.n	d62be <serialEventRun+0x2e>
   d62b6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d62b8:	f3af 8000 	nop.w
   d62bc:	e7f2      	b.n	d62a4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d62be:	f3af 8000 	nop.w
   d62c2:	bd08      	pop	{r3, pc}
	...

000d62cc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d62cc:	b508      	push	{r3, lr}
	serialEventRun();
   d62ce:	f7ff ffdf 	bl	d6290 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d62d2:	f7ff f8c1 	bl	d5458 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d62d6:	4b01      	ldr	r3, [pc, #4]	; (d62dc <_post_loop+0x10>)
   d62d8:	6018      	str	r0, [r3, #0]
   d62da:	bd08      	pop	{r3, pc}
   d62dc:	2003e72c 	.word	0x2003e72c

000d62e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d62e0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d62e2:	2300      	movs	r3, #0
   d62e4:	9300      	str	r3, [sp, #0]
   d62e6:	461a      	mov	r2, r3
   d62e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d62ec:	f7ff f9c6 	bl	d567c <system_ctrl_set_result>
}
   d62f0:	b003      	add	sp, #12
   d62f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d62f8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d62f8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d62fa:	8843      	ldrh	r3, [r0, #2]
   d62fc:	2b0a      	cmp	r3, #10
   d62fe:	d008      	beq.n	d6312 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6300:	2b50      	cmp	r3, #80	; 0x50
   d6302:	d109      	bne.n	d6318 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6304:	4b09      	ldr	r3, [pc, #36]	; (d632c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6306:	681b      	ldr	r3, [r3, #0]
   d6308:	b13b      	cbz	r3, d631a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d630a:	b003      	add	sp, #12
   d630c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6310:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6312:	f7ff ffe5 	bl	d62e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6316:	e006      	b.n	d6326 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6318:	2300      	movs	r3, #0
   d631a:	9300      	str	r3, [sp, #0]
   d631c:	461a      	mov	r2, r3
   d631e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6322:	f7ff f9ab 	bl	d567c <system_ctrl_set_result>
        break;
    }
}
   d6326:	b003      	add	sp, #12
   d6328:	f85d fb04 	ldr.w	pc, [sp], #4
   d632c:	2003e558 	.word	0x2003e558

000d6330 <module_user_init_hook>:

void module_user_init_hook()
{
   d6330:	b508      	push	{r3, lr}
        uint32_t seed = HAL_RNG_GetRandomNumber();
        random_seed_from_cloud(seed);
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6332:	2100      	movs	r1, #0
   d6334:	4804      	ldr	r0, [pc, #16]	; (d6348 <module_user_init_hook+0x18>)
   d6336:	f7ff f91f 	bl	d5578 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d633a:	2100      	movs	r1, #0
   d633c:	4803      	ldr	r0, [pc, #12]	; (d634c <module_user_init_hook+0x1c>)
}
   d633e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6342:	f7ff b991 	b.w	d5668 <system_ctrl_set_app_request_handler>
   d6346:	bf00      	nop
   d6348:	00000000 	.word	0x00000000
   d634c:	000d62f9 	.word	0x000d62f9

000d6350 <_ZN6detail9_getVCellEhh>:
namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
   d6350:	0909      	lsrs	r1, r1, #4
   d6352:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
   d6356:	ee07 0a90 	vmov	s15, r0
   d635a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	}
   d635e:	eddf 7a02 	vldr	s15, [pc, #8]	; d6368 <_ZN6detail9_getVCellEhh+0x18>
   d6362:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d6366:	4770      	bx	lr
   d6368:	44480000 	.word	0x44480000

000d636c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d636c:	6800      	ldr	r0, [r0, #0]
   d636e:	f7ff bbc6 	b.w	d5afe <_ZN7TwoWire4lockEv>

000d6372 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d6372:	b510      	push	{r4, lr}
   d6374:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d6376:	6001      	str	r1, [r0, #0]
   d6378:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d637a:	b10a      	cbz	r2, d6380 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d637c:	f7ff fff6 	bl	d636c <_ZN9FuelGauge4lockEv>
    }
}
   d6380:	4620      	mov	r0, r4
   d6382:	bd10      	pop	{r4, pc}

000d6384 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d6384:	b538      	push	{r3, r4, r5, lr}
   d6386:	4604      	mov	r4, r0
   d6388:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d638a:	f000 fb0d 	bl	d69a8 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d638e:	462a      	mov	r2, r5
   d6390:	4601      	mov	r1, r0
   d6392:	4620      	mov	r0, r4
   d6394:	f7ff ffed 	bl	d6372 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d6398:	4620      	mov	r0, r4
   d639a:	bd38      	pop	{r3, r4, r5, pc}

000d639c <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d639c:	6800      	ldr	r0, [r0, #0]
   d639e:	f7ff bbb7 	b.w	d5b10 <_ZN7TwoWire6unlockEv>

000d63a2 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d63a2:	b510      	push	{r4, lr}
{
    if (lock_) {
   d63a4:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d63a6:	4604      	mov	r4, r0
{
    if (lock_) {
   d63a8:	b10b      	cbz	r3, d63ae <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d63aa:	f7ff fff7 	bl	d639c <_ZN9FuelGauge6unlockEv>
    }
}
   d63ae:	4620      	mov	r0, r4
   d63b0:	bd10      	pop	{r4, pc}

000d63b2 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d63b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63b4:	4604      	mov	r4, r0
   d63b6:	4616      	mov	r6, r2
   d63b8:	461d      	mov	r5, r3
   d63ba:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d63bc:	f7ff ffd6 	bl	d636c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d63c0:	6820      	ldr	r0, [r4, #0]
   d63c2:	2136      	movs	r1, #54	; 0x36
   d63c4:	f7ff fb8d 	bl	d5ae2 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d63c8:	6820      	ldr	r0, [r4, #0]
   d63ca:	6803      	ldr	r3, [r0, #0]
   d63cc:	4639      	mov	r1, r7
   d63ce:	689b      	ldr	r3, [r3, #8]
   d63d0:	4798      	blx	r3
    i2c_.endTransmission(true);
   d63d2:	2101      	movs	r1, #1
   d63d4:	6820      	ldr	r0, [r4, #0]
   d63d6:	f7ff fb87 	bl	d5ae8 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d63da:	2202      	movs	r2, #2
   d63dc:	2136      	movs	r1, #54	; 0x36
   d63de:	2301      	movs	r3, #1
   d63e0:	6820      	ldr	r0, [r4, #0]
   d63e2:	f7ff fb75 	bl	d5ad0 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   d63e6:	6820      	ldr	r0, [r4, #0]
   d63e8:	6803      	ldr	r3, [r0, #0]
   d63ea:	695b      	ldr	r3, [r3, #20]
   d63ec:	4798      	blx	r3
   d63ee:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d63f0:	6820      	ldr	r0, [r4, #0]
   d63f2:	6803      	ldr	r3, [r0, #0]
   d63f4:	695b      	ldr	r3, [r3, #20]
   d63f6:	4798      	blx	r3
   d63f8:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d63fa:	4620      	mov	r0, r4
}
   d63fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d6400:	f7ff bfcc 	b.w	d639c <_ZN9FuelGauge6unlockEv>

000d6404 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
   d6404:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d6406:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
   d6408:	2200      	movs	r2, #0
   d640a:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
   d640e:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
   d6412:	2102      	movs	r1, #2
   d6414:	f10d 0206 	add.w	r2, sp, #6
   d6418:	f7ff ffcb 	bl	d63b2 <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
   d641c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6420:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d6424:	b003      	add	sp, #12
   d6426:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
   d642a:	f7ff bf91 	b.w	d6350 <_ZN6detail9_getVCellEhh>
	...

000d6430 <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d6430:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d6432:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d6434:	2200      	movs	r2, #0
	byte LSB = 0;
   d6436:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d643a:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d643e:	2104      	movs	r1, #4
   d6440:	f10d 0206 	add.w	r2, sp, #6
   d6444:	f7ff ffb5 	bl	d63b2 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d6448:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d644c:	f000 ff9a 	bl	d7384 <__aeabi_i2d>
   d6450:	2200      	movs	r2, #0
   d6452:	4b09      	ldr	r3, [pc, #36]	; (d6478 <_ZN9FuelGauge6getSoCEv+0x48>)
   d6454:	f000 fffc 	bl	d7450 <__aeabi_dmul>
   d6458:	f001 faf2 	bl	d7a40 <__aeabi_d2f>
   d645c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d6460:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d6464:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d6468:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d646c:	ee37 0a80 	vadd.f32	s0, s15, s0
   d6470:	b003      	add	sp, #12
   d6472:	f85d fb04 	ldr.w	pc, [sp], #4
   d6476:	bf00      	nop
   d6478:	3f700000 	.word	0x3f700000

000d647c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d647c:	2200      	movs	r2, #0
   d647e:	4611      	mov	r1, r2
   d6480:	6840      	ldr	r0, [r0, #4]
   d6482:	f7ff b899 	b.w	d55b8 <network_ready>

000d6486 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6486:	2200      	movs	r2, #0
   d6488:	4611      	mov	r1, r2
   d648a:	6840      	ldr	r0, [r0, #4]
   d648c:	f7ff b8b4 	b.w	d55f8 <network_listening>

000d6490 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6490:	2200      	movs	r2, #0
   d6492:	4611      	mov	r1, r2
   d6494:	6840      	ldr	r0, [r0, #4]
   d6496:	f7ff b8bf 	b.w	d5618 <network_get_listen_timeout>

000d649a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d649a:	2200      	movs	r2, #0
   d649c:	6840      	ldr	r0, [r0, #4]
   d649e:	f7ff b8b3 	b.w	d5608 <network_set_listen_timeout>

000d64a2 <_ZN5spark13CellularClass6listenEb>:
    void clearCredentials() {
        cellular_credentials_clear(nullptr);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d64a2:	2200      	movs	r2, #0
   d64a4:	f081 0101 	eor.w	r1, r1, #1
   d64a8:	6840      	ldr	r0, [r0, #4]
   d64aa:	f7ff b89d 	b.w	d55e8 <network_listen>

000d64ae <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d64ae:	2300      	movs	r3, #0
   d64b0:	461a      	mov	r2, r3
   d64b2:	4619      	mov	r1, r3
   d64b4:	6840      	ldr	r0, [r0, #4]
   d64b6:	f7ff b88f 	b.w	d55d8 <network_off>

000d64ba <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d64ba:	2300      	movs	r3, #0
   d64bc:	461a      	mov	r2, r3
   d64be:	4619      	mov	r1, r3
   d64c0:	6840      	ldr	r0, [r0, #4]
   d64c2:	f7ff b881 	b.w	d55c8 <network_on>

000d64c6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d64c6:	2200      	movs	r2, #0
   d64c8:	4611      	mov	r1, r2
   d64ca:	6840      	ldr	r0, [r0, #4]
   d64cc:	f7ff b864 	b.w	d5598 <network_connecting>

000d64d0 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d64d0:	2200      	movs	r2, #0
   d64d2:	2102      	movs	r1, #2
   d64d4:	6840      	ldr	r0, [r0, #4]
   d64d6:	f7ff b867 	b.w	d55a8 <network_disconnect>

000d64da <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d64da:	2300      	movs	r3, #0
   d64dc:	461a      	mov	r2, r3
   d64de:	6840      	ldr	r0, [r0, #4]
   d64e0:	f7ff b852 	b.w	d5588 <network_connect>

000d64e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d64e4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d64e6:	4d0c      	ldr	r5, [pc, #48]	; (d6518 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d64e8:	2428      	movs	r4, #40	; 0x28
   d64ea:	4622      	mov	r2, r4
   d64ec:	2100      	movs	r1, #0
   d64ee:	4628      	mov	r0, r5
   d64f0:	f001 fb1f 	bl	d7b32 <memset>
        cid = -1;
   d64f4:	f04f 33ff 	mov.w	r3, #4294967295
   d64f8:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
   d64fa:	802c      	strh	r4, [r5, #0]
   d64fc:	4d07      	ldr	r5, [pc, #28]	; (d651c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d64fe:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6500:	4628      	mov	r0, r5
   d6502:	606b      	str	r3, [r5, #4]
   d6504:	4b06      	ldr	r3, [pc, #24]	; (d6520 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d6506:	f840 3b08 	str.w	r3, [r0], #8
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d650a:	4622      	mov	r2, r4
   d650c:	2100      	movs	r1, #0
   d650e:	f001 fb10 	bl	d7b32 <memset>
        size = sizeof(*this);
   d6512:	812c      	strh	r4, [r5, #8]
   d6514:	bd38      	pop	{r3, r4, r5, pc}
   d6516:	bf00      	nop
   d6518:	2003e58c 	.word	0x2003e58c
   d651c:	2003e55c 	.word	0x2003e55c
   d6520:	000d9a2c 	.word	0x000d9a2c

000d6524 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6524:	b510      	push	{r4, lr}
   d6526:	4604      	mov	r4, r0
   d6528:	f7ff fbec 	bl	d5d04 <_ZNSt14_Function_baseD1Ev>
   d652c:	4620      	mov	r0, r4
   d652e:	bd10      	pop	{r4, pc}

000d6530 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6530:	4803      	ldr	r0, [pc, #12]	; (d6540 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6532:	4a04      	ldr	r2, [pc, #16]	; (d6544 <_GLOBAL__sub_I_RGB+0x14>)
   d6534:	4904      	ldr	r1, [pc, #16]	; (d6548 <_GLOBAL__sub_I_RGB+0x18>)
   d6536:	2300      	movs	r3, #0
   d6538:	6083      	str	r3, [r0, #8]
   d653a:	f000 bad8 	b.w	d6aee <__aeabi_atexit>
   d653e:	bf00      	nop
   d6540:	2003e5b4 	.word	0x2003e5b4
   d6544:	2003d694 	.word	0x2003d694
   d6548:	000d6525 	.word	0x000d6525

000d654c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d654c:	4b02      	ldr	r3, [pc, #8]	; (d6558 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d654e:	681a      	ldr	r2, [r3, #0]
   d6550:	4b02      	ldr	r3, [pc, #8]	; (d655c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6552:	601a      	str	r2, [r3, #0]
   d6554:	4770      	bx	lr
   d6556:	bf00      	nop
   d6558:	2003d5ec 	.word	0x2003d5ec
   d655c:	2003e5c4 	.word	0x2003e5c4

000d6560 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6560:	4b01      	ldr	r3, [pc, #4]	; (d6568 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6562:	4a02      	ldr	r2, [pc, #8]	; (d656c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6564:	601a      	str	r2, [r3, #0]
   d6566:	4770      	bx	lr
   d6568:	2003e5c8 	.word	0x2003e5c8
   d656c:	000d9b37 	.word	0x000d9b37

000d6570 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6572:	4606      	mov	r6, r0
   d6574:	460d      	mov	r5, r1
   d6576:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6578:	2400      	movs	r4, #0
  while (size--) {
   d657a:	42bd      	cmp	r5, r7
   d657c:	d00c      	beq.n	d6598 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d657e:	6833      	ldr	r3, [r6, #0]
   d6580:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6584:	689b      	ldr	r3, [r3, #8]
   d6586:	4630      	mov	r0, r6
   d6588:	4798      	blx	r3
     if (chunk>=0)
   d658a:	2800      	cmp	r0, #0
   d658c:	db01      	blt.n	d6592 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d658e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6590:	e7f3      	b.n	d657a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6592:	2c00      	cmp	r4, #0
   d6594:	bf08      	it	eq
   d6596:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6598:	4620      	mov	r0, r4
   d659a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d659c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d659c:	b570      	push	{r4, r5, r6, lr}
   d659e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d65a0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d65a2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d65a4:	b149      	cbz	r1, d65ba <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d65a6:	f001 fafe 	bl	d7ba6 <strlen>
   d65aa:	682b      	ldr	r3, [r5, #0]
   d65ac:	4602      	mov	r2, r0
   d65ae:	4621      	mov	r1, r4
   d65b0:	4628      	mov	r0, r5
   d65b2:	68db      	ldr	r3, [r3, #12]
    }
   d65b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d65b8:	4718      	bx	r3
    }
   d65ba:	bd70      	pop	{r4, r5, r6, pc}

000d65bc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d65bc:	6803      	ldr	r3, [r0, #0]
   d65be:	689b      	ldr	r3, [r3, #8]
   d65c0:	4718      	bx	r3

000d65c2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d65c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d65c4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d65c6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d65c8:	f7ff fff8 	bl	d65bc <_ZN5Print5printEc>
  n += print('\n');
   d65cc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d65ce:	4604      	mov	r4, r0
  n += print('\n');
   d65d0:	4628      	mov	r0, r5
   d65d2:	f7ff fff3 	bl	d65bc <_ZN5Print5printEc>
  return n;
}
   d65d6:	4420      	add	r0, r4
   d65d8:	bd38      	pop	{r3, r4, r5, pc}

000d65da <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d65da:	b538      	push	{r3, r4, r5, lr}
   d65dc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d65de:	f7ff ffdd 	bl	d659c <_ZN5Print5writeEPKc>
   d65e2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d65e4:	4628      	mov	r0, r5
   d65e6:	f7ff ffec 	bl	d65c2 <_ZN5Print7printlnEv>
  return n;
}
   d65ea:	4420      	add	r0, r4
   d65ec:	bd38      	pop	{r3, r4, r5, pc}

000d65ee <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d65ee:	b530      	push	{r4, r5, lr}
   d65f0:	b08b      	sub	sp, #44	; 0x2c
   d65f2:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d65f4:	2100      	movs	r1, #0
   d65f6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d65fa:	2a01      	cmp	r2, #1
   d65fc:	bf98      	it	ls
   d65fe:	220a      	movls	r2, #10
   d6600:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6604:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6608:	fb05 3312 	mls	r3, r5, r2, r3
   d660c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6610:	2b09      	cmp	r3, #9
   d6612:	bf94      	ite	ls
   d6614:	3330      	addls	r3, #48	; 0x30
   d6616:	3337      	addhi	r3, #55	; 0x37
   d6618:	b2db      	uxtb	r3, r3
   d661a:	4621      	mov	r1, r4
   d661c:	f804 3901 	strb.w	r3, [r4], #-1
   d6620:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6622:	2d00      	cmp	r5, #0
   d6624:	d1ee      	bne.n	d6604 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6626:	f7ff ffb9 	bl	d659c <_ZN5Print5writeEPKc>
}
   d662a:	b00b      	add	sp, #44	; 0x2c
   d662c:	bd30      	pop	{r4, r5, pc}

000d662e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d662e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6630:	b92a      	cbnz	r2, d663e <_ZN5Print5printEmi+0x10>
   d6632:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6634:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6638:	689b      	ldr	r3, [r3, #8]
   d663a:	b2c9      	uxtb	r1, r1
   d663c:	4718      	bx	r3
  else return printNumber(n, base);
   d663e:	b2d2      	uxtb	r2, r2
}
   d6640:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6644:	f7ff bfd3 	b.w	d65ee <_ZN5Print11printNumberEmh>

000d6648 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6648:	f7ff bff1 	b.w	d662e <_ZN5Print5printEmi>

000d664c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d664c:	4770      	bx	lr

000d664e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d664e:	7441      	strb	r1, [r0, #17]
   d6650:	4770      	bx	lr

000d6652 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d6652:	7c00      	ldrb	r0, [r0, #16]
   d6654:	f7fe bec0 	b.w	d53d8 <HAL_USART_Available_Data_For_Write>

000d6658 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d6658:	7c00      	ldrb	r0, [r0, #16]
   d665a:	f7fe be95 	b.w	d5388 <HAL_USART_Available_Data>

000d665e <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d665e:	7c00      	ldrb	r0, [r0, #16]
   d6660:	f7fe bea2 	b.w	d53a8 <HAL_USART_Peek_Data>

000d6664 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d6664:	7c00      	ldrb	r0, [r0, #16]
   d6666:	f7fe be97 	b.w	d5398 <HAL_USART_Read_Data>

000d666a <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d666a:	7c00      	ldrb	r0, [r0, #16]
   d666c:	f7fe bea4 	b.w	d53b8 <HAL_USART_Flush_Data>

000d6670 <_ZN11USARTSerialD0Ev>:
   d6670:	b510      	push	{r4, lr}
   d6672:	4604      	mov	r4, r0
   d6674:	f7fd fd11 	bl	d409a <_ZdlPv>
   d6678:	4620      	mov	r0, r4
   d667a:	bd10      	pop	{r4, pc}

000d667c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d667c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d667e:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6680:	4604      	mov	r4, r0
   d6682:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6684:	b925      	cbnz	r5, d6690 <_ZN11USARTSerial5writeEh+0x14>
   d6686:	7c00      	ldrb	r0, [r0, #16]
   d6688:	f7fe fea6 	bl	d53d8 <HAL_USART_Available_Data_For_Write>
   d668c:	2800      	cmp	r0, #0
   d668e:	dd05      	ble.n	d669c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6690:	4631      	mov	r1, r6
   d6692:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6698:	f7fe be6e 	b.w	d5378 <HAL_USART_Write_Data>
  }
  return 0;
}
   d669c:	4628      	mov	r0, r5
   d669e:	bd70      	pop	{r4, r5, r6, pc}

000d66a0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d66a0:	b510      	push	{r4, lr}
   d66a2:	4604      	mov	r4, r0
   d66a4:	4608      	mov	r0, r1
   d66a6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d66a8:	2200      	movs	r2, #0
   d66aa:	6062      	str	r2, [r4, #4]
   d66ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d66b0:	60a2      	str	r2, [r4, #8]
   d66b2:	4a05      	ldr	r2, [pc, #20]	; (d66c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d66b4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d66b6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d66b8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d66ba:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d66bc:	461a      	mov	r2, r3
   d66be:	f7fe fe53 	bl	d5368 <HAL_USART_Init>
}
   d66c2:	4620      	mov	r0, r4
   d66c4:	bd10      	pop	{r4, pc}
   d66c6:	bf00      	nop
   d66c8:	000d9b68 	.word	0x000d9b68

000d66cc <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d66cc:	2300      	movs	r3, #0
   d66ce:	7c00      	ldrb	r0, [r0, #16]
   d66d0:	f7fe be8a 	b.w	d53e8 <HAL_USART_BeginConfig>

000d66d4 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d66d4:	2200      	movs	r2, #0
   d66d6:	f7ff bff9 	b.w	d66cc <_ZN11USARTSerial5beginEmm>

000d66da <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d66da:	7c00      	ldrb	r0, [r0, #16]
   d66dc:	f7fe be74 	b.w	d53c8 <HAL_USART_Is_Enabled>

000d66e0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d66e0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d66e2:	4d0c      	ldr	r5, [pc, #48]	; (d6714 <_Z22__fetch_global_Serial1v+0x34>)
   d66e4:	6829      	ldr	r1, [r5, #0]
   d66e6:	f011 0401 	ands.w	r4, r1, #1
   d66ea:	d111      	bne.n	d6710 <_Z22__fetch_global_Serial1v+0x30>
   d66ec:	4628      	mov	r0, r5
   d66ee:	f7fd fcd8 	bl	d40a2 <__cxa_guard_acquire>
   d66f2:	b168      	cbz	r0, d6710 <_Z22__fetch_global_Serial1v+0x30>
   d66f4:	4a08      	ldr	r2, [pc, #32]	; (d6718 <_Z22__fetch_global_Serial1v+0x38>)
   d66f6:	4b09      	ldr	r3, [pc, #36]	; (d671c <_Z22__fetch_global_Serial1v+0x3c>)
   d66f8:	4809      	ldr	r0, [pc, #36]	; (d6720 <_Z22__fetch_global_Serial1v+0x40>)
   d66fa:	4621      	mov	r1, r4
   d66fc:	f7ff ffd0 	bl	d66a0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6700:	4628      	mov	r0, r5
   d6702:	f7fd fcd3 	bl	d40ac <__cxa_guard_release>
   d6706:	4a07      	ldr	r2, [pc, #28]	; (d6724 <_Z22__fetch_global_Serial1v+0x44>)
   d6708:	4907      	ldr	r1, [pc, #28]	; (d6728 <_Z22__fetch_global_Serial1v+0x48>)
   d670a:	4805      	ldr	r0, [pc, #20]	; (d6720 <_Z22__fetch_global_Serial1v+0x40>)
   d670c:	f000 f9ef 	bl	d6aee <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6710:	4803      	ldr	r0, [pc, #12]	; (d6720 <_Z22__fetch_global_Serial1v+0x40>)
   d6712:	bd38      	pop	{r3, r4, r5, pc}
   d6714:	2003e664 	.word	0x2003e664
   d6718:	2003e668 	.word	0x2003e668
   d671c:	2003e5e0 	.word	0x2003e5e0
   d6720:	2003e5cc 	.word	0x2003e5cc
   d6724:	2003d694 	.word	0x2003d694
   d6728:	000d664d 	.word	0x000d664d

000d672c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d672c:	4b05      	ldr	r3, [pc, #20]	; (d6744 <_GLOBAL__sub_I_System+0x18>)
   d672e:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d6732:	2000      	movs	r0, #0
   d6734:	805a      	strh	r2, [r3, #2]
   d6736:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d673a:	7018      	strb	r0, [r3, #0]
   d673c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d673e:	f7fe bf73 	b.w	d5628 <set_system_mode>
   d6742:	bf00      	nop
   d6744:	2003e6ec 	.word	0x2003e6ec

000d6748 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6748:	2200      	movs	r2, #0
   d674a:	4611      	mov	r1, r2
   d674c:	6840      	ldr	r0, [r0, #4]
   d674e:	f7fe bf53 	b.w	d55f8 <network_listening>

000d6752 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6752:	2200      	movs	r2, #0
   d6754:	4611      	mov	r1, r2
   d6756:	6840      	ldr	r0, [r0, #4]
   d6758:	f7fe bf5e 	b.w	d5618 <network_get_listen_timeout>

000d675c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d675c:	2200      	movs	r2, #0
   d675e:	6840      	ldr	r0, [r0, #4]
   d6760:	f7fe bf52 	b.w	d5608 <network_set_listen_timeout>

000d6764 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6764:	2200      	movs	r2, #0
   d6766:	f081 0101 	eor.w	r1, r1, #1
   d676a:	6840      	ldr	r0, [r0, #4]
   d676c:	f7fe bf3c 	b.w	d55e8 <network_listen>

000d6770 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6770:	2300      	movs	r3, #0
   d6772:	461a      	mov	r2, r3
   d6774:	4619      	mov	r1, r3
   d6776:	6840      	ldr	r0, [r0, #4]
   d6778:	f7fe bf2e 	b.w	d55d8 <network_off>

000d677c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d677c:	2300      	movs	r3, #0
   d677e:	461a      	mov	r2, r3
   d6780:	4619      	mov	r1, r3
   d6782:	6840      	ldr	r0, [r0, #4]
   d6784:	f7fe bf20 	b.w	d55c8 <network_on>

000d6788 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6788:	2200      	movs	r2, #0
   d678a:	4611      	mov	r1, r2
   d678c:	6840      	ldr	r0, [r0, #4]
   d678e:	f7fe bf13 	b.w	d55b8 <network_ready>

000d6792 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6792:	2200      	movs	r2, #0
   d6794:	4611      	mov	r1, r2
   d6796:	6840      	ldr	r0, [r0, #4]
   d6798:	f7fe befe 	b.w	d5598 <network_connecting>

000d679c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d679c:	2200      	movs	r2, #0
   d679e:	2102      	movs	r1, #2
   d67a0:	6840      	ldr	r0, [r0, #4]
   d67a2:	f7fe bf01 	b.w	d55a8 <network_disconnect>

000d67a6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d67a6:	2300      	movs	r3, #0
   d67a8:	461a      	mov	r2, r3
   d67aa:	6840      	ldr	r0, [r0, #4]
   d67ac:	f7fe beec 	b.w	d5588 <network_connect>

000d67b0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d67b0:	4b02      	ldr	r3, [pc, #8]	; (d67bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d67b2:	2203      	movs	r2, #3
   d67b4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d67b6:	4a02      	ldr	r2, [pc, #8]	; (d67c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d67b8:	601a      	str	r2, [r3, #0]
   d67ba:	4770      	bx	lr
   d67bc:	2003e6f4 	.word	0x2003e6f4
   d67c0:	000d9b98 	.word	0x000d9b98

000d67c4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d67c4:	b510      	push	{r4, lr}
   d67c6:	4604      	mov	r4, r0
{
	free(buffer);
   d67c8:	6800      	ldr	r0, [r0, #0]
   d67ca:	f7fe ff69 	bl	d56a0 <free>
}
   d67ce:	4620      	mov	r0, r4
   d67d0:	bd10      	pop	{r4, pc}

000d67d2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d67d2:	b510      	push	{r4, lr}
   d67d4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d67d6:	6800      	ldr	r0, [r0, #0]
   d67d8:	b108      	cbz	r0, d67de <_ZN6String10invalidateEv+0xc>
   d67da:	f7fe ff61 	bl	d56a0 <free>
	buffer = NULL;
   d67de:	2300      	movs	r3, #0
   d67e0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d67e2:	60a3      	str	r3, [r4, #8]
   d67e4:	6063      	str	r3, [r4, #4]
   d67e6:	bd10      	pop	{r4, pc}

000d67e8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d67e8:	b538      	push	{r3, r4, r5, lr}
   d67ea:	4604      	mov	r4, r0
   d67ec:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d67ee:	6800      	ldr	r0, [r0, #0]
   d67f0:	3101      	adds	r1, #1
   d67f2:	f7fe ff5d 	bl	d56b0 <realloc>
	if (newbuffer) {
   d67f6:	b110      	cbz	r0, d67fe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d67f8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d67fc:	2001      	movs	r0, #1
	}
	return 0;
}
   d67fe:	bd38      	pop	{r3, r4, r5, pc}

000d6800 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6800:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6802:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6804:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6806:	b113      	cbz	r3, d680e <_ZN6String7reserveEj+0xe>
   d6808:	6843      	ldr	r3, [r0, #4]
   d680a:	428b      	cmp	r3, r1
   d680c:	d207      	bcs.n	d681e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d680e:	4620      	mov	r0, r4
   d6810:	f7ff ffea 	bl	d67e8 <_ZN6String12changeBufferEj>
   d6814:	b120      	cbz	r0, d6820 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6816:	68a3      	ldr	r3, [r4, #8]
   d6818:	b90b      	cbnz	r3, d681e <_ZN6String7reserveEj+0x1e>
   d681a:	6822      	ldr	r2, [r4, #0]
   d681c:	7013      	strb	r3, [r2, #0]
   d681e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6820:	bd10      	pop	{r4, pc}

000d6822 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6822:	b570      	push	{r4, r5, r6, lr}
   d6824:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6826:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6828:	4604      	mov	r4, r0
   d682a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d682c:	f7ff ffe8 	bl	d6800 <_ZN6String7reserveEj>
   d6830:	b918      	cbnz	r0, d683a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6832:	4620      	mov	r0, r4
   d6834:	f7ff ffcd 	bl	d67d2 <_ZN6String10invalidateEv>
		return *this;
   d6838:	e009      	b.n	d684e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d683a:	462a      	mov	r2, r5
   d683c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d683e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6840:	6820      	ldr	r0, [r4, #0]
   d6842:	f001 f96b 	bl	d7b1c <memcpy>
	buffer[len] = 0;
   d6846:	6822      	ldr	r2, [r4, #0]
   d6848:	68a3      	ldr	r3, [r4, #8]
   d684a:	2100      	movs	r1, #0
   d684c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d684e:	4620      	mov	r0, r4
   d6850:	bd70      	pop	{r4, r5, r6, pc}

000d6852 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6852:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6854:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6856:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6858:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d685a:	6043      	str	r3, [r0, #4]
	len = 0;
   d685c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d685e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6860:	460d      	mov	r5, r1
   d6862:	b139      	cbz	r1, d6874 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6864:	4608      	mov	r0, r1
   d6866:	f001 f99e 	bl	d7ba6 <strlen>
   d686a:	4629      	mov	r1, r5
   d686c:	4602      	mov	r2, r0
   d686e:	4620      	mov	r0, r4
   d6870:	f7ff ffd7 	bl	d6822 <_ZN6String4copyEPKcj>
}
   d6874:	4620      	mov	r0, r4
   d6876:	bd38      	pop	{r3, r4, r5, pc}

000d6878 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6878:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d687a:	b510      	push	{r4, lr}
   d687c:	460b      	mov	r3, r1
   d687e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6880:	d007      	beq.n	d6892 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6882:	6809      	ldr	r1, [r1, #0]
   d6884:	b119      	cbz	r1, d688e <_ZN6StringaSERKS_+0x16>
   d6886:	689a      	ldr	r2, [r3, #8]
   d6888:	f7ff ffcb 	bl	d6822 <_ZN6String4copyEPKcj>
   d688c:	e001      	b.n	d6892 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d688e:	f7ff ffa0 	bl	d67d2 <_ZN6String10invalidateEv>

	return *this;
}
   d6892:	4620      	mov	r0, r4
   d6894:	bd10      	pop	{r4, pc}

000d6896 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6896:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6898:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d689a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d689c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d689e:	6043      	str	r3, [r0, #4]
	len = 0;
   d68a0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d68a2:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d68a4:	f7ff ffe8 	bl	d6878 <_ZN6StringaSERKS_>
}
   d68a8:	4620      	mov	r0, r4
   d68aa:	bd10      	pop	{r4, pc}

000d68ac <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d68ac:	b570      	push	{r4, r5, r6, lr}
   d68ae:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d68b0:	460e      	mov	r6, r1
   d68b2:	b909      	cbnz	r1, d68b8 <_ZN6String6concatEPKcj+0xc>
   d68b4:	2000      	movs	r0, #0
   d68b6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d68b8:	b16a      	cbz	r2, d68d6 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d68ba:	6883      	ldr	r3, [r0, #8]
   d68bc:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d68be:	4629      	mov	r1, r5
   d68c0:	f7ff ff9e 	bl	d6800 <_ZN6String7reserveEj>
   d68c4:	2800      	cmp	r0, #0
   d68c6:	d0f5      	beq.n	d68b4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d68c8:	6820      	ldr	r0, [r4, #0]
   d68ca:	68a3      	ldr	r3, [r4, #8]
   d68cc:	4631      	mov	r1, r6
   d68ce:	4418      	add	r0, r3
   d68d0:	f001 f945 	bl	d7b5e <strcpy>
	len = newlen;
   d68d4:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d68d6:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d68d8:	bd70      	pop	{r4, r5, r6, pc}

000d68da <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d68da:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d68dc:	688a      	ldr	r2, [r1, #8]
   d68de:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d68e0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d68e2:	f7ff ffe3 	bl	d68ac <_ZN6String6concatEPKcj>
   d68e6:	b910      	cbnz	r0, d68ee <_ZplRK15StringSumHelperRK6String+0x14>
   d68e8:	4620      	mov	r0, r4
   d68ea:	f7ff ff72 	bl	d67d2 <_ZN6String10invalidateEv>
	return a;
}
   d68ee:	4620      	mov	r0, r4
   d68f0:	bd10      	pop	{r4, pc}

000d68f2 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d68f2:	b538      	push	{r3, r4, r5, lr}
   d68f4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d68f6:	460d      	mov	r5, r1
   d68f8:	b141      	cbz	r1, d690c <_ZplRK15StringSumHelperPKc+0x1a>
   d68fa:	4608      	mov	r0, r1
   d68fc:	f001 f953 	bl	d7ba6 <strlen>
   d6900:	4629      	mov	r1, r5
   d6902:	4602      	mov	r2, r0
   d6904:	4620      	mov	r0, r4
   d6906:	f7ff ffd1 	bl	d68ac <_ZN6String6concatEPKcj>
   d690a:	b910      	cbnz	r0, d6912 <_ZplRK15StringSumHelperPKc+0x20>
   d690c:	4620      	mov	r0, r4
   d690e:	f7ff ff60 	bl	d67d2 <_ZN6String10invalidateEv>
	return a;
}
   d6912:	4620      	mov	r0, r4
   d6914:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6918 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d6918:	b40e      	push	{r1, r2, r3}
   d691a:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d691c:	ac09      	add	r4, sp, #36	; 0x24
   d691e:	4605      	mov	r5, r0
   d6920:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d6924:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6926:	4623      	mov	r3, r4
   d6928:	463a      	mov	r2, r7
   d692a:	2105      	movs	r1, #5
   d692c:	a802      	add	r0, sp, #8
   d692e:	f7fe fec7 	bl	d56c0 <vsnprintf>
    va_end(marker);

    String result;
   d6932:	490c      	ldr	r1, [pc, #48]	; (d6964 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6934:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d6936:	4628      	mov	r0, r5
   d6938:	f7ff ff8b 	bl	d6852 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d693c:	4631      	mov	r1, r6
   d693e:	4628      	mov	r0, r5
   d6940:	f7ff ff5e 	bl	d6800 <_ZN6String7reserveEj>
    if (result.buffer) {
   d6944:	6828      	ldr	r0, [r5, #0]
   d6946:	b130      	cbz	r0, d6956 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6948:	4623      	mov	r3, r4
   d694a:	463a      	mov	r2, r7
   d694c:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d694e:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6950:	f7fe feb6 	bl	d56c0 <vsnprintf>
        va_end(marker);
        result.len = n;
   d6954:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d6956:	4628      	mov	r0, r5
   d6958:	b004      	add	sp, #16
   d695a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d695e:	b003      	add	sp, #12
   d6960:	4770      	bx	lr
   d6962:	bf00      	nop
   d6964:	000d9a95 	.word	0x000d9a95

000d6968 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6968:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d696a:	4d0b      	ldr	r5, [pc, #44]	; (d6998 <_Z19__fetch_global_Wirev+0x30>)
   d696c:	6829      	ldr	r1, [r5, #0]
   d696e:	f011 0401 	ands.w	r4, r1, #1
   d6972:	d10f      	bne.n	d6994 <_Z19__fetch_global_Wirev+0x2c>
   d6974:	4628      	mov	r0, r5
   d6976:	f7fd fb94 	bl	d40a2 <__cxa_guard_acquire>
   d697a:	b158      	cbz	r0, d6994 <_Z19__fetch_global_Wirev+0x2c>
   d697c:	4621      	mov	r1, r4
   d697e:	4807      	ldr	r0, [pc, #28]	; (d699c <_Z19__fetch_global_Wirev+0x34>)
   d6980:	f7ff f880 	bl	d5a84 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6984:	4628      	mov	r0, r5
   d6986:	f7fd fb91 	bl	d40ac <__cxa_guard_release>
   d698a:	4a05      	ldr	r2, [pc, #20]	; (d69a0 <_Z19__fetch_global_Wirev+0x38>)
   d698c:	4905      	ldr	r1, [pc, #20]	; (d69a4 <_Z19__fetch_global_Wirev+0x3c>)
   d698e:	4803      	ldr	r0, [pc, #12]	; (d699c <_Z19__fetch_global_Wirev+0x34>)
   d6990:	f000 f8ad 	bl	d6aee <__aeabi_atexit>
	return wire;
}
   d6994:	4801      	ldr	r0, [pc, #4]	; (d699c <_Z19__fetch_global_Wirev+0x34>)
   d6996:	bd38      	pop	{r3, r4, r5, pc}
   d6998:	2003e6fc 	.word	0x2003e6fc
   d699c:	2003e714 	.word	0x2003e714
   d69a0:	2003d694 	.word	0x2003d694
   d69a4:	000d5a2d 	.word	0x000d5a2d

000d69a8 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d69a8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d69aa:	4c0b      	ldr	r4, [pc, #44]	; (d69d8 <_Z20__fetch_global_Wire1v+0x30>)
   d69ac:	6823      	ldr	r3, [r4, #0]
   d69ae:	07db      	lsls	r3, r3, #31
   d69b0:	d40f      	bmi.n	d69d2 <_Z20__fetch_global_Wire1v+0x2a>
   d69b2:	4620      	mov	r0, r4
   d69b4:	f7fd fb75 	bl	d40a2 <__cxa_guard_acquire>
   d69b8:	b158      	cbz	r0, d69d2 <_Z20__fetch_global_Wire1v+0x2a>
   d69ba:	2101      	movs	r1, #1
   d69bc:	4807      	ldr	r0, [pc, #28]	; (d69dc <_Z20__fetch_global_Wire1v+0x34>)
   d69be:	f7ff f861 	bl	d5a84 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d69c2:	4620      	mov	r0, r4
   d69c4:	f7fd fb72 	bl	d40ac <__cxa_guard_release>
   d69c8:	4a05      	ldr	r2, [pc, #20]	; (d69e0 <_Z20__fetch_global_Wire1v+0x38>)
   d69ca:	4906      	ldr	r1, [pc, #24]	; (d69e4 <_Z20__fetch_global_Wire1v+0x3c>)
   d69cc:	4803      	ldr	r0, [pc, #12]	; (d69dc <_Z20__fetch_global_Wire1v+0x34>)
   d69ce:	f000 f88e 	bl	d6aee <__aeabi_atexit>
	return wire;
}
   d69d2:	4802      	ldr	r0, [pc, #8]	; (d69dc <_Z20__fetch_global_Wire1v+0x34>)
   d69d4:	bd10      	pop	{r4, pc}
   d69d6:	bf00      	nop
   d69d8:	2003e728 	.word	0x2003e728
   d69dc:	2003e700 	.word	0x2003e700
   d69e0:	2003d694 	.word	0x2003d694
   d69e4:	000d5a2d 	.word	0x000d5a2d

000d69e8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d69e8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d69ea:	4c0c      	ldr	r4, [pc, #48]	; (d6a1c <_GLOBAL__sub_I_SPI+0x34>)
   d69ec:	4e0c      	ldr	r6, [pc, #48]	; (d6a20 <_GLOBAL__sub_I_SPI+0x38>)
   d69ee:	4d0d      	ldr	r5, [pc, #52]	; (d6a24 <_GLOBAL__sub_I_SPI+0x3c>)
   d69f0:	2100      	movs	r1, #0
   d69f2:	4620      	mov	r0, r4
   d69f4:	f7fe ffa6 	bl	d5944 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d69f8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d69fa:	4c0b      	ldr	r4, [pc, #44]	; (d6a28 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d69fc:	4632      	mov	r2, r6
   d69fe:	4629      	mov	r1, r5
   d6a00:	f000 f875 	bl	d6aee <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6a04:	2101      	movs	r1, #1
   d6a06:	4620      	mov	r0, r4
   d6a08:	f7fe ff9c 	bl	d5944 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6a0c:	4632      	mov	r2, r6
   d6a0e:	4629      	mov	r1, r5
   d6a10:	4620      	mov	r0, r4
   d6a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6a16:	f000 b86a 	b.w	d6aee <__aeabi_atexit>
   d6a1a:	bf00      	nop
   d6a1c:	2003e730 	.word	0x2003e730
   d6a20:	2003d694 	.word	0x2003d694
   d6a24:	000d5935 	.word	0x000d5935
   d6a28:	2003e740 	.word	0x2003e740

000d6a2c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6a2c:	b510      	push	{r4, lr}
   d6a2e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6a30:	480f      	ldr	r0, [pc, #60]	; (d6a70 <pinAvailable+0x44>)
   d6a32:	f7fe ffe5 	bl	d5a00 <_ZN8SPIClass9isEnabledEv>
   d6a36:	b128      	cbz	r0, d6a44 <pinAvailable+0x18>
   d6a38:	f1a4 030b 	sub.w	r3, r4, #11
   d6a3c:	2b02      	cmp	r3, #2
   d6a3e:	d801      	bhi.n	d6a44 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6a40:	2000      	movs	r0, #0
   d6a42:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6a44:	f7ff ff90 	bl	d6968 <_Z19__fetch_global_Wirev>
   d6a48:	f7ff f855 	bl	d5af6 <_ZN7TwoWire9isEnabledEv>
   d6a4c:	b108      	cbz	r0, d6a52 <pinAvailable+0x26>
   d6a4e:	2c01      	cmp	r4, #1
   d6a50:	d9f6      	bls.n	d6a40 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6a52:	f7ff fe45 	bl	d66e0 <_Z22__fetch_global_Serial1v>
   d6a56:	f7ff fe40 	bl	d66da <_ZN11USARTSerial9isEnabledEv>
   d6a5a:	b118      	cbz	r0, d6a64 <pinAvailable+0x38>
   d6a5c:	f1a4 0309 	sub.w	r3, r4, #9
   d6a60:	2b01      	cmp	r3, #1
   d6a62:	d9ed      	bls.n	d6a40 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6a64:	2c23      	cmp	r4, #35	; 0x23
   d6a66:	bf8c      	ite	hi
   d6a68:	2000      	movhi	r0, #0
   d6a6a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6a6c:	bd10      	pop	{r4, pc}
   d6a6e:	bf00      	nop
   d6a70:	2003e730 	.word	0x2003e730

000d6a74 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6a74:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6a76:	b538      	push	{r3, r4, r5, lr}
   d6a78:	4604      	mov	r4, r0
   d6a7a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6a7c:	d80a      	bhi.n	d6a94 <pinMode+0x20>
   d6a7e:	29ff      	cmp	r1, #255	; 0xff
   d6a80:	d008      	beq.n	d6a94 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6a82:	f7ff ffd3 	bl	d6a2c <pinAvailable>
   d6a86:	b128      	cbz	r0, d6a94 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6a88:	4629      	mov	r1, r5
   d6a8a:	4620      	mov	r0, r4
}
   d6a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6a90:	f7fe bd32 	b.w	d54f8 <HAL_Pin_Mode>
   d6a94:	bd38      	pop	{r3, r4, r5, pc}

000d6a96 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6a96:	b538      	push	{r3, r4, r5, lr}
   d6a98:	4604      	mov	r4, r0
   d6a9a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6a9c:	f7fe fd34 	bl	d5508 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6aa0:	28ff      	cmp	r0, #255	; 0xff
   d6aa2:	d010      	beq.n	d6ac6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6aa4:	2806      	cmp	r0, #6
   d6aa6:	d804      	bhi.n	d6ab2 <digitalWrite+0x1c>
   d6aa8:	234d      	movs	r3, #77	; 0x4d
   d6aaa:	fa23 f000 	lsr.w	r0, r3, r0
   d6aae:	07c3      	lsls	r3, r0, #31
   d6ab0:	d409      	bmi.n	d6ac6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6ab2:	4620      	mov	r0, r4
   d6ab4:	f7ff ffba 	bl	d6a2c <pinAvailable>
   d6ab8:	b128      	cbz	r0, d6ac6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6aba:	4629      	mov	r1, r5
   d6abc:	4620      	mov	r0, r4
}
   d6abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6ac2:	f7fe bd29 	b.w	d5518 <HAL_GPIO_Write>
   d6ac6:	bd38      	pop	{r3, r4, r5, pc}

000d6ac8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6ac8:	b510      	push	{r4, lr}
   d6aca:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6acc:	f7fe fd1c 	bl	d5508 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6ad0:	3804      	subs	r0, #4
   d6ad2:	b2c0      	uxtb	r0, r0
   d6ad4:	2801      	cmp	r0, #1
   d6ad6:	d908      	bls.n	d6aea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6ad8:	4620      	mov	r0, r4
   d6ada:	f7ff ffa7 	bl	d6a2c <pinAvailable>
   d6ade:	b120      	cbz	r0, d6aea <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6ae0:	4620      	mov	r0, r4
}
   d6ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6ae6:	f7fe bd1f 	b.w	d5528 <HAL_GPIO_Read>
}
   d6aea:	2000      	movs	r0, #0
   d6aec:	bd10      	pop	{r4, pc}

000d6aee <__aeabi_atexit>:
   d6aee:	460b      	mov	r3, r1
   d6af0:	4601      	mov	r1, r0
   d6af2:	4618      	mov	r0, r3
   d6af4:	f001 b800 	b.w	d7af8 <__cxa_atexit>

000d6af8 <_ZSt25__throw_bad_function_callv>:
   d6af8:	b508      	push	{r3, lr}
   d6afa:	f7fe fde9 	bl	d56d0 <abort>
	...

000d6b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6b00:	4b18      	ldr	r3, [pc, #96]	; (d6b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6b02:	681a      	ldr	r2, [r3, #0]
   d6b04:	07d1      	lsls	r1, r2, #31
   d6b06:	bf5c      	itt	pl
   d6b08:	2201      	movpl	r2, #1
   d6b0a:	601a      	strpl	r2, [r3, #0]
   d6b0c:	4b16      	ldr	r3, [pc, #88]	; (d6b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6b0e:	681a      	ldr	r2, [r3, #0]
   d6b10:	07d2      	lsls	r2, r2, #31
   d6b12:	bf5c      	itt	pl
   d6b14:	2201      	movpl	r2, #1
   d6b16:	601a      	strpl	r2, [r3, #0]
   d6b18:	4b14      	ldr	r3, [pc, #80]	; (d6b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6b1a:	681a      	ldr	r2, [r3, #0]
   d6b1c:	07d0      	lsls	r0, r2, #31
   d6b1e:	bf5c      	itt	pl
   d6b20:	2201      	movpl	r2, #1
   d6b22:	601a      	strpl	r2, [r3, #0]
   d6b24:	4b12      	ldr	r3, [pc, #72]	; (d6b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6b26:	681a      	ldr	r2, [r3, #0]
   d6b28:	07d1      	lsls	r1, r2, #31
   d6b2a:	bf5c      	itt	pl
   d6b2c:	2201      	movpl	r2, #1
   d6b2e:	601a      	strpl	r2, [r3, #0]
   d6b30:	4b10      	ldr	r3, [pc, #64]	; (d6b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6b32:	681a      	ldr	r2, [r3, #0]
   d6b34:	07d2      	lsls	r2, r2, #31
   d6b36:	bf5c      	itt	pl
   d6b38:	2201      	movpl	r2, #1
   d6b3a:	601a      	strpl	r2, [r3, #0]
   d6b3c:	4b0e      	ldr	r3, [pc, #56]	; (d6b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6b3e:	681a      	ldr	r2, [r3, #0]
   d6b40:	07d0      	lsls	r0, r2, #31
   d6b42:	bf5c      	itt	pl
   d6b44:	2201      	movpl	r2, #1
   d6b46:	601a      	strpl	r2, [r3, #0]
   d6b48:	4b0c      	ldr	r3, [pc, #48]	; (d6b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6b4a:	681a      	ldr	r2, [r3, #0]
   d6b4c:	07d1      	lsls	r1, r2, #31
   d6b4e:	bf5c      	itt	pl
   d6b50:	2201      	movpl	r2, #1
   d6b52:	601a      	strpl	r2, [r3, #0]
   d6b54:	4b0a      	ldr	r3, [pc, #40]	; (d6b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6b56:	681a      	ldr	r2, [r3, #0]
   d6b58:	07d2      	lsls	r2, r2, #31
   d6b5a:	bf5c      	itt	pl
   d6b5c:	2201      	movpl	r2, #1
   d6b5e:	601a      	strpl	r2, [r3, #0]
   d6b60:	4770      	bx	lr
   d6b62:	bf00      	nop
   d6b64:	2003e76c 	.word	0x2003e76c
   d6b68:	2003e768 	.word	0x2003e768
   d6b6c:	2003e764 	.word	0x2003e764
   d6b70:	2003e760 	.word	0x2003e760
   d6b74:	2003e75c 	.word	0x2003e75c
   d6b78:	2003e758 	.word	0x2003e758
   d6b7c:	2003e754 	.word	0x2003e754
   d6b80:	2003e750 	.word	0x2003e750

000d6b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6b84:	4b24      	ldr	r3, [pc, #144]	; (d6c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6b86:	681a      	ldr	r2, [r3, #0]
   d6b88:	07d0      	lsls	r0, r2, #31
   d6b8a:	bf5c      	itt	pl
   d6b8c:	2201      	movpl	r2, #1
   d6b8e:	601a      	strpl	r2, [r3, #0]
   d6b90:	4b22      	ldr	r3, [pc, #136]	; (d6c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6b92:	681a      	ldr	r2, [r3, #0]
   d6b94:	07d1      	lsls	r1, r2, #31
   d6b96:	bf5c      	itt	pl
   d6b98:	2201      	movpl	r2, #1
   d6b9a:	601a      	strpl	r2, [r3, #0]
   d6b9c:	4b20      	ldr	r3, [pc, #128]	; (d6c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6b9e:	681a      	ldr	r2, [r3, #0]
   d6ba0:	07d2      	lsls	r2, r2, #31
   d6ba2:	bf5c      	itt	pl
   d6ba4:	2201      	movpl	r2, #1
   d6ba6:	601a      	strpl	r2, [r3, #0]
   d6ba8:	4b1e      	ldr	r3, [pc, #120]	; (d6c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6baa:	681a      	ldr	r2, [r3, #0]
   d6bac:	07d0      	lsls	r0, r2, #31
   d6bae:	bf5c      	itt	pl
   d6bb0:	2201      	movpl	r2, #1
   d6bb2:	601a      	strpl	r2, [r3, #0]
   d6bb4:	4b1c      	ldr	r3, [pc, #112]	; (d6c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6bb6:	681a      	ldr	r2, [r3, #0]
   d6bb8:	07d1      	lsls	r1, r2, #31
   d6bba:	bf5c      	itt	pl
   d6bbc:	2201      	movpl	r2, #1
   d6bbe:	601a      	strpl	r2, [r3, #0]
   d6bc0:	4b1a      	ldr	r3, [pc, #104]	; (d6c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6bc2:	681a      	ldr	r2, [r3, #0]
   d6bc4:	07d2      	lsls	r2, r2, #31
   d6bc6:	bf5c      	itt	pl
   d6bc8:	2201      	movpl	r2, #1
   d6bca:	601a      	strpl	r2, [r3, #0]
   d6bcc:	4b18      	ldr	r3, [pc, #96]	; (d6c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6bce:	681a      	ldr	r2, [r3, #0]
   d6bd0:	07d0      	lsls	r0, r2, #31
   d6bd2:	bf5c      	itt	pl
   d6bd4:	2201      	movpl	r2, #1
   d6bd6:	601a      	strpl	r2, [r3, #0]
   d6bd8:	4b16      	ldr	r3, [pc, #88]	; (d6c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6bda:	681a      	ldr	r2, [r3, #0]
   d6bdc:	07d1      	lsls	r1, r2, #31
   d6bde:	bf5c      	itt	pl
   d6be0:	2201      	movpl	r2, #1
   d6be2:	601a      	strpl	r2, [r3, #0]
   d6be4:	4b14      	ldr	r3, [pc, #80]	; (d6c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6be6:	681a      	ldr	r2, [r3, #0]
   d6be8:	07d2      	lsls	r2, r2, #31
   d6bea:	bf5c      	itt	pl
   d6bec:	2201      	movpl	r2, #1
   d6bee:	601a      	strpl	r2, [r3, #0]
   d6bf0:	4b12      	ldr	r3, [pc, #72]	; (d6c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6bf2:	681a      	ldr	r2, [r3, #0]
   d6bf4:	07d0      	lsls	r0, r2, #31
   d6bf6:	bf5c      	itt	pl
   d6bf8:	2201      	movpl	r2, #1
   d6bfa:	601a      	strpl	r2, [r3, #0]
   d6bfc:	4b10      	ldr	r3, [pc, #64]	; (d6c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6bfe:	681a      	ldr	r2, [r3, #0]
   d6c00:	07d1      	lsls	r1, r2, #31
   d6c02:	bf5c      	itt	pl
   d6c04:	2201      	movpl	r2, #1
   d6c06:	601a      	strpl	r2, [r3, #0]
   d6c08:	4b0e      	ldr	r3, [pc, #56]	; (d6c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6c0a:	681a      	ldr	r2, [r3, #0]
   d6c0c:	07d2      	lsls	r2, r2, #31
   d6c0e:	bf5c      	itt	pl
   d6c10:	2201      	movpl	r2, #1
   d6c12:	601a      	strpl	r2, [r3, #0]
   d6c14:	4770      	bx	lr
   d6c16:	bf00      	nop
   d6c18:	2003e79c 	.word	0x2003e79c
   d6c1c:	2003e798 	.word	0x2003e798
   d6c20:	2003e794 	.word	0x2003e794
   d6c24:	2003e790 	.word	0x2003e790
   d6c28:	2003e78c 	.word	0x2003e78c
   d6c2c:	2003e788 	.word	0x2003e788
   d6c30:	2003e784 	.word	0x2003e784
   d6c34:	2003e780 	.word	0x2003e780
   d6c38:	2003e77c 	.word	0x2003e77c
   d6c3c:	2003e778 	.word	0x2003e778
   d6c40:	2003e774 	.word	0x2003e774
   d6c44:	2003e770 	.word	0x2003e770

000d6c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6c48:	4b24      	ldr	r3, [pc, #144]	; (d6cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6c4a:	681a      	ldr	r2, [r3, #0]
   d6c4c:	07d0      	lsls	r0, r2, #31
   d6c4e:	bf5c      	itt	pl
   d6c50:	2201      	movpl	r2, #1
   d6c52:	601a      	strpl	r2, [r3, #0]
   d6c54:	4b22      	ldr	r3, [pc, #136]	; (d6ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6c56:	681a      	ldr	r2, [r3, #0]
   d6c58:	07d1      	lsls	r1, r2, #31
   d6c5a:	bf5c      	itt	pl
   d6c5c:	2201      	movpl	r2, #1
   d6c5e:	601a      	strpl	r2, [r3, #0]
   d6c60:	4b20      	ldr	r3, [pc, #128]	; (d6ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6c62:	681a      	ldr	r2, [r3, #0]
   d6c64:	07d2      	lsls	r2, r2, #31
   d6c66:	bf5c      	itt	pl
   d6c68:	2201      	movpl	r2, #1
   d6c6a:	601a      	strpl	r2, [r3, #0]
   d6c6c:	4b1e      	ldr	r3, [pc, #120]	; (d6ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6c6e:	681a      	ldr	r2, [r3, #0]
   d6c70:	07d0      	lsls	r0, r2, #31
   d6c72:	bf5c      	itt	pl
   d6c74:	2201      	movpl	r2, #1
   d6c76:	601a      	strpl	r2, [r3, #0]
   d6c78:	4b1c      	ldr	r3, [pc, #112]	; (d6cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6c7a:	681a      	ldr	r2, [r3, #0]
   d6c7c:	07d1      	lsls	r1, r2, #31
   d6c7e:	bf5c      	itt	pl
   d6c80:	2201      	movpl	r2, #1
   d6c82:	601a      	strpl	r2, [r3, #0]
   d6c84:	4b1a      	ldr	r3, [pc, #104]	; (d6cf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6c86:	681a      	ldr	r2, [r3, #0]
   d6c88:	07d2      	lsls	r2, r2, #31
   d6c8a:	bf5c      	itt	pl
   d6c8c:	2201      	movpl	r2, #1
   d6c8e:	601a      	strpl	r2, [r3, #0]
   d6c90:	4b18      	ldr	r3, [pc, #96]	; (d6cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6c92:	681a      	ldr	r2, [r3, #0]
   d6c94:	07d0      	lsls	r0, r2, #31
   d6c96:	bf5c      	itt	pl
   d6c98:	2201      	movpl	r2, #1
   d6c9a:	601a      	strpl	r2, [r3, #0]
   d6c9c:	4b16      	ldr	r3, [pc, #88]	; (d6cf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6c9e:	681a      	ldr	r2, [r3, #0]
   d6ca0:	07d1      	lsls	r1, r2, #31
   d6ca2:	bf5c      	itt	pl
   d6ca4:	2201      	movpl	r2, #1
   d6ca6:	601a      	strpl	r2, [r3, #0]
   d6ca8:	4b14      	ldr	r3, [pc, #80]	; (d6cfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6caa:	681a      	ldr	r2, [r3, #0]
   d6cac:	07d2      	lsls	r2, r2, #31
   d6cae:	bf5c      	itt	pl
   d6cb0:	2201      	movpl	r2, #1
   d6cb2:	601a      	strpl	r2, [r3, #0]
   d6cb4:	4b12      	ldr	r3, [pc, #72]	; (d6d00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6cb6:	681a      	ldr	r2, [r3, #0]
   d6cb8:	07d0      	lsls	r0, r2, #31
   d6cba:	bf5c      	itt	pl
   d6cbc:	2201      	movpl	r2, #1
   d6cbe:	601a      	strpl	r2, [r3, #0]
   d6cc0:	4b10      	ldr	r3, [pc, #64]	; (d6d04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6cc2:	681a      	ldr	r2, [r3, #0]
   d6cc4:	07d1      	lsls	r1, r2, #31
   d6cc6:	bf5c      	itt	pl
   d6cc8:	2201      	movpl	r2, #1
   d6cca:	601a      	strpl	r2, [r3, #0]
   d6ccc:	4b0e      	ldr	r3, [pc, #56]	; (d6d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6cce:	681a      	ldr	r2, [r3, #0]
   d6cd0:	07d2      	lsls	r2, r2, #31
   d6cd2:	bf5c      	itt	pl
   d6cd4:	2201      	movpl	r2, #1
   d6cd6:	601a      	strpl	r2, [r3, #0]
   d6cd8:	4770      	bx	lr
   d6cda:	bf00      	nop
   d6cdc:	2003e7cc 	.word	0x2003e7cc
   d6ce0:	2003e7c8 	.word	0x2003e7c8
   d6ce4:	2003e7c4 	.word	0x2003e7c4
   d6ce8:	2003e7c0 	.word	0x2003e7c0
   d6cec:	2003e7bc 	.word	0x2003e7bc
   d6cf0:	2003e7b8 	.word	0x2003e7b8
   d6cf4:	2003e7b4 	.word	0x2003e7b4
   d6cf8:	2003e7b0 	.word	0x2003e7b0
   d6cfc:	2003e7ac 	.word	0x2003e7ac
   d6d00:	2003e7a8 	.word	0x2003e7a8
   d6d04:	2003e7a4 	.word	0x2003e7a4
   d6d08:	2003e7a0 	.word	0x2003e7a0

000d6d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6d0c:	4b18      	ldr	r3, [pc, #96]	; (d6d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6d0e:	681a      	ldr	r2, [r3, #0]
   d6d10:	07d1      	lsls	r1, r2, #31
   d6d12:	bf5c      	itt	pl
   d6d14:	2201      	movpl	r2, #1
   d6d16:	601a      	strpl	r2, [r3, #0]
   d6d18:	4b16      	ldr	r3, [pc, #88]	; (d6d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6d1a:	681a      	ldr	r2, [r3, #0]
   d6d1c:	07d2      	lsls	r2, r2, #31
   d6d1e:	bf5c      	itt	pl
   d6d20:	2201      	movpl	r2, #1
   d6d22:	601a      	strpl	r2, [r3, #0]
   d6d24:	4b14      	ldr	r3, [pc, #80]	; (d6d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6d26:	681a      	ldr	r2, [r3, #0]
   d6d28:	07d0      	lsls	r0, r2, #31
   d6d2a:	bf5c      	itt	pl
   d6d2c:	2201      	movpl	r2, #1
   d6d2e:	601a      	strpl	r2, [r3, #0]
   d6d30:	4b12      	ldr	r3, [pc, #72]	; (d6d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6d32:	681a      	ldr	r2, [r3, #0]
   d6d34:	07d1      	lsls	r1, r2, #31
   d6d36:	bf5c      	itt	pl
   d6d38:	2201      	movpl	r2, #1
   d6d3a:	601a      	strpl	r2, [r3, #0]
   d6d3c:	4b10      	ldr	r3, [pc, #64]	; (d6d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6d3e:	681a      	ldr	r2, [r3, #0]
   d6d40:	07d2      	lsls	r2, r2, #31
   d6d42:	bf5c      	itt	pl
   d6d44:	2201      	movpl	r2, #1
   d6d46:	601a      	strpl	r2, [r3, #0]
   d6d48:	4b0e      	ldr	r3, [pc, #56]	; (d6d84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6d4a:	681a      	ldr	r2, [r3, #0]
   d6d4c:	07d0      	lsls	r0, r2, #31
   d6d4e:	bf5c      	itt	pl
   d6d50:	2201      	movpl	r2, #1
   d6d52:	601a      	strpl	r2, [r3, #0]
   d6d54:	4b0c      	ldr	r3, [pc, #48]	; (d6d88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6d56:	681a      	ldr	r2, [r3, #0]
   d6d58:	07d1      	lsls	r1, r2, #31
   d6d5a:	bf5c      	itt	pl
   d6d5c:	2201      	movpl	r2, #1
   d6d5e:	601a      	strpl	r2, [r3, #0]
   d6d60:	4b0a      	ldr	r3, [pc, #40]	; (d6d8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6d62:	681a      	ldr	r2, [r3, #0]
   d6d64:	07d2      	lsls	r2, r2, #31
   d6d66:	bf5c      	itt	pl
   d6d68:	2201      	movpl	r2, #1
   d6d6a:	601a      	strpl	r2, [r3, #0]
   d6d6c:	4770      	bx	lr
   d6d6e:	bf00      	nop
   d6d70:	2003e7ec 	.word	0x2003e7ec
   d6d74:	2003e7e8 	.word	0x2003e7e8
   d6d78:	2003e7e4 	.word	0x2003e7e4
   d6d7c:	2003e7e0 	.word	0x2003e7e0
   d6d80:	2003e7dc 	.word	0x2003e7dc
   d6d84:	2003e7d8 	.word	0x2003e7d8
   d6d88:	2003e7d4 	.word	0x2003e7d4
   d6d8c:	2003e7d0 	.word	0x2003e7d0

000d6d90 <fmod>:
   d6d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6d94:	ed2d 8b02 	vpush	{d8}
   d6d98:	b08b      	sub	sp, #44	; 0x2c
   d6d9a:	ec57 6b10 	vmov	r6, r7, d0
   d6d9e:	ec55 4b11 	vmov	r4, r5, d1
   d6da2:	f000 f861 	bl	d6e68 <__ieee754_fmod>
   d6da6:	4b2e      	ldr	r3, [pc, #184]	; (d6e60 <fmod+0xd0>)
   d6da8:	eeb0 8a40 	vmov.f32	s16, s0
   d6dac:	eef0 8a60 	vmov.f32	s17, s1
   d6db0:	f993 8000 	ldrsb.w	r8, [r3]
   d6db4:	f1b8 3fff 	cmp.w	r8, #4294967295
   d6db8:	d031      	beq.n	d6e1e <fmod+0x8e>
   d6dba:	4622      	mov	r2, r4
   d6dbc:	462b      	mov	r3, r5
   d6dbe:	4620      	mov	r0, r4
   d6dc0:	4629      	mov	r1, r5
   d6dc2:	f000 fddf 	bl	d7984 <__aeabi_dcmpun>
   d6dc6:	bb50      	cbnz	r0, d6e1e <fmod+0x8e>
   d6dc8:	4632      	mov	r2, r6
   d6dca:	463b      	mov	r3, r7
   d6dcc:	4630      	mov	r0, r6
   d6dce:	4639      	mov	r1, r7
   d6dd0:	f000 fdd8 	bl	d7984 <__aeabi_dcmpun>
   d6dd4:	4681      	mov	r9, r0
   d6dd6:	bb10      	cbnz	r0, d6e1e <fmod+0x8e>
   d6dd8:	2200      	movs	r2, #0
   d6dda:	2300      	movs	r3, #0
   d6ddc:	4620      	mov	r0, r4
   d6dde:	4629      	mov	r1, r5
   d6de0:	f000 fd9e 	bl	d7920 <__aeabi_dcmpeq>
   d6de4:	b1d8      	cbz	r0, d6e1e <fmod+0x8e>
   d6de6:	4b1f      	ldr	r3, [pc, #124]	; (d6e64 <fmod+0xd4>)
   d6de8:	f8cd 9020 	str.w	r9, [sp, #32]
   d6dec:	2201      	movs	r2, #1
   d6dee:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6df2:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d6df6:	e88d 000c 	stmia.w	sp, {r2, r3}
   d6dfa:	f1b8 0f00 	cmp.w	r8, #0
   d6dfe:	d117      	bne.n	d6e30 <fmod+0xa0>
   d6e00:	e9cd 6706 	strd	r6, r7, [sp, #24]
   d6e04:	4668      	mov	r0, sp
   d6e06:	f000 f969 	bl	d70dc <matherr>
   d6e0a:	b1e0      	cbz	r0, d6e46 <fmod+0xb6>
   d6e0c:	9b08      	ldr	r3, [sp, #32]
   d6e0e:	bb0b      	cbnz	r3, d6e54 <fmod+0xc4>
   d6e10:	ed9d 0b06 	vldr	d0, [sp, #24]
   d6e14:	b00b      	add	sp, #44	; 0x2c
   d6e16:	ecbd 8b02 	vpop	{d8}
   d6e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6e1e:	eeb0 0a48 	vmov.f32	s0, s16
   d6e22:	eef0 0a68 	vmov.f32	s1, s17
   d6e26:	b00b      	add	sp, #44	; 0x2c
   d6e28:	ecbd 8b02 	vpop	{d8}
   d6e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6e30:	2200      	movs	r2, #0
   d6e32:	2300      	movs	r3, #0
   d6e34:	4610      	mov	r0, r2
   d6e36:	4619      	mov	r1, r3
   d6e38:	f000 fc34 	bl	d76a4 <__aeabi_ddiv>
   d6e3c:	f1b8 0f02 	cmp.w	r8, #2
   d6e40:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d6e44:	d1de      	bne.n	d6e04 <fmod+0x74>
   d6e46:	f7fe fc53 	bl	d56f0 <__errno>
   d6e4a:	2321      	movs	r3, #33	; 0x21
   d6e4c:	6003      	str	r3, [r0, #0]
   d6e4e:	9b08      	ldr	r3, [sp, #32]
   d6e50:	2b00      	cmp	r3, #0
   d6e52:	d0dd      	beq.n	d6e10 <fmod+0x80>
   d6e54:	f7fe fc4c 	bl	d56f0 <__errno>
   d6e58:	9b08      	ldr	r3, [sp, #32]
   d6e5a:	6003      	str	r3, [r0, #0]
   d6e5c:	e7d8      	b.n	d6e10 <fmod+0x80>
   d6e5e:	bf00      	nop
   d6e60:	2003d5f0 	.word	0x2003d5f0
   d6e64:	000d9bc4 	.word	0x000d9bc4

000d6e68 <__ieee754_fmod>:
   d6e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e6c:	ec53 2b11 	vmov	r2, r3, d1
   d6e70:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   d6e74:	ea52 0009 	orrs.w	r0, r2, r9
   d6e78:	ec55 4b10 	vmov	r4, r5, d0
   d6e7c:	d025      	beq.n	d6eca <__ieee754_fmod+0x62>
   d6e7e:	f005 4600 	and.w	r6, r5, #2147483648	; 0x80000000
   d6e82:	488f      	ldr	r0, [pc, #572]	; (d70c0 <__ieee754_fmod+0x258>)
   d6e84:	ea85 0b06 	eor.w	fp, r5, r6
   d6e88:	4583      	cmp	fp, r0
   d6e8a:	dc1e      	bgt.n	d6eca <__ieee754_fmod+0x62>
   d6e8c:	4250      	negs	r0, r2
   d6e8e:	4310      	orrs	r0, r2
   d6e90:	f8df c244 	ldr.w	ip, [pc, #580]	; d70d8 <__ieee754_fmod+0x270>
   d6e94:	ea49 70d0 	orr.w	r0, r9, r0, lsr #31
   d6e98:	4560      	cmp	r0, ip
   d6e9a:	ee11 8a10 	vmov	r8, s2
   d6e9e:	d814      	bhi.n	d6eca <__ieee754_fmod+0x62>
   d6ea0:	45cb      	cmp	fp, r9
   d6ea2:	461f      	mov	r7, r3
   d6ea4:	ee10 aa10 	vmov	sl, s0
   d6ea8:	ee11 ea10 	vmov	lr, s2
   d6eac:	ee10 1a10 	vmov	r1, s0
   d6eb0:	dc17      	bgt.n	d6ee2 <__ieee754_fmod+0x7a>
   d6eb2:	db28      	blt.n	d6f06 <__ieee754_fmod+0x9e>
   d6eb4:	4294      	cmp	r4, r2
   d6eb6:	d326      	bcc.n	d6f06 <__ieee754_fmod+0x9e>
   d6eb8:	d113      	bne.n	d6ee2 <__ieee754_fmod+0x7a>
   d6eba:	4b82      	ldr	r3, [pc, #520]	; (d70c4 <__ieee754_fmod+0x25c>)
   d6ebc:	0ff6      	lsrs	r6, r6, #31
   d6ebe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   d6ec2:	ed93 0b00 	vldr	d0, [r3]
   d6ec6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6eca:	4620      	mov	r0, r4
   d6ecc:	4629      	mov	r1, r5
   d6ece:	f000 fabf 	bl	d7450 <__aeabi_dmul>
   d6ed2:	4602      	mov	r2, r0
   d6ed4:	460b      	mov	r3, r1
   d6ed6:	f000 fbe5 	bl	d76a4 <__aeabi_ddiv>
   d6eda:	ec41 0b10 	vmov	d0, r0, r1
   d6ede:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6ee2:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
   d6ee6:	da12      	bge.n	d6f0e <__ieee754_fmod+0xa6>
   d6ee8:	f1bb 0f00 	cmp.w	fp, #0
   d6eec:	f040 80a7 	bne.w	d703e <__ieee754_fmod+0x1d6>
   d6ef0:	f1ba 0f00 	cmp.w	sl, #0
   d6ef4:	4653      	mov	r3, sl
   d6ef6:	4874      	ldr	r0, [pc, #464]	; (d70c8 <__ieee754_fmod+0x260>)
   d6ef8:	dd0d      	ble.n	d6f16 <__ieee754_fmod+0xae>
   d6efa:	005b      	lsls	r3, r3, #1
   d6efc:	2b00      	cmp	r3, #0
   d6efe:	f100 30ff 	add.w	r0, r0, #4294967295
   d6f02:	dcfa      	bgt.n	d6efa <__ieee754_fmod+0x92>
   d6f04:	e007      	b.n	d6f16 <__ieee754_fmod+0xae>
   d6f06:	ec45 4b10 	vmov	d0, r4, r5
   d6f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f0e:	ea4f 502b 	mov.w	r0, fp, asr #20
   d6f12:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   d6f16:	f5b9 1f80 	cmp.w	r9, #1048576	; 0x100000
   d6f1a:	da0f      	bge.n	d6f3c <__ieee754_fmod+0xd4>
   d6f1c:	f1b9 0f00 	cmp.w	r9, #0
   d6f20:	f040 80a7 	bne.w	d7072 <__ieee754_fmod+0x20a>
   d6f24:	f1b8 0f00 	cmp.w	r8, #0
   d6f28:	4643      	mov	r3, r8
   d6f2a:	f8df c19c 	ldr.w	ip, [pc, #412]	; d70c8 <__ieee754_fmod+0x260>
   d6f2e:	dd09      	ble.n	d6f44 <__ieee754_fmod+0xdc>
   d6f30:	005b      	lsls	r3, r3, #1
   d6f32:	2b00      	cmp	r3, #0
   d6f34:	f10c 3cff 	add.w	ip, ip, #4294967295
   d6f38:	dcfa      	bgt.n	d6f30 <__ieee754_fmod+0xc8>
   d6f3a:	e003      	b.n	d6f44 <__ieee754_fmod+0xdc>
   d6f3c:	ea4f 5c29 	mov.w	ip, r9, asr #20
   d6f40:	f2ac 3cff 	subw	ip, ip, #1023	; 0x3ff
   d6f44:	4b61      	ldr	r3, [pc, #388]	; (d70cc <__ieee754_fmod+0x264>)
   d6f46:	4298      	cmp	r0, r3
   d6f48:	db5b      	blt.n	d7002 <__ieee754_fmod+0x19a>
   d6f4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d6f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6f52:	4a5e      	ldr	r2, [pc, #376]	; (d70cc <__ieee754_fmod+0x264>)
   d6f54:	4594      	cmp	ip, r2
   d6f56:	db63      	blt.n	d7020 <__ieee754_fmod+0x1b8>
   d6f58:	f3c7 0513 	ubfx	r5, r7, #0, #20
   d6f5c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d6f60:	ebcc 0000 	rsb	r0, ip, r0
   d6f64:	e007      	b.n	d6f76 <__ieee754_fmod+0x10e>
   d6f66:	ea52 0304 	orrs.w	r3, r2, r4
   d6f6a:	d013      	beq.n	d6f94 <__ieee754_fmod+0x12c>
   d6f6c:	0fe3      	lsrs	r3, r4, #31
   d6f6e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   d6f72:	0061      	lsls	r1, r4, #1
   d6f74:	3801      	subs	r0, #1
   d6f76:	ebce 0401 	rsb	r4, lr, r1
   d6f7a:	1b5a      	subs	r2, r3, r5
   d6f7c:	b190      	cbz	r0, d6fa4 <__ieee754_fmod+0x13c>
   d6f7e:	4571      	cmp	r1, lr
   d6f80:	bf38      	it	cc
   d6f82:	f102 32ff 	addcc.w	r2, r2, #4294967295
   d6f86:	2a00      	cmp	r2, #0
   d6f88:	daed      	bge.n	d6f66 <__ieee754_fmod+0xfe>
   d6f8a:	0fca      	lsrs	r2, r1, #31
   d6f8c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d6f90:	0049      	lsls	r1, r1, #1
   d6f92:	e7ef      	b.n	d6f74 <__ieee754_fmod+0x10c>
   d6f94:	4b4b      	ldr	r3, [pc, #300]	; (d70c4 <__ieee754_fmod+0x25c>)
   d6f96:	0ff6      	lsrs	r6, r6, #31
   d6f98:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   d6f9c:	ed96 0b00 	vldr	d0, [r6]
   d6fa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6fa4:	4571      	cmp	r1, lr
   d6fa6:	4615      	mov	r5, r2
   d6fa8:	bf38      	it	cc
   d6faa:	f102 35ff 	addcc.w	r5, r2, #4294967295
   d6fae:	2d00      	cmp	r5, #0
   d6fb0:	bfac      	ite	ge
   d6fb2:	ebce 0101 	rsbge	r1, lr, r1
   d6fb6:	461d      	movlt	r5, r3
   d6fb8:	ea55 0301 	orrs.w	r3, r5, r1
   d6fbc:	d0ea      	beq.n	d6f94 <__ieee754_fmod+0x12c>
   d6fbe:	4a44      	ldr	r2, [pc, #272]	; (d70d0 <__ieee754_fmod+0x268>)
   d6fc0:	4295      	cmp	r5, r2
   d6fc2:	dc08      	bgt.n	d6fd6 <__ieee754_fmod+0x16e>
   d6fc4:	0fcb      	lsrs	r3, r1, #31
   d6fc6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
   d6fca:	4295      	cmp	r5, r2
   d6fcc:	f10c 3cff 	add.w	ip, ip, #4294967295
   d6fd0:	ea4f 0141 	mov.w	r1, r1, lsl #1
   d6fd4:	ddf6      	ble.n	d6fc4 <__ieee754_fmod+0x15c>
   d6fd6:	4b3d      	ldr	r3, [pc, #244]	; (d70cc <__ieee754_fmod+0x264>)
   d6fd8:	459c      	cmp	ip, r3
   d6fda:	da54      	bge.n	d7086 <__ieee754_fmod+0x21e>
   d6fdc:	4a3b      	ldr	r2, [pc, #236]	; (d70cc <__ieee754_fmod+0x264>)
   d6fde:	ebcc 0202 	rsb	r2, ip, r2
   d6fe2:	2a14      	cmp	r2, #20
   d6fe4:	dc5b      	bgt.n	d709e <__ieee754_fmod+0x236>
   d6fe6:	f1c2 0320 	rsb	r3, r2, #32
   d6fea:	fa05 f303 	lsl.w	r3, r5, r3
   d6fee:	40d1      	lsrs	r1, r2
   d6ff0:	430b      	orrs	r3, r1
   d6ff2:	4115      	asrs	r5, r2
   d6ff4:	ea45 0106 	orr.w	r1, r5, r6
   d6ff8:	4618      	mov	r0, r3
   d6ffa:	ec41 0b10 	vmov	d0, r0, r1
   d6ffe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7002:	4932      	ldr	r1, [pc, #200]	; (d70cc <__ieee754_fmod+0x264>)
   d7004:	1a09      	subs	r1, r1, r0
   d7006:	291f      	cmp	r1, #31
   d7008:	dc2d      	bgt.n	d7066 <__ieee754_fmod+0x1fe>
   d700a:	f1c1 0320 	rsb	r3, r1, #32
   d700e:	fa0b fb01 	lsl.w	fp, fp, r1
   d7012:	fa2a f303 	lsr.w	r3, sl, r3
   d7016:	ea43 030b 	orr.w	r3, r3, fp
   d701a:	fa0a f101 	lsl.w	r1, sl, r1
   d701e:	e798      	b.n	d6f52 <__ieee754_fmod+0xea>
   d7020:	4c2a      	ldr	r4, [pc, #168]	; (d70cc <__ieee754_fmod+0x264>)
   d7022:	ebcc 0404 	rsb	r4, ip, r4
   d7026:	2c1f      	cmp	r4, #31
   d7028:	dc15      	bgt.n	d7056 <__ieee754_fmod+0x1ee>
   d702a:	f1c4 0220 	rsb	r2, r4, #32
   d702e:	fa09 f504 	lsl.w	r5, r9, r4
   d7032:	fa28 f202 	lsr.w	r2, r8, r2
   d7036:	4315      	orrs	r5, r2
   d7038:	fa08 fe04 	lsl.w	lr, r8, r4
   d703c:	e790      	b.n	d6f60 <__ieee754_fmod+0xf8>
   d703e:	ea4f 23cb 	mov.w	r3, fp, lsl #11
   d7042:	2b00      	cmp	r3, #0
   d7044:	4821      	ldr	r0, [pc, #132]	; (d70cc <__ieee754_fmod+0x264>)
   d7046:	f77f af66 	ble.w	d6f16 <__ieee754_fmod+0xae>
   d704a:	005b      	lsls	r3, r3, #1
   d704c:	2b00      	cmp	r3, #0
   d704e:	f100 30ff 	add.w	r0, r0, #4294967295
   d7052:	dcfa      	bgt.n	d704a <__ieee754_fmod+0x1e2>
   d7054:	e75f      	b.n	d6f16 <__ieee754_fmod+0xae>
   d7056:	4d1f      	ldr	r5, [pc, #124]	; (d70d4 <__ieee754_fmod+0x26c>)
   d7058:	ebcc 0505 	rsb	r5, ip, r5
   d705c:	fa08 f505 	lsl.w	r5, r8, r5
   d7060:	f04f 0e00 	mov.w	lr, #0
   d7064:	e77c      	b.n	d6f60 <__ieee754_fmod+0xf8>
   d7066:	4b1b      	ldr	r3, [pc, #108]	; (d70d4 <__ieee754_fmod+0x26c>)
   d7068:	1a1b      	subs	r3, r3, r0
   d706a:	fa0a f303 	lsl.w	r3, sl, r3
   d706e:	2100      	movs	r1, #0
   d7070:	e76f      	b.n	d6f52 <__ieee754_fmod+0xea>
   d7072:	f8df c058 	ldr.w	ip, [pc, #88]	; d70cc <__ieee754_fmod+0x264>
   d7076:	ea4f 23c9 	mov.w	r3, r9, lsl #11
   d707a:	005b      	lsls	r3, r3, #1
   d707c:	2b00      	cmp	r3, #0
   d707e:	f10c 3cff 	add.w	ip, ip, #4294967295
   d7082:	dcfa      	bgt.n	d707a <__ieee754_fmod+0x212>
   d7084:	e75e      	b.n	d6f44 <__ieee754_fmod+0xdc>
   d7086:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d708a:	432e      	orrs	r6, r5
   d708c:	f20c 3cff 	addw	ip, ip, #1023	; 0x3ff
   d7090:	ea46 530c 	orr.w	r3, r6, ip, lsl #20
   d7094:	460a      	mov	r2, r1
   d7096:	ec43 2b10 	vmov	d0, r2, r3
   d709a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d709e:	2a1f      	cmp	r2, #31
   d70a0:	dc07      	bgt.n	d70b2 <__ieee754_fmod+0x24a>
   d70a2:	f1c2 0320 	rsb	r3, r2, #32
   d70a6:	409d      	lsls	r5, r3
   d70a8:	40d1      	lsrs	r1, r2
   d70aa:	ea45 0301 	orr.w	r3, r5, r1
   d70ae:	4635      	mov	r5, r6
   d70b0:	e7a0      	b.n	d6ff4 <__ieee754_fmod+0x18c>
   d70b2:	4b08      	ldr	r3, [pc, #32]	; (d70d4 <__ieee754_fmod+0x26c>)
   d70b4:	ebcc 0303 	rsb	r3, ip, r3
   d70b8:	fa45 f303 	asr.w	r3, r5, r3
   d70bc:	4635      	mov	r5, r6
   d70be:	e799      	b.n	d6ff4 <__ieee754_fmod+0x18c>
   d70c0:	7fefffff 	.word	0x7fefffff
   d70c4:	000d9bd0 	.word	0x000d9bd0
   d70c8:	fffffbed 	.word	0xfffffbed
   d70cc:	fffffc02 	.word	0xfffffc02
   d70d0:	000fffff 	.word	0x000fffff
   d70d4:	fffffbe2 	.word	0xfffffbe2
   d70d8:	7ff00000 	.word	0x7ff00000

000d70dc <matherr>:
   d70dc:	2000      	movs	r0, #0
   d70de:	4770      	bx	lr

000d70e0 <__aeabi_drsub>:
   d70e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d70e4:	e002      	b.n	d70ec <__adddf3>
   d70e6:	bf00      	nop

000d70e8 <__aeabi_dsub>:
   d70e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d70ec <__adddf3>:
   d70ec:	b530      	push	{r4, r5, lr}
   d70ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d70f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d70f6:	ea94 0f05 	teq	r4, r5
   d70fa:	bf08      	it	eq
   d70fc:	ea90 0f02 	teqeq	r0, r2
   d7100:	bf1f      	itttt	ne
   d7102:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7106:	ea55 0c02 	orrsne.w	ip, r5, r2
   d710a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d710e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7112:	f000 80e2 	beq.w	d72da <__adddf3+0x1ee>
   d7116:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d711a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d711e:	bfb8      	it	lt
   d7120:	426d      	neglt	r5, r5
   d7122:	dd0c      	ble.n	d713e <__adddf3+0x52>
   d7124:	442c      	add	r4, r5
   d7126:	ea80 0202 	eor.w	r2, r0, r2
   d712a:	ea81 0303 	eor.w	r3, r1, r3
   d712e:	ea82 0000 	eor.w	r0, r2, r0
   d7132:	ea83 0101 	eor.w	r1, r3, r1
   d7136:	ea80 0202 	eor.w	r2, r0, r2
   d713a:	ea81 0303 	eor.w	r3, r1, r3
   d713e:	2d36      	cmp	r5, #54	; 0x36
   d7140:	bf88      	it	hi
   d7142:	bd30      	pophi	{r4, r5, pc}
   d7144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7148:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d714c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7154:	d002      	beq.n	d715c <__adddf3+0x70>
   d7156:	4240      	negs	r0, r0
   d7158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d715c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7160:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7168:	d002      	beq.n	d7170 <__adddf3+0x84>
   d716a:	4252      	negs	r2, r2
   d716c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7170:	ea94 0f05 	teq	r4, r5
   d7174:	f000 80a7 	beq.w	d72c6 <__adddf3+0x1da>
   d7178:	f1a4 0401 	sub.w	r4, r4, #1
   d717c:	f1d5 0e20 	rsbs	lr, r5, #32
   d7180:	db0d      	blt.n	d719e <__adddf3+0xb2>
   d7182:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7186:	fa22 f205 	lsr.w	r2, r2, r5
   d718a:	1880      	adds	r0, r0, r2
   d718c:	f141 0100 	adc.w	r1, r1, #0
   d7190:	fa03 f20e 	lsl.w	r2, r3, lr
   d7194:	1880      	adds	r0, r0, r2
   d7196:	fa43 f305 	asr.w	r3, r3, r5
   d719a:	4159      	adcs	r1, r3
   d719c:	e00e      	b.n	d71bc <__adddf3+0xd0>
   d719e:	f1a5 0520 	sub.w	r5, r5, #32
   d71a2:	f10e 0e20 	add.w	lr, lr, #32
   d71a6:	2a01      	cmp	r2, #1
   d71a8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d71ac:	bf28      	it	cs
   d71ae:	f04c 0c02 	orrcs.w	ip, ip, #2
   d71b2:	fa43 f305 	asr.w	r3, r3, r5
   d71b6:	18c0      	adds	r0, r0, r3
   d71b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d71bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d71c0:	d507      	bpl.n	d71d2 <__adddf3+0xe6>
   d71c2:	f04f 0e00 	mov.w	lr, #0
   d71c6:	f1dc 0c00 	rsbs	ip, ip, #0
   d71ca:	eb7e 0000 	sbcs.w	r0, lr, r0
   d71ce:	eb6e 0101 	sbc.w	r1, lr, r1
   d71d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d71d6:	d31b      	bcc.n	d7210 <__adddf3+0x124>
   d71d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d71dc:	d30c      	bcc.n	d71f8 <__adddf3+0x10c>
   d71de:	0849      	lsrs	r1, r1, #1
   d71e0:	ea5f 0030 	movs.w	r0, r0, rrx
   d71e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d71e8:	f104 0401 	add.w	r4, r4, #1
   d71ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d71f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d71f4:	f080 809a 	bcs.w	d732c <__adddf3+0x240>
   d71f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d71fc:	bf08      	it	eq
   d71fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7202:	f150 0000 	adcs.w	r0, r0, #0
   d7206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d720a:	ea41 0105 	orr.w	r1, r1, r5
   d720e:	bd30      	pop	{r4, r5, pc}
   d7210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7214:	4140      	adcs	r0, r0
   d7216:	eb41 0101 	adc.w	r1, r1, r1
   d721a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d721e:	f1a4 0401 	sub.w	r4, r4, #1
   d7222:	d1e9      	bne.n	d71f8 <__adddf3+0x10c>
   d7224:	f091 0f00 	teq	r1, #0
   d7228:	bf04      	itt	eq
   d722a:	4601      	moveq	r1, r0
   d722c:	2000      	moveq	r0, #0
   d722e:	fab1 f381 	clz	r3, r1
   d7232:	bf08      	it	eq
   d7234:	3320      	addeq	r3, #32
   d7236:	f1a3 030b 	sub.w	r3, r3, #11
   d723a:	f1b3 0220 	subs.w	r2, r3, #32
   d723e:	da0c      	bge.n	d725a <__adddf3+0x16e>
   d7240:	320c      	adds	r2, #12
   d7242:	dd08      	ble.n	d7256 <__adddf3+0x16a>
   d7244:	f102 0c14 	add.w	ip, r2, #20
   d7248:	f1c2 020c 	rsb	r2, r2, #12
   d724c:	fa01 f00c 	lsl.w	r0, r1, ip
   d7250:	fa21 f102 	lsr.w	r1, r1, r2
   d7254:	e00c      	b.n	d7270 <__adddf3+0x184>
   d7256:	f102 0214 	add.w	r2, r2, #20
   d725a:	bfd8      	it	le
   d725c:	f1c2 0c20 	rsble	ip, r2, #32
   d7260:	fa01 f102 	lsl.w	r1, r1, r2
   d7264:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7268:	bfdc      	itt	le
   d726a:	ea41 010c 	orrle.w	r1, r1, ip
   d726e:	4090      	lslle	r0, r2
   d7270:	1ae4      	subs	r4, r4, r3
   d7272:	bfa2      	ittt	ge
   d7274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7278:	4329      	orrge	r1, r5
   d727a:	bd30      	popge	{r4, r5, pc}
   d727c:	ea6f 0404 	mvn.w	r4, r4
   d7280:	3c1f      	subs	r4, #31
   d7282:	da1c      	bge.n	d72be <__adddf3+0x1d2>
   d7284:	340c      	adds	r4, #12
   d7286:	dc0e      	bgt.n	d72a6 <__adddf3+0x1ba>
   d7288:	f104 0414 	add.w	r4, r4, #20
   d728c:	f1c4 0220 	rsb	r2, r4, #32
   d7290:	fa20 f004 	lsr.w	r0, r0, r4
   d7294:	fa01 f302 	lsl.w	r3, r1, r2
   d7298:	ea40 0003 	orr.w	r0, r0, r3
   d729c:	fa21 f304 	lsr.w	r3, r1, r4
   d72a0:	ea45 0103 	orr.w	r1, r5, r3
   d72a4:	bd30      	pop	{r4, r5, pc}
   d72a6:	f1c4 040c 	rsb	r4, r4, #12
   d72aa:	f1c4 0220 	rsb	r2, r4, #32
   d72ae:	fa20 f002 	lsr.w	r0, r0, r2
   d72b2:	fa01 f304 	lsl.w	r3, r1, r4
   d72b6:	ea40 0003 	orr.w	r0, r0, r3
   d72ba:	4629      	mov	r1, r5
   d72bc:	bd30      	pop	{r4, r5, pc}
   d72be:	fa21 f004 	lsr.w	r0, r1, r4
   d72c2:	4629      	mov	r1, r5
   d72c4:	bd30      	pop	{r4, r5, pc}
   d72c6:	f094 0f00 	teq	r4, #0
   d72ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d72ce:	bf06      	itte	eq
   d72d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d72d4:	3401      	addeq	r4, #1
   d72d6:	3d01      	subne	r5, #1
   d72d8:	e74e      	b.n	d7178 <__adddf3+0x8c>
   d72da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d72de:	bf18      	it	ne
   d72e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d72e4:	d029      	beq.n	d733a <__adddf3+0x24e>
   d72e6:	ea94 0f05 	teq	r4, r5
   d72ea:	bf08      	it	eq
   d72ec:	ea90 0f02 	teqeq	r0, r2
   d72f0:	d005      	beq.n	d72fe <__adddf3+0x212>
   d72f2:	ea54 0c00 	orrs.w	ip, r4, r0
   d72f6:	bf04      	itt	eq
   d72f8:	4619      	moveq	r1, r3
   d72fa:	4610      	moveq	r0, r2
   d72fc:	bd30      	pop	{r4, r5, pc}
   d72fe:	ea91 0f03 	teq	r1, r3
   d7302:	bf1e      	ittt	ne
   d7304:	2100      	movne	r1, #0
   d7306:	2000      	movne	r0, #0
   d7308:	bd30      	popne	{r4, r5, pc}
   d730a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d730e:	d105      	bne.n	d731c <__adddf3+0x230>
   d7310:	0040      	lsls	r0, r0, #1
   d7312:	4149      	adcs	r1, r1
   d7314:	bf28      	it	cs
   d7316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d731a:	bd30      	pop	{r4, r5, pc}
   d731c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7320:	bf3c      	itt	cc
   d7322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7326:	bd30      	popcc	{r4, r5, pc}
   d7328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d732c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7334:	f04f 0000 	mov.w	r0, #0
   d7338:	bd30      	pop	{r4, r5, pc}
   d733a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d733e:	bf1a      	itte	ne
   d7340:	4619      	movne	r1, r3
   d7342:	4610      	movne	r0, r2
   d7344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7348:	bf1c      	itt	ne
   d734a:	460b      	movne	r3, r1
   d734c:	4602      	movne	r2, r0
   d734e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7352:	bf06      	itte	eq
   d7354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7358:	ea91 0f03 	teqeq	r1, r3
   d735c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7360:	bd30      	pop	{r4, r5, pc}
   d7362:	bf00      	nop

000d7364 <__aeabi_ui2d>:
   d7364:	f090 0f00 	teq	r0, #0
   d7368:	bf04      	itt	eq
   d736a:	2100      	moveq	r1, #0
   d736c:	4770      	bxeq	lr
   d736e:	b530      	push	{r4, r5, lr}
   d7370:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7374:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7378:	f04f 0500 	mov.w	r5, #0
   d737c:	f04f 0100 	mov.w	r1, #0
   d7380:	e750      	b.n	d7224 <__adddf3+0x138>
   d7382:	bf00      	nop

000d7384 <__aeabi_i2d>:
   d7384:	f090 0f00 	teq	r0, #0
   d7388:	bf04      	itt	eq
   d738a:	2100      	moveq	r1, #0
   d738c:	4770      	bxeq	lr
   d738e:	b530      	push	{r4, r5, lr}
   d7390:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7394:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d739c:	bf48      	it	mi
   d739e:	4240      	negmi	r0, r0
   d73a0:	f04f 0100 	mov.w	r1, #0
   d73a4:	e73e      	b.n	d7224 <__adddf3+0x138>
   d73a6:	bf00      	nop

000d73a8 <__aeabi_f2d>:
   d73a8:	0042      	lsls	r2, r0, #1
   d73aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d73ae:	ea4f 0131 	mov.w	r1, r1, rrx
   d73b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d73b6:	bf1f      	itttt	ne
   d73b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d73bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d73c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d73c4:	4770      	bxne	lr
   d73c6:	f092 0f00 	teq	r2, #0
   d73ca:	bf14      	ite	ne
   d73cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d73d0:	4770      	bxeq	lr
   d73d2:	b530      	push	{r4, r5, lr}
   d73d4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d73d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d73dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d73e0:	e720      	b.n	d7224 <__adddf3+0x138>
   d73e2:	bf00      	nop

000d73e4 <__aeabi_ul2d>:
   d73e4:	ea50 0201 	orrs.w	r2, r0, r1
   d73e8:	bf08      	it	eq
   d73ea:	4770      	bxeq	lr
   d73ec:	b530      	push	{r4, r5, lr}
   d73ee:	f04f 0500 	mov.w	r5, #0
   d73f2:	e00a      	b.n	d740a <__aeabi_l2d+0x16>

000d73f4 <__aeabi_l2d>:
   d73f4:	ea50 0201 	orrs.w	r2, r0, r1
   d73f8:	bf08      	it	eq
   d73fa:	4770      	bxeq	lr
   d73fc:	b530      	push	{r4, r5, lr}
   d73fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7402:	d502      	bpl.n	d740a <__aeabi_l2d+0x16>
   d7404:	4240      	negs	r0, r0
   d7406:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d740a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d740e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7412:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7416:	f43f aedc 	beq.w	d71d2 <__adddf3+0xe6>
   d741a:	f04f 0203 	mov.w	r2, #3
   d741e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7422:	bf18      	it	ne
   d7424:	3203      	addne	r2, #3
   d7426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d742a:	bf18      	it	ne
   d742c:	3203      	addne	r2, #3
   d742e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7432:	f1c2 0320 	rsb	r3, r2, #32
   d7436:	fa00 fc03 	lsl.w	ip, r0, r3
   d743a:	fa20 f002 	lsr.w	r0, r0, r2
   d743e:	fa01 fe03 	lsl.w	lr, r1, r3
   d7442:	ea40 000e 	orr.w	r0, r0, lr
   d7446:	fa21 f102 	lsr.w	r1, r1, r2
   d744a:	4414      	add	r4, r2
   d744c:	e6c1      	b.n	d71d2 <__adddf3+0xe6>
   d744e:	bf00      	nop

000d7450 <__aeabi_dmul>:
   d7450:	b570      	push	{r4, r5, r6, lr}
   d7452:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7456:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d745a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d745e:	bf1d      	ittte	ne
   d7460:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7464:	ea94 0f0c 	teqne	r4, ip
   d7468:	ea95 0f0c 	teqne	r5, ip
   d746c:	f000 f8de 	bleq	d762c <__aeabi_dmul+0x1dc>
   d7470:	442c      	add	r4, r5
   d7472:	ea81 0603 	eor.w	r6, r1, r3
   d7476:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d747a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d747e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7482:	bf18      	it	ne
   d7484:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7488:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d748c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7490:	d038      	beq.n	d7504 <__aeabi_dmul+0xb4>
   d7492:	fba0 ce02 	umull	ip, lr, r0, r2
   d7496:	f04f 0500 	mov.w	r5, #0
   d749a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d749e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d74a2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d74a6:	f04f 0600 	mov.w	r6, #0
   d74aa:	fbe1 5603 	umlal	r5, r6, r1, r3
   d74ae:	f09c 0f00 	teq	ip, #0
   d74b2:	bf18      	it	ne
   d74b4:	f04e 0e01 	orrne.w	lr, lr, #1
   d74b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d74bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d74c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d74c4:	d204      	bcs.n	d74d0 <__aeabi_dmul+0x80>
   d74c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d74ca:	416d      	adcs	r5, r5
   d74cc:	eb46 0606 	adc.w	r6, r6, r6
   d74d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d74d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d74d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d74dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d74e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d74e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d74e8:	bf88      	it	hi
   d74ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d74ee:	d81e      	bhi.n	d752e <__aeabi_dmul+0xde>
   d74f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d74f4:	bf08      	it	eq
   d74f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d74fa:	f150 0000 	adcs.w	r0, r0, #0
   d74fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7502:	bd70      	pop	{r4, r5, r6, pc}
   d7504:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7508:	ea46 0101 	orr.w	r1, r6, r1
   d750c:	ea40 0002 	orr.w	r0, r0, r2
   d7510:	ea81 0103 	eor.w	r1, r1, r3
   d7514:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7518:	bfc2      	ittt	gt
   d751a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d751e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7522:	bd70      	popgt	{r4, r5, r6, pc}
   d7524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7528:	f04f 0e00 	mov.w	lr, #0
   d752c:	3c01      	subs	r4, #1
   d752e:	f300 80ab 	bgt.w	d7688 <__aeabi_dmul+0x238>
   d7532:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7536:	bfde      	ittt	le
   d7538:	2000      	movle	r0, #0
   d753a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d753e:	bd70      	pople	{r4, r5, r6, pc}
   d7540:	f1c4 0400 	rsb	r4, r4, #0
   d7544:	3c20      	subs	r4, #32
   d7546:	da35      	bge.n	d75b4 <__aeabi_dmul+0x164>
   d7548:	340c      	adds	r4, #12
   d754a:	dc1b      	bgt.n	d7584 <__aeabi_dmul+0x134>
   d754c:	f104 0414 	add.w	r4, r4, #20
   d7550:	f1c4 0520 	rsb	r5, r4, #32
   d7554:	fa00 f305 	lsl.w	r3, r0, r5
   d7558:	fa20 f004 	lsr.w	r0, r0, r4
   d755c:	fa01 f205 	lsl.w	r2, r1, r5
   d7560:	ea40 0002 	orr.w	r0, r0, r2
   d7564:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d756c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7570:	fa21 f604 	lsr.w	r6, r1, r4
   d7574:	eb42 0106 	adc.w	r1, r2, r6
   d7578:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d757c:	bf08      	it	eq
   d757e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7582:	bd70      	pop	{r4, r5, r6, pc}
   d7584:	f1c4 040c 	rsb	r4, r4, #12
   d7588:	f1c4 0520 	rsb	r5, r4, #32
   d758c:	fa00 f304 	lsl.w	r3, r0, r4
   d7590:	fa20 f005 	lsr.w	r0, r0, r5
   d7594:	fa01 f204 	lsl.w	r2, r1, r4
   d7598:	ea40 0002 	orr.w	r0, r0, r2
   d759c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d75a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d75a4:	f141 0100 	adc.w	r1, r1, #0
   d75a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d75ac:	bf08      	it	eq
   d75ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d75b2:	bd70      	pop	{r4, r5, r6, pc}
   d75b4:	f1c4 0520 	rsb	r5, r4, #32
   d75b8:	fa00 f205 	lsl.w	r2, r0, r5
   d75bc:	ea4e 0e02 	orr.w	lr, lr, r2
   d75c0:	fa20 f304 	lsr.w	r3, r0, r4
   d75c4:	fa01 f205 	lsl.w	r2, r1, r5
   d75c8:	ea43 0302 	orr.w	r3, r3, r2
   d75cc:	fa21 f004 	lsr.w	r0, r1, r4
   d75d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d75d4:	fa21 f204 	lsr.w	r2, r1, r4
   d75d8:	ea20 0002 	bic.w	r0, r0, r2
   d75dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d75e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d75e4:	bf08      	it	eq
   d75e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d75ea:	bd70      	pop	{r4, r5, r6, pc}
   d75ec:	f094 0f00 	teq	r4, #0
   d75f0:	d10f      	bne.n	d7612 <__aeabi_dmul+0x1c2>
   d75f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d75f6:	0040      	lsls	r0, r0, #1
   d75f8:	eb41 0101 	adc.w	r1, r1, r1
   d75fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7600:	bf08      	it	eq
   d7602:	3c01      	subeq	r4, #1
   d7604:	d0f7      	beq.n	d75f6 <__aeabi_dmul+0x1a6>
   d7606:	ea41 0106 	orr.w	r1, r1, r6
   d760a:	f095 0f00 	teq	r5, #0
   d760e:	bf18      	it	ne
   d7610:	4770      	bxne	lr
   d7612:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7616:	0052      	lsls	r2, r2, #1
   d7618:	eb43 0303 	adc.w	r3, r3, r3
   d761c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7620:	bf08      	it	eq
   d7622:	3d01      	subeq	r5, #1
   d7624:	d0f7      	beq.n	d7616 <__aeabi_dmul+0x1c6>
   d7626:	ea43 0306 	orr.w	r3, r3, r6
   d762a:	4770      	bx	lr
   d762c:	ea94 0f0c 	teq	r4, ip
   d7630:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7634:	bf18      	it	ne
   d7636:	ea95 0f0c 	teqne	r5, ip
   d763a:	d00c      	beq.n	d7656 <__aeabi_dmul+0x206>
   d763c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7640:	bf18      	it	ne
   d7642:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7646:	d1d1      	bne.n	d75ec <__aeabi_dmul+0x19c>
   d7648:	ea81 0103 	eor.w	r1, r1, r3
   d764c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7650:	f04f 0000 	mov.w	r0, #0
   d7654:	bd70      	pop	{r4, r5, r6, pc}
   d7656:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d765a:	bf06      	itte	eq
   d765c:	4610      	moveq	r0, r2
   d765e:	4619      	moveq	r1, r3
   d7660:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7664:	d019      	beq.n	d769a <__aeabi_dmul+0x24a>
   d7666:	ea94 0f0c 	teq	r4, ip
   d766a:	d102      	bne.n	d7672 <__aeabi_dmul+0x222>
   d766c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7670:	d113      	bne.n	d769a <__aeabi_dmul+0x24a>
   d7672:	ea95 0f0c 	teq	r5, ip
   d7676:	d105      	bne.n	d7684 <__aeabi_dmul+0x234>
   d7678:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d767c:	bf1c      	itt	ne
   d767e:	4610      	movne	r0, r2
   d7680:	4619      	movne	r1, r3
   d7682:	d10a      	bne.n	d769a <__aeabi_dmul+0x24a>
   d7684:	ea81 0103 	eor.w	r1, r1, r3
   d7688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d768c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7694:	f04f 0000 	mov.w	r0, #0
   d7698:	bd70      	pop	{r4, r5, r6, pc}
   d769a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d769e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d76a2:	bd70      	pop	{r4, r5, r6, pc}

000d76a4 <__aeabi_ddiv>:
   d76a4:	b570      	push	{r4, r5, r6, lr}
   d76a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d76aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d76ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d76b2:	bf1d      	ittte	ne
   d76b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d76b8:	ea94 0f0c 	teqne	r4, ip
   d76bc:	ea95 0f0c 	teqne	r5, ip
   d76c0:	f000 f8a7 	bleq	d7812 <__aeabi_ddiv+0x16e>
   d76c4:	eba4 0405 	sub.w	r4, r4, r5
   d76c8:	ea81 0e03 	eor.w	lr, r1, r3
   d76cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d76d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d76d4:	f000 8088 	beq.w	d77e8 <__aeabi_ddiv+0x144>
   d76d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d76dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d76e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d76e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d76e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d76ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d76f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d76f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d76f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d76fc:	429d      	cmp	r5, r3
   d76fe:	bf08      	it	eq
   d7700:	4296      	cmpeq	r6, r2
   d7702:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7706:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d770a:	d202      	bcs.n	d7712 <__aeabi_ddiv+0x6e>
   d770c:	085b      	lsrs	r3, r3, #1
   d770e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7712:	1ab6      	subs	r6, r6, r2
   d7714:	eb65 0503 	sbc.w	r5, r5, r3
   d7718:	085b      	lsrs	r3, r3, #1
   d771a:	ea4f 0232 	mov.w	r2, r2, rrx
   d771e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7722:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7726:	ebb6 0e02 	subs.w	lr, r6, r2
   d772a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d772e:	bf22      	ittt	cs
   d7730:	1ab6      	subcs	r6, r6, r2
   d7732:	4675      	movcs	r5, lr
   d7734:	ea40 000c 	orrcs.w	r0, r0, ip
   d7738:	085b      	lsrs	r3, r3, #1
   d773a:	ea4f 0232 	mov.w	r2, r2, rrx
   d773e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7742:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7746:	bf22      	ittt	cs
   d7748:	1ab6      	subcs	r6, r6, r2
   d774a:	4675      	movcs	r5, lr
   d774c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7750:	085b      	lsrs	r3, r3, #1
   d7752:	ea4f 0232 	mov.w	r2, r2, rrx
   d7756:	ebb6 0e02 	subs.w	lr, r6, r2
   d775a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d775e:	bf22      	ittt	cs
   d7760:	1ab6      	subcs	r6, r6, r2
   d7762:	4675      	movcs	r5, lr
   d7764:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7768:	085b      	lsrs	r3, r3, #1
   d776a:	ea4f 0232 	mov.w	r2, r2, rrx
   d776e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7772:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7776:	bf22      	ittt	cs
   d7778:	1ab6      	subcs	r6, r6, r2
   d777a:	4675      	movcs	r5, lr
   d777c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7780:	ea55 0e06 	orrs.w	lr, r5, r6
   d7784:	d018      	beq.n	d77b8 <__aeabi_ddiv+0x114>
   d7786:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d778a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d778e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7792:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7796:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d779a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d779e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d77a2:	d1c0      	bne.n	d7726 <__aeabi_ddiv+0x82>
   d77a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d77a8:	d10b      	bne.n	d77c2 <__aeabi_ddiv+0x11e>
   d77aa:	ea41 0100 	orr.w	r1, r1, r0
   d77ae:	f04f 0000 	mov.w	r0, #0
   d77b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d77b6:	e7b6      	b.n	d7726 <__aeabi_ddiv+0x82>
   d77b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d77bc:	bf04      	itt	eq
   d77be:	4301      	orreq	r1, r0
   d77c0:	2000      	moveq	r0, #0
   d77c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d77c6:	bf88      	it	hi
   d77c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d77cc:	f63f aeaf 	bhi.w	d752e <__aeabi_dmul+0xde>
   d77d0:	ebb5 0c03 	subs.w	ip, r5, r3
   d77d4:	bf04      	itt	eq
   d77d6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d77da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d77de:	f150 0000 	adcs.w	r0, r0, #0
   d77e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d77e6:	bd70      	pop	{r4, r5, r6, pc}
   d77e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d77ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d77f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d77f4:	bfc2      	ittt	gt
   d77f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d77fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d77fe:	bd70      	popgt	{r4, r5, r6, pc}
   d7800:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7804:	f04f 0e00 	mov.w	lr, #0
   d7808:	3c01      	subs	r4, #1
   d780a:	e690      	b.n	d752e <__aeabi_dmul+0xde>
   d780c:	ea45 0e06 	orr.w	lr, r5, r6
   d7810:	e68d      	b.n	d752e <__aeabi_dmul+0xde>
   d7812:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7816:	ea94 0f0c 	teq	r4, ip
   d781a:	bf08      	it	eq
   d781c:	ea95 0f0c 	teqeq	r5, ip
   d7820:	f43f af3b 	beq.w	d769a <__aeabi_dmul+0x24a>
   d7824:	ea94 0f0c 	teq	r4, ip
   d7828:	d10a      	bne.n	d7840 <__aeabi_ddiv+0x19c>
   d782a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d782e:	f47f af34 	bne.w	d769a <__aeabi_dmul+0x24a>
   d7832:	ea95 0f0c 	teq	r5, ip
   d7836:	f47f af25 	bne.w	d7684 <__aeabi_dmul+0x234>
   d783a:	4610      	mov	r0, r2
   d783c:	4619      	mov	r1, r3
   d783e:	e72c      	b.n	d769a <__aeabi_dmul+0x24a>
   d7840:	ea95 0f0c 	teq	r5, ip
   d7844:	d106      	bne.n	d7854 <__aeabi_ddiv+0x1b0>
   d7846:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d784a:	f43f aefd 	beq.w	d7648 <__aeabi_dmul+0x1f8>
   d784e:	4610      	mov	r0, r2
   d7850:	4619      	mov	r1, r3
   d7852:	e722      	b.n	d769a <__aeabi_dmul+0x24a>
   d7854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7858:	bf18      	it	ne
   d785a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d785e:	f47f aec5 	bne.w	d75ec <__aeabi_dmul+0x19c>
   d7862:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7866:	f47f af0d 	bne.w	d7684 <__aeabi_dmul+0x234>
   d786a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d786e:	f47f aeeb 	bne.w	d7648 <__aeabi_dmul+0x1f8>
   d7872:	e712      	b.n	d769a <__aeabi_dmul+0x24a>

000d7874 <__gedf2>:
   d7874:	f04f 3cff 	mov.w	ip, #4294967295
   d7878:	e006      	b.n	d7888 <__cmpdf2+0x4>
   d787a:	bf00      	nop

000d787c <__ledf2>:
   d787c:	f04f 0c01 	mov.w	ip, #1
   d7880:	e002      	b.n	d7888 <__cmpdf2+0x4>
   d7882:	bf00      	nop

000d7884 <__cmpdf2>:
   d7884:	f04f 0c01 	mov.w	ip, #1
   d7888:	f84d cd04 	str.w	ip, [sp, #-4]!
   d788c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7890:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7894:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7898:	bf18      	it	ne
   d789a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d789e:	d01b      	beq.n	d78d8 <__cmpdf2+0x54>
   d78a0:	b001      	add	sp, #4
   d78a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d78a6:	bf0c      	ite	eq
   d78a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d78ac:	ea91 0f03 	teqne	r1, r3
   d78b0:	bf02      	ittt	eq
   d78b2:	ea90 0f02 	teqeq	r0, r2
   d78b6:	2000      	moveq	r0, #0
   d78b8:	4770      	bxeq	lr
   d78ba:	f110 0f00 	cmn.w	r0, #0
   d78be:	ea91 0f03 	teq	r1, r3
   d78c2:	bf58      	it	pl
   d78c4:	4299      	cmppl	r1, r3
   d78c6:	bf08      	it	eq
   d78c8:	4290      	cmpeq	r0, r2
   d78ca:	bf2c      	ite	cs
   d78cc:	17d8      	asrcs	r0, r3, #31
   d78ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d78d2:	f040 0001 	orr.w	r0, r0, #1
   d78d6:	4770      	bx	lr
   d78d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d78dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d78e0:	d102      	bne.n	d78e8 <__cmpdf2+0x64>
   d78e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d78e6:	d107      	bne.n	d78f8 <__cmpdf2+0x74>
   d78e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d78ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d78f0:	d1d6      	bne.n	d78a0 <__cmpdf2+0x1c>
   d78f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d78f6:	d0d3      	beq.n	d78a0 <__cmpdf2+0x1c>
   d78f8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d78fc:	4770      	bx	lr
   d78fe:	bf00      	nop

000d7900 <__aeabi_cdrcmple>:
   d7900:	4684      	mov	ip, r0
   d7902:	4610      	mov	r0, r2
   d7904:	4662      	mov	r2, ip
   d7906:	468c      	mov	ip, r1
   d7908:	4619      	mov	r1, r3
   d790a:	4663      	mov	r3, ip
   d790c:	e000      	b.n	d7910 <__aeabi_cdcmpeq>
   d790e:	bf00      	nop

000d7910 <__aeabi_cdcmpeq>:
   d7910:	b501      	push	{r0, lr}
   d7912:	f7ff ffb7 	bl	d7884 <__cmpdf2>
   d7916:	2800      	cmp	r0, #0
   d7918:	bf48      	it	mi
   d791a:	f110 0f00 	cmnmi.w	r0, #0
   d791e:	bd01      	pop	{r0, pc}

000d7920 <__aeabi_dcmpeq>:
   d7920:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7924:	f7ff fff4 	bl	d7910 <__aeabi_cdcmpeq>
   d7928:	bf0c      	ite	eq
   d792a:	2001      	moveq	r0, #1
   d792c:	2000      	movne	r0, #0
   d792e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7932:	bf00      	nop

000d7934 <__aeabi_dcmplt>:
   d7934:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7938:	f7ff ffea 	bl	d7910 <__aeabi_cdcmpeq>
   d793c:	bf34      	ite	cc
   d793e:	2001      	movcc	r0, #1
   d7940:	2000      	movcs	r0, #0
   d7942:	f85d fb08 	ldr.w	pc, [sp], #8
   d7946:	bf00      	nop

000d7948 <__aeabi_dcmple>:
   d7948:	f84d ed08 	str.w	lr, [sp, #-8]!
   d794c:	f7ff ffe0 	bl	d7910 <__aeabi_cdcmpeq>
   d7950:	bf94      	ite	ls
   d7952:	2001      	movls	r0, #1
   d7954:	2000      	movhi	r0, #0
   d7956:	f85d fb08 	ldr.w	pc, [sp], #8
   d795a:	bf00      	nop

000d795c <__aeabi_dcmpge>:
   d795c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7960:	f7ff ffce 	bl	d7900 <__aeabi_cdrcmple>
   d7964:	bf94      	ite	ls
   d7966:	2001      	movls	r0, #1
   d7968:	2000      	movhi	r0, #0
   d796a:	f85d fb08 	ldr.w	pc, [sp], #8
   d796e:	bf00      	nop

000d7970 <__aeabi_dcmpgt>:
   d7970:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7974:	f7ff ffc4 	bl	d7900 <__aeabi_cdrcmple>
   d7978:	bf34      	ite	cc
   d797a:	2001      	movcc	r0, #1
   d797c:	2000      	movcs	r0, #0
   d797e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7982:	bf00      	nop

000d7984 <__aeabi_dcmpun>:
   d7984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d798c:	d102      	bne.n	d7994 <__aeabi_dcmpun+0x10>
   d798e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7992:	d10a      	bne.n	d79aa <__aeabi_dcmpun+0x26>
   d7994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d799c:	d102      	bne.n	d79a4 <__aeabi_dcmpun+0x20>
   d799e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d79a2:	d102      	bne.n	d79aa <__aeabi_dcmpun+0x26>
   d79a4:	f04f 0000 	mov.w	r0, #0
   d79a8:	4770      	bx	lr
   d79aa:	f04f 0001 	mov.w	r0, #1
   d79ae:	4770      	bx	lr

000d79b0 <__aeabi_d2iz>:
   d79b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d79b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d79b8:	d215      	bcs.n	d79e6 <__aeabi_d2iz+0x36>
   d79ba:	d511      	bpl.n	d79e0 <__aeabi_d2iz+0x30>
   d79bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d79c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d79c4:	d912      	bls.n	d79ec <__aeabi_d2iz+0x3c>
   d79c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d79ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d79ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d79d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d79d6:	fa23 f002 	lsr.w	r0, r3, r2
   d79da:	bf18      	it	ne
   d79dc:	4240      	negne	r0, r0
   d79de:	4770      	bx	lr
   d79e0:	f04f 0000 	mov.w	r0, #0
   d79e4:	4770      	bx	lr
   d79e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d79ea:	d105      	bne.n	d79f8 <__aeabi_d2iz+0x48>
   d79ec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d79f0:	bf08      	it	eq
   d79f2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d79f6:	4770      	bx	lr
   d79f8:	f04f 0000 	mov.w	r0, #0
   d79fc:	4770      	bx	lr
   d79fe:	bf00      	nop

000d7a00 <__aeabi_d2uiz>:
   d7a00:	004a      	lsls	r2, r1, #1
   d7a02:	d211      	bcs.n	d7a28 <__aeabi_d2uiz+0x28>
   d7a04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7a08:	d211      	bcs.n	d7a2e <__aeabi_d2uiz+0x2e>
   d7a0a:	d50d      	bpl.n	d7a28 <__aeabi_d2uiz+0x28>
   d7a0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7a10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7a14:	d40e      	bmi.n	d7a34 <__aeabi_d2uiz+0x34>
   d7a16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7a1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7a1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7a22:	fa23 f002 	lsr.w	r0, r3, r2
   d7a26:	4770      	bx	lr
   d7a28:	f04f 0000 	mov.w	r0, #0
   d7a2c:	4770      	bx	lr
   d7a2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7a32:	d102      	bne.n	d7a3a <__aeabi_d2uiz+0x3a>
   d7a34:	f04f 30ff 	mov.w	r0, #4294967295
   d7a38:	4770      	bx	lr
   d7a3a:	f04f 0000 	mov.w	r0, #0
   d7a3e:	4770      	bx	lr

000d7a40 <__aeabi_d2f>:
   d7a40:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7a44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7a48:	bf24      	itt	cs
   d7a4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7a4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7a52:	d90d      	bls.n	d7a70 <__aeabi_d2f+0x30>
   d7a54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7a58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7a5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7a60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7a64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7a68:	bf08      	it	eq
   d7a6a:	f020 0001 	biceq.w	r0, r0, #1
   d7a6e:	4770      	bx	lr
   d7a70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7a74:	d121      	bne.n	d7aba <__aeabi_d2f+0x7a>
   d7a76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7a7a:	bfbc      	itt	lt
   d7a7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7a80:	4770      	bxlt	lr
   d7a82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7a86:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7a8a:	f1c2 0218 	rsb	r2, r2, #24
   d7a8e:	f1c2 0c20 	rsb	ip, r2, #32
   d7a92:	fa10 f30c 	lsls.w	r3, r0, ip
   d7a96:	fa20 f002 	lsr.w	r0, r0, r2
   d7a9a:	bf18      	it	ne
   d7a9c:	f040 0001 	orrne.w	r0, r0, #1
   d7aa0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7aa4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7aa8:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7aac:	ea40 000c 	orr.w	r0, r0, ip
   d7ab0:	fa23 f302 	lsr.w	r3, r3, r2
   d7ab4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7ab8:	e7cc      	b.n	d7a54 <__aeabi_d2f+0x14>
   d7aba:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7abe:	d107      	bne.n	d7ad0 <__aeabi_d2f+0x90>
   d7ac0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7ac4:	bf1e      	ittt	ne
   d7ac6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7aca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7ace:	4770      	bxne	lr
   d7ad0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7ad4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7ad8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7adc:	4770      	bx	lr
   d7ade:	bf00      	nop

000d7ae0 <atof>:
   d7ae0:	2100      	movs	r1, #0
   d7ae2:	f000 bec9 	b.w	d8878 <strtod>

000d7ae6 <atoi>:
   d7ae6:	220a      	movs	r2, #10
   d7ae8:	2100      	movs	r1, #0
   d7aea:	f000 bf53 	b.w	d8994 <strtol>

000d7aee <atol>:
   d7aee:	220a      	movs	r2, #10
   d7af0:	2100      	movs	r1, #0
   d7af2:	f000 bf4f 	b.w	d8994 <strtol>
	...

000d7af8 <__cxa_atexit>:
   d7af8:	b510      	push	{r4, lr}
   d7afa:	4c05      	ldr	r4, [pc, #20]	; (d7b10 <__cxa_atexit+0x18>)
   d7afc:	4613      	mov	r3, r2
   d7afe:	b12c      	cbz	r4, d7b0c <__cxa_atexit+0x14>
   d7b00:	460a      	mov	r2, r1
   d7b02:	4601      	mov	r1, r0
   d7b04:	2002      	movs	r0, #2
   d7b06:	f3af 8000 	nop.w
   d7b0a:	bd10      	pop	{r4, pc}
   d7b0c:	4620      	mov	r0, r4
   d7b0e:	bd10      	pop	{r4, pc}
   d7b10:	00000000 	.word	0x00000000

000d7b14 <_localeconv_r>:
   d7b14:	4800      	ldr	r0, [pc, #0]	; (d7b18 <_localeconv_r+0x4>)
   d7b16:	4770      	bx	lr
   d7b18:	2003d65c 	.word	0x2003d65c

000d7b1c <memcpy>:
   d7b1c:	b510      	push	{r4, lr}
   d7b1e:	1e43      	subs	r3, r0, #1
   d7b20:	440a      	add	r2, r1
   d7b22:	4291      	cmp	r1, r2
   d7b24:	d004      	beq.n	d7b30 <memcpy+0x14>
   d7b26:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7b2e:	e7f8      	b.n	d7b22 <memcpy+0x6>
   d7b30:	bd10      	pop	{r4, pc}

000d7b32 <memset>:
   d7b32:	4402      	add	r2, r0
   d7b34:	4603      	mov	r3, r0
   d7b36:	4293      	cmp	r3, r2
   d7b38:	d002      	beq.n	d7b40 <memset+0xe>
   d7b3a:	f803 1b01 	strb.w	r1, [r3], #1
   d7b3e:	e7fa      	b.n	d7b36 <memset+0x4>
   d7b40:	4770      	bx	lr

000d7b42 <strchr>:
   d7b42:	b2c9      	uxtb	r1, r1
   d7b44:	4603      	mov	r3, r0
   d7b46:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7b4a:	b11a      	cbz	r2, d7b54 <strchr+0x12>
   d7b4c:	4291      	cmp	r1, r2
   d7b4e:	d1f9      	bne.n	d7b44 <strchr+0x2>
   d7b50:	4618      	mov	r0, r3
   d7b52:	4770      	bx	lr
   d7b54:	2900      	cmp	r1, #0
   d7b56:	bf0c      	ite	eq
   d7b58:	4618      	moveq	r0, r3
   d7b5a:	2000      	movne	r0, #0
   d7b5c:	4770      	bx	lr

000d7b5e <strcpy>:
   d7b5e:	4603      	mov	r3, r0
   d7b60:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7b64:	f803 2b01 	strb.w	r2, [r3], #1
   d7b68:	2a00      	cmp	r2, #0
   d7b6a:	d1f9      	bne.n	d7b60 <strcpy+0x2>
   d7b6c:	4770      	bx	lr
	...

000d7b70 <strdup>:
   d7b70:	4b02      	ldr	r3, [pc, #8]	; (d7b7c <strdup+0xc>)
   d7b72:	4601      	mov	r1, r0
   d7b74:	6818      	ldr	r0, [r3, #0]
   d7b76:	f000 b803 	b.w	d7b80 <_strdup_r>
   d7b7a:	bf00      	nop
   d7b7c:	2003d658 	.word	0x2003d658

000d7b80 <_strdup_r>:
   d7b80:	b570      	push	{r4, r5, r6, lr}
   d7b82:	4606      	mov	r6, r0
   d7b84:	4608      	mov	r0, r1
   d7b86:	460c      	mov	r4, r1
   d7b88:	f000 f80d 	bl	d7ba6 <strlen>
   d7b8c:	1c45      	adds	r5, r0, #1
   d7b8e:	4629      	mov	r1, r5
   d7b90:	4630      	mov	r0, r6
   d7b92:	f7fd fda5 	bl	d56e0 <_malloc_r>
   d7b96:	4606      	mov	r6, r0
   d7b98:	b118      	cbz	r0, d7ba2 <_strdup_r+0x22>
   d7b9a:	462a      	mov	r2, r5
   d7b9c:	4621      	mov	r1, r4
   d7b9e:	f7ff ffbd 	bl	d7b1c <memcpy>
   d7ba2:	4630      	mov	r0, r6
   d7ba4:	bd70      	pop	{r4, r5, r6, pc}

000d7ba6 <strlen>:
   d7ba6:	4603      	mov	r3, r0
   d7ba8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7bac:	2a00      	cmp	r2, #0
   d7bae:	d1fb      	bne.n	d7ba8 <strlen+0x2>
   d7bb0:	1a18      	subs	r0, r3, r0
   d7bb2:	3801      	subs	r0, #1
   d7bb4:	4770      	bx	lr

000d7bb6 <strncmp>:
   d7bb6:	b530      	push	{r4, r5, lr}
   d7bb8:	b182      	cbz	r2, d7bdc <strncmp+0x26>
   d7bba:	1e45      	subs	r5, r0, #1
   d7bbc:	3901      	subs	r1, #1
   d7bbe:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7bc2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7bc6:	42a3      	cmp	r3, r4
   d7bc8:	d106      	bne.n	d7bd8 <strncmp+0x22>
   d7bca:	43ec      	mvns	r4, r5
   d7bcc:	4414      	add	r4, r2
   d7bce:	42e0      	cmn	r0, r4
   d7bd0:	d001      	beq.n	d7bd6 <strncmp+0x20>
   d7bd2:	2b00      	cmp	r3, #0
   d7bd4:	d1f3      	bne.n	d7bbe <strncmp+0x8>
   d7bd6:	461c      	mov	r4, r3
   d7bd8:	1b18      	subs	r0, r3, r4
   d7bda:	bd30      	pop	{r4, r5, pc}
   d7bdc:	4610      	mov	r0, r2
   d7bde:	bd30      	pop	{r4, r5, pc}

000d7be0 <strncpy>:
   d7be0:	b510      	push	{r4, lr}
   d7be2:	4603      	mov	r3, r0
   d7be4:	b142      	cbz	r2, d7bf8 <strncpy+0x18>
   d7be6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7bea:	f803 4b01 	strb.w	r4, [r3], #1
   d7bee:	3a01      	subs	r2, #1
   d7bf0:	2c00      	cmp	r4, #0
   d7bf2:	d1f7      	bne.n	d7be4 <strncpy+0x4>
   d7bf4:	441a      	add	r2, r3
   d7bf6:	e000      	b.n	d7bfa <strncpy+0x1a>
   d7bf8:	bd10      	pop	{r4, pc}
   d7bfa:	4293      	cmp	r3, r2
   d7bfc:	d002      	beq.n	d7c04 <strncpy+0x24>
   d7bfe:	f803 4b01 	strb.w	r4, [r3], #1
   d7c02:	e7fa      	b.n	d7bfa <strncpy+0x1a>
   d7c04:	bd10      	pop	{r4, pc}

000d7c06 <strstr>:
   d7c06:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7c08:	7803      	ldrb	r3, [r0, #0]
   d7c0a:	b963      	cbnz	r3, d7c26 <strstr+0x20>
   d7c0c:	780b      	ldrb	r3, [r1, #0]
   d7c0e:	2b00      	cmp	r3, #0
   d7c10:	bf18      	it	ne
   d7c12:	2000      	movne	r0, #0
   d7c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7c16:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d7c1a:	b162      	cbz	r2, d7c36 <strstr+0x30>
   d7c1c:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d7c20:	4297      	cmp	r7, r2
   d7c22:	4630      	mov	r0, r6
   d7c24:	d0f7      	beq.n	d7c16 <strstr+0x10>
   d7c26:	4603      	mov	r3, r0
   d7c28:	1c46      	adds	r6, r0, #1
   d7c2a:	7800      	ldrb	r0, [r0, #0]
   d7c2c:	b110      	cbz	r0, d7c34 <strstr+0x2e>
   d7c2e:	1e4d      	subs	r5, r1, #1
   d7c30:	1e5c      	subs	r4, r3, #1
   d7c32:	e7f0      	b.n	d7c16 <strstr+0x10>
   d7c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7c36:	4618      	mov	r0, r3
   d7c38:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7c3a <sulp>:
   d7c3a:	b570      	push	{r4, r5, r6, lr}
   d7c3c:	4604      	mov	r4, r0
   d7c3e:	460d      	mov	r5, r1
   d7c40:	ec45 4b10 	vmov	d0, r4, r5
   d7c44:	4616      	mov	r6, r2
   d7c46:	f001 fc93 	bl	d9570 <__ulp>
   d7c4a:	ec51 0b10 	vmov	r0, r1, d0
   d7c4e:	b17e      	cbz	r6, d7c70 <sulp+0x36>
   d7c50:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d7c54:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7c58:	2b00      	cmp	r3, #0
   d7c5a:	dd09      	ble.n	d7c70 <sulp+0x36>
   d7c5c:	051b      	lsls	r3, r3, #20
   d7c5e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d7c62:	2400      	movs	r4, #0
   d7c64:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d7c68:	4622      	mov	r2, r4
   d7c6a:	462b      	mov	r3, r5
   d7c6c:	f7ff fbf0 	bl	d7450 <__aeabi_dmul>
   d7c70:	bd70      	pop	{r4, r5, r6, pc}
   d7c72:	0000      	movs	r0, r0
   d7c74:	0000      	movs	r0, r0
	...

000d7c78 <_strtod_r>:
   d7c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7c7c:	b09d      	sub	sp, #116	; 0x74
   d7c7e:	2300      	movs	r3, #0
   d7c80:	9002      	str	r0, [sp, #8]
   d7c82:	460c      	mov	r4, r1
   d7c84:	9213      	str	r2, [sp, #76]	; 0x4c
   d7c86:	9318      	str	r3, [sp, #96]	; 0x60
   d7c88:	f04f 0a00 	mov.w	sl, #0
   d7c8c:	f04f 0b00 	mov.w	fp, #0
   d7c90:	9117      	str	r1, [sp, #92]	; 0x5c
   d7c92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7c94:	781a      	ldrb	r2, [r3, #0]
   d7c96:	2a0d      	cmp	r2, #13
   d7c98:	d805      	bhi.n	d7ca6 <_strtod_r+0x2e>
   d7c9a:	2a09      	cmp	r2, #9
   d7c9c:	d213      	bcs.n	d7cc6 <_strtod_r+0x4e>
   d7c9e:	2a00      	cmp	r2, #0
   d7ca0:	f000 81ac 	beq.w	d7ffc <_strtod_r+0x384>
   d7ca4:	e012      	b.n	d7ccc <_strtod_r+0x54>
   d7ca6:	2a2b      	cmp	r2, #43	; 0x2b
   d7ca8:	d004      	beq.n	d7cb4 <_strtod_r+0x3c>
   d7caa:	2a2d      	cmp	r2, #45	; 0x2d
   d7cac:	d004      	beq.n	d7cb8 <_strtod_r+0x40>
   d7cae:	2a20      	cmp	r2, #32
   d7cb0:	d10c      	bne.n	d7ccc <_strtod_r+0x54>
   d7cb2:	e008      	b.n	d7cc6 <_strtod_r+0x4e>
   d7cb4:	2200      	movs	r2, #0
   d7cb6:	e000      	b.n	d7cba <_strtod_r+0x42>
   d7cb8:	2201      	movs	r2, #1
   d7cba:	920c      	str	r2, [sp, #48]	; 0x30
   d7cbc:	1c5a      	adds	r2, r3, #1
   d7cbe:	9217      	str	r2, [sp, #92]	; 0x5c
   d7cc0:	785b      	ldrb	r3, [r3, #1]
   d7cc2:	b92b      	cbnz	r3, d7cd0 <_strtod_r+0x58>
   d7cc4:	e19a      	b.n	d7ffc <_strtod_r+0x384>
   d7cc6:	3301      	adds	r3, #1
   d7cc8:	9317      	str	r3, [sp, #92]	; 0x5c
   d7cca:	e7e2      	b.n	d7c92 <_strtod_r+0x1a>
   d7ccc:	2300      	movs	r3, #0
   d7cce:	930c      	str	r3, [sp, #48]	; 0x30
   d7cd0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d7cd2:	782b      	ldrb	r3, [r5, #0]
   d7cd4:	2b30      	cmp	r3, #48	; 0x30
   d7cd6:	d15c      	bne.n	d7d92 <_strtod_r+0x11a>
   d7cd8:	786b      	ldrb	r3, [r5, #1]
   d7cda:	2b58      	cmp	r3, #88	; 0x58
   d7cdc:	d001      	beq.n	d7ce2 <_strtod_r+0x6a>
   d7cde:	2b78      	cmp	r3, #120	; 0x78
   d7ce0:	d14c      	bne.n	d7d7c <_strtod_r+0x104>
   d7ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7ce4:	9301      	str	r3, [sp, #4]
   d7ce6:	ab18      	add	r3, sp, #96	; 0x60
   d7ce8:	9300      	str	r3, [sp, #0]
   d7cea:	4aa9      	ldr	r2, [pc, #676]	; (d7f90 <_strtod_r+0x318>)
   d7cec:	9802      	ldr	r0, [sp, #8]
   d7cee:	ab19      	add	r3, sp, #100	; 0x64
   d7cf0:	a917      	add	r1, sp, #92	; 0x5c
   d7cf2:	f000 fea4 	bl	d8a3e <__gethex>
   d7cf6:	f010 0607 	ands.w	r6, r0, #7
   d7cfa:	4604      	mov	r4, r0
   d7cfc:	f000 8587 	beq.w	d880e <_strtod_r+0xb96>
   d7d00:	2e06      	cmp	r6, #6
   d7d02:	d105      	bne.n	d7d10 <_strtod_r+0x98>
   d7d04:	3501      	adds	r5, #1
   d7d06:	2300      	movs	r3, #0
   d7d08:	9517      	str	r5, [sp, #92]	; 0x5c
   d7d0a:	930c      	str	r3, [sp, #48]	; 0x30
   d7d0c:	f000 bd7f 	b.w	d880e <_strtod_r+0xb96>
   d7d10:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d7d12:	b13a      	cbz	r2, d7d24 <_strtod_r+0xac>
   d7d14:	2135      	movs	r1, #53	; 0x35
   d7d16:	a81a      	add	r0, sp, #104	; 0x68
   d7d18:	f001 fd17 	bl	d974a <__copybits>
   d7d1c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7d1e:	9802      	ldr	r0, [sp, #8]
   d7d20:	f001 f994 	bl	d904c <_Bfree>
   d7d24:	2e06      	cmp	r6, #6
   d7d26:	d822      	bhi.n	d7d6e <_strtod_r+0xf6>
   d7d28:	e8df f006 	tbb	[pc, r6]
   d7d2c:	18080d04 	.word	0x18080d04
   d7d30:	0d1d      	.short	0x0d1d
   d7d32:	04          	.byte	0x04
   d7d33:	00          	.byte	0x00
   d7d34:	f04f 0b00 	mov.w	fp, #0
   d7d38:	46da      	mov	sl, fp
   d7d3a:	e018      	b.n	d7d6e <_strtod_r+0xf6>
   d7d3c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d7d40:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d7d44:	e013      	b.n	d7d6e <_strtod_r+0xf6>
   d7d46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d7d48:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d7d4a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d7d4e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d7d52:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d7d56:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d7d5a:	e008      	b.n	d7d6e <_strtod_r+0xf6>
   d7d5c:	f8df b234 	ldr.w	fp, [pc, #564]	; d7f94 <_strtod_r+0x31c>
   d7d60:	f04f 0a00 	mov.w	sl, #0
   d7d64:	e003      	b.n	d7d6e <_strtod_r+0xf6>
   d7d66:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d7d6a:	f04f 3aff 	mov.w	sl, #4294967295
   d7d6e:	0721      	lsls	r1, r4, #28
   d7d70:	f140 854d 	bpl.w	d880e <_strtod_r+0xb96>
   d7d74:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d7d78:	f000 bd49 	b.w	d880e <_strtod_r+0xb96>
   d7d7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7d7e:	1c5a      	adds	r2, r3, #1
   d7d80:	9217      	str	r2, [sp, #92]	; 0x5c
   d7d82:	785b      	ldrb	r3, [r3, #1]
   d7d84:	2b30      	cmp	r3, #48	; 0x30
   d7d86:	d0f9      	beq.n	d7d7c <_strtod_r+0x104>
   d7d88:	2b00      	cmp	r3, #0
   d7d8a:	f000 8540 	beq.w	d880e <_strtod_r+0xb96>
   d7d8e:	2301      	movs	r3, #1
   d7d90:	e000      	b.n	d7d94 <_strtod_r+0x11c>
   d7d92:	2300      	movs	r3, #0
   d7d94:	f04f 0800 	mov.w	r8, #0
   d7d98:	9306      	str	r3, [sp, #24]
   d7d9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7d9c:	9307      	str	r3, [sp, #28]
   d7d9e:	f8cd 8014 	str.w	r8, [sp, #20]
   d7da2:	f8cd 8010 	str.w	r8, [sp, #16]
   d7da6:	220a      	movs	r2, #10
   d7da8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d7daa:	782e      	ldrb	r6, [r5, #0]
   d7dac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d7db0:	b2d9      	uxtb	r1, r3
   d7db2:	2909      	cmp	r1, #9
   d7db4:	d80e      	bhi.n	d7dd4 <_strtod_r+0x15c>
   d7db6:	9904      	ldr	r1, [sp, #16]
   d7db8:	2908      	cmp	r1, #8
   d7dba:	bfdd      	ittte	le
   d7dbc:	9905      	ldrle	r1, [sp, #20]
   d7dbe:	fb02 3301 	mlale	r3, r2, r1, r3
   d7dc2:	9305      	strle	r3, [sp, #20]
   d7dc4:	fb02 3808 	mlagt	r8, r2, r8, r3
   d7dc8:	9b04      	ldr	r3, [sp, #16]
   d7dca:	3501      	adds	r5, #1
   d7dcc:	3301      	adds	r3, #1
   d7dce:	9304      	str	r3, [sp, #16]
   d7dd0:	9517      	str	r5, [sp, #92]	; 0x5c
   d7dd2:	e7e9      	b.n	d7da8 <_strtod_r+0x130>
   d7dd4:	9802      	ldr	r0, [sp, #8]
   d7dd6:	f7ff fe9d 	bl	d7b14 <_localeconv_r>
   d7dda:	6807      	ldr	r7, [r0, #0]
   d7ddc:	9802      	ldr	r0, [sp, #8]
   d7dde:	f7ff fe99 	bl	d7b14 <_localeconv_r>
   d7de2:	6800      	ldr	r0, [r0, #0]
   d7de4:	f7ff fedf 	bl	d7ba6 <strlen>
   d7de8:	4639      	mov	r1, r7
   d7dea:	4602      	mov	r2, r0
   d7dec:	4628      	mov	r0, r5
   d7dee:	f7ff fee2 	bl	d7bb6 <strncmp>
   d7df2:	4607      	mov	r7, r0
   d7df4:	b128      	cbz	r0, d7e02 <_strtod_r+0x18a>
   d7df6:	2000      	movs	r0, #0
   d7df8:	4633      	mov	r3, r6
   d7dfa:	9d04      	ldr	r5, [sp, #16]
   d7dfc:	4602      	mov	r2, r0
   d7dfe:	4601      	mov	r1, r0
   d7e00:	e057      	b.n	d7eb2 <_strtod_r+0x23a>
   d7e02:	9802      	ldr	r0, [sp, #8]
   d7e04:	f7ff fe86 	bl	d7b14 <_localeconv_r>
   d7e08:	6800      	ldr	r0, [r0, #0]
   d7e0a:	f7ff fecc 	bl	d7ba6 <strlen>
   d7e0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7e10:	181a      	adds	r2, r3, r0
   d7e12:	9217      	str	r2, [sp, #92]	; 0x5c
   d7e14:	9a04      	ldr	r2, [sp, #16]
   d7e16:	5c1b      	ldrb	r3, [r3, r0]
   d7e18:	2a00      	cmp	r2, #0
   d7e1a:	d142      	bne.n	d7ea2 <_strtod_r+0x22a>
   d7e1c:	4610      	mov	r0, r2
   d7e1e:	2b30      	cmp	r3, #48	; 0x30
   d7e20:	d105      	bne.n	d7e2e <_strtod_r+0x1b6>
   d7e22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7e24:	1c5a      	adds	r2, r3, #1
   d7e26:	9217      	str	r2, [sp, #92]	; 0x5c
   d7e28:	3001      	adds	r0, #1
   d7e2a:	785b      	ldrb	r3, [r3, #1]
   d7e2c:	e7f7      	b.n	d7e1e <_strtod_r+0x1a6>
   d7e2e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d7e32:	2a08      	cmp	r2, #8
   d7e34:	d843      	bhi.n	d7ebe <_strtod_r+0x246>
   d7e36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d7e38:	9207      	str	r2, [sp, #28]
   d7e3a:	4602      	mov	r2, r0
   d7e3c:	2000      	movs	r0, #0
   d7e3e:	4605      	mov	r5, r0
   d7e40:	3b30      	subs	r3, #48	; 0x30
   d7e42:	f100 0101 	add.w	r1, r0, #1
   d7e46:	d026      	beq.n	d7e96 <_strtod_r+0x21e>
   d7e48:	440a      	add	r2, r1
   d7e4a:	eb05 0c00 	add.w	ip, r5, r0
   d7e4e:	4629      	mov	r1, r5
   d7e50:	260a      	movs	r6, #10
   d7e52:	4561      	cmp	r1, ip
   d7e54:	d00e      	beq.n	d7e74 <_strtod_r+0x1fc>
   d7e56:	3101      	adds	r1, #1
   d7e58:	f101 3eff 	add.w	lr, r1, #4294967295
   d7e5c:	f1be 0f08 	cmp.w	lr, #8
   d7e60:	dc03      	bgt.n	d7e6a <_strtod_r+0x1f2>
   d7e62:	9f05      	ldr	r7, [sp, #20]
   d7e64:	4377      	muls	r7, r6
   d7e66:	9705      	str	r7, [sp, #20]
   d7e68:	e7f3      	b.n	d7e52 <_strtod_r+0x1da>
   d7e6a:	2910      	cmp	r1, #16
   d7e6c:	bfd8      	it	le
   d7e6e:	fb06 f808 	mulle.w	r8, r6, r8
   d7e72:	e7ee      	b.n	d7e52 <_strtod_r+0x1da>
   d7e74:	4428      	add	r0, r5
   d7e76:	2808      	cmp	r0, #8
   d7e78:	f100 0501 	add.w	r5, r0, #1
   d7e7c:	dc05      	bgt.n	d7e8a <_strtod_r+0x212>
   d7e7e:	9805      	ldr	r0, [sp, #20]
   d7e80:	210a      	movs	r1, #10
   d7e82:	fb01 3300 	mla	r3, r1, r0, r3
   d7e86:	9305      	str	r3, [sp, #20]
   d7e88:	e004      	b.n	d7e94 <_strtod_r+0x21c>
   d7e8a:	2d10      	cmp	r5, #16
   d7e8c:	bfdc      	itt	le
   d7e8e:	210a      	movle	r1, #10
   d7e90:	fb01 3808 	mlale	r8, r1, r8, r3
   d7e94:	2100      	movs	r1, #0
   d7e96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7e98:	1c58      	adds	r0, r3, #1
   d7e9a:	9017      	str	r0, [sp, #92]	; 0x5c
   d7e9c:	785b      	ldrb	r3, [r3, #1]
   d7e9e:	4608      	mov	r0, r1
   d7ea0:	e002      	b.n	d7ea8 <_strtod_r+0x230>
   d7ea2:	9d04      	ldr	r5, [sp, #16]
   d7ea4:	4638      	mov	r0, r7
   d7ea6:	463a      	mov	r2, r7
   d7ea8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d7eac:	2909      	cmp	r1, #9
   d7eae:	d9c7      	bls.n	d7e40 <_strtod_r+0x1c8>
   d7eb0:	2101      	movs	r1, #1
   d7eb2:	2b65      	cmp	r3, #101	; 0x65
   d7eb4:	d001      	beq.n	d7eba <_strtod_r+0x242>
   d7eb6:	2b45      	cmp	r3, #69	; 0x45
   d7eb8:	d151      	bne.n	d7f5e <_strtod_r+0x2e6>
   d7eba:	b96d      	cbnz	r5, d7ed8 <_strtod_r+0x260>
   d7ebc:	e004      	b.n	d7ec8 <_strtod_r+0x250>
   d7ebe:	2b65      	cmp	r3, #101	; 0x65
   d7ec0:	f040 84b3 	bne.w	d882a <_strtod_r+0xbb2>
   d7ec4:	2200      	movs	r2, #0
   d7ec6:	2101      	movs	r1, #1
   d7ec8:	b928      	cbnz	r0, d7ed6 <_strtod_r+0x25e>
   d7eca:	9b06      	ldr	r3, [sp, #24]
   d7ecc:	2b00      	cmp	r3, #0
   d7ece:	f000 8095 	beq.w	d7ffc <_strtod_r+0x384>
   d7ed2:	4605      	mov	r5, r0
   d7ed4:	e000      	b.n	d7ed8 <_strtod_r+0x260>
   d7ed6:	2500      	movs	r5, #0
   d7ed8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d7eda:	1c63      	adds	r3, r4, #1
   d7edc:	9317      	str	r3, [sp, #92]	; 0x5c
   d7ede:	7863      	ldrb	r3, [r4, #1]
   d7ee0:	2b2b      	cmp	r3, #43	; 0x2b
   d7ee2:	d006      	beq.n	d7ef2 <_strtod_r+0x27a>
   d7ee4:	2b2d      	cmp	r3, #45	; 0x2d
   d7ee6:	d002      	beq.n	d7eee <_strtod_r+0x276>
   d7ee8:	2600      	movs	r6, #0
   d7eea:	9603      	str	r6, [sp, #12]
   d7eec:	e006      	b.n	d7efc <_strtod_r+0x284>
   d7eee:	2301      	movs	r3, #1
   d7ef0:	e000      	b.n	d7ef4 <_strtod_r+0x27c>
   d7ef2:	2300      	movs	r3, #0
   d7ef4:	9303      	str	r3, [sp, #12]
   d7ef6:	1ca3      	adds	r3, r4, #2
   d7ef8:	9317      	str	r3, [sp, #92]	; 0x5c
   d7efa:	78a3      	ldrb	r3, [r4, #2]
   d7efc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d7f00:	2e09      	cmp	r6, #9
   d7f02:	d82b      	bhi.n	d7f5c <_strtod_r+0x2e4>
   d7f04:	2b30      	cmp	r3, #48	; 0x30
   d7f06:	d104      	bne.n	d7f12 <_strtod_r+0x29a>
   d7f08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7f0a:	1c5e      	adds	r6, r3, #1
   d7f0c:	9617      	str	r6, [sp, #92]	; 0x5c
   d7f0e:	785b      	ldrb	r3, [r3, #1]
   d7f10:	e7f8      	b.n	d7f04 <_strtod_r+0x28c>
   d7f12:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d7f16:	2e08      	cmp	r6, #8
   d7f18:	d821      	bhi.n	d7f5e <_strtod_r+0x2e6>
   d7f1a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d7f1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7f20:	f04f 0c0a 	mov.w	ip, #10
   d7f24:	461f      	mov	r7, r3
   d7f26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7f28:	1c5e      	adds	r6, r3, #1
   d7f2a:	9617      	str	r6, [sp, #92]	; 0x5c
   d7f2c:	785b      	ldrb	r3, [r3, #1]
   d7f2e:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d7f32:	f1b9 0f09 	cmp.w	r9, #9
   d7f36:	d804      	bhi.n	d7f42 <_strtod_r+0x2ca>
   d7f38:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d7f3c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d7f40:	e7f1      	b.n	d7f26 <_strtod_r+0x2ae>
   d7f42:	1bf6      	subs	r6, r6, r7
   d7f44:	2e08      	cmp	r6, #8
   d7f46:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d7f4a:	dc02      	bgt.n	d7f52 <_strtod_r+0x2da>
   d7f4c:	45f1      	cmp	r9, lr
   d7f4e:	bfa8      	it	ge
   d7f50:	46f1      	movge	r9, lr
   d7f52:	9e03      	ldr	r6, [sp, #12]
   d7f54:	b12e      	cbz	r6, d7f62 <_strtod_r+0x2ea>
   d7f56:	f1c9 0900 	rsb	r9, r9, #0
   d7f5a:	e002      	b.n	d7f62 <_strtod_r+0x2ea>
   d7f5c:	9417      	str	r4, [sp, #92]	; 0x5c
   d7f5e:	f04f 0900 	mov.w	r9, #0
   d7f62:	2d00      	cmp	r5, #0
   d7f64:	d153      	bne.n	d800e <_strtod_r+0x396>
   d7f66:	2800      	cmp	r0, #0
   d7f68:	f040 8451 	bne.w	d880e <_strtod_r+0xb96>
   d7f6c:	9a06      	ldr	r2, [sp, #24]
   d7f6e:	2a00      	cmp	r2, #0
   d7f70:	f040 844d 	bne.w	d880e <_strtod_r+0xb96>
   d7f74:	2900      	cmp	r1, #0
   d7f76:	d141      	bne.n	d7ffc <_strtod_r+0x384>
   d7f78:	2b4e      	cmp	r3, #78	; 0x4e
   d7f7a:	d020      	beq.n	d7fbe <_strtod_r+0x346>
   d7f7c:	dc02      	bgt.n	d7f84 <_strtod_r+0x30c>
   d7f7e:	2b49      	cmp	r3, #73	; 0x49
   d7f80:	d00a      	beq.n	d7f98 <_strtod_r+0x320>
   d7f82:	e03b      	b.n	d7ffc <_strtod_r+0x384>
   d7f84:	2b69      	cmp	r3, #105	; 0x69
   d7f86:	d007      	beq.n	d7f98 <_strtod_r+0x320>
   d7f88:	2b6e      	cmp	r3, #110	; 0x6e
   d7f8a:	d018      	beq.n	d7fbe <_strtod_r+0x346>
   d7f8c:	e036      	b.n	d7ffc <_strtod_r+0x384>
   d7f8e:	bf00      	nop
   d7f90:	000d9d4c 	.word	0x000d9d4c
   d7f94:	7ff00000 	.word	0x7ff00000
   d7f98:	49a8      	ldr	r1, [pc, #672]	; (d823c <_strtod_r+0x5c4>)
   d7f9a:	a817      	add	r0, sp, #92	; 0x5c
   d7f9c:	f000 ff80 	bl	d8ea0 <__match>
   d7fa0:	b360      	cbz	r0, d7ffc <_strtod_r+0x384>
   d7fa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7fa4:	49a6      	ldr	r1, [pc, #664]	; (d8240 <_strtod_r+0x5c8>)
   d7fa6:	3b01      	subs	r3, #1
   d7fa8:	a817      	add	r0, sp, #92	; 0x5c
   d7faa:	9317      	str	r3, [sp, #92]	; 0x5c
   d7fac:	f000 ff78 	bl	d8ea0 <__match>
   d7fb0:	b910      	cbnz	r0, d7fb8 <_strtod_r+0x340>
   d7fb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7fb4:	3301      	adds	r3, #1
   d7fb6:	9317      	str	r3, [sp, #92]	; 0x5c
   d7fb8:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d825c <_strtod_r+0x5e4>
   d7fbc:	e01a      	b.n	d7ff4 <_strtod_r+0x37c>
   d7fbe:	49a1      	ldr	r1, [pc, #644]	; (d8244 <_strtod_r+0x5cc>)
   d7fc0:	a817      	add	r0, sp, #92	; 0x5c
   d7fc2:	f000 ff6d 	bl	d8ea0 <__match>
   d7fc6:	b1c8      	cbz	r0, d7ffc <_strtod_r+0x384>
   d7fc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7fca:	781b      	ldrb	r3, [r3, #0]
   d7fcc:	2b28      	cmp	r3, #40	; 0x28
   d7fce:	d10f      	bne.n	d7ff0 <_strtod_r+0x378>
   d7fd0:	aa1a      	add	r2, sp, #104	; 0x68
   d7fd2:	499d      	ldr	r1, [pc, #628]	; (d8248 <_strtod_r+0x5d0>)
   d7fd4:	a817      	add	r0, sp, #92	; 0x5c
   d7fd6:	f000 ff76 	bl	d8ec6 <__hexnan>
   d7fda:	2805      	cmp	r0, #5
   d7fdc:	d108      	bne.n	d7ff0 <_strtod_r+0x378>
   d7fde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d7fe0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d7fe4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d7fe8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d7fec:	f000 bc0f 	b.w	d880e <_strtod_r+0xb96>
   d7ff0:	f8df b26c 	ldr.w	fp, [pc, #620]	; d8260 <_strtod_r+0x5e8>
   d7ff4:	f04f 0a00 	mov.w	sl, #0
   d7ff8:	f000 bc09 	b.w	d880e <_strtod_r+0xb96>
   d7ffc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7ffe:	9417      	str	r4, [sp, #92]	; 0x5c
   d8000:	2b00      	cmp	r3, #0
   d8002:	f000 840f 	beq.w	d8824 <_strtod_r+0xbac>
   d8006:	2300      	movs	r3, #0
   d8008:	930c      	str	r3, [sp, #48]	; 0x30
   d800a:	f000 bc02 	b.w	d8812 <_strtod_r+0xb9a>
   d800e:	9b04      	ldr	r3, [sp, #16]
   d8010:	9805      	ldr	r0, [sp, #20]
   d8012:	2b00      	cmp	r3, #0
   d8014:	bf08      	it	eq
   d8016:	462b      	moveq	r3, r5
   d8018:	2d10      	cmp	r5, #16
   d801a:	462c      	mov	r4, r5
   d801c:	ebc2 0909 	rsb	r9, r2, r9
   d8020:	bfa8      	it	ge
   d8022:	2410      	movge	r4, #16
   d8024:	9304      	str	r3, [sp, #16]
   d8026:	f7ff f99d 	bl	d7364 <__aeabi_ui2d>
   d802a:	2c09      	cmp	r4, #9
   d802c:	4682      	mov	sl, r0
   d802e:	468b      	mov	fp, r1
   d8030:	dd13      	ble.n	d805a <_strtod_r+0x3e2>
   d8032:	4b86      	ldr	r3, [pc, #536]	; (d824c <_strtod_r+0x5d4>)
   d8034:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d8038:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d803c:	f7ff fa08 	bl	d7450 <__aeabi_dmul>
   d8040:	4606      	mov	r6, r0
   d8042:	4640      	mov	r0, r8
   d8044:	460f      	mov	r7, r1
   d8046:	f7ff f98d 	bl	d7364 <__aeabi_ui2d>
   d804a:	4602      	mov	r2, r0
   d804c:	460b      	mov	r3, r1
   d804e:	4630      	mov	r0, r6
   d8050:	4639      	mov	r1, r7
   d8052:	f7ff f84b 	bl	d70ec <__adddf3>
   d8056:	4682      	mov	sl, r0
   d8058:	468b      	mov	fp, r1
   d805a:	2d0f      	cmp	r5, #15
   d805c:	dc36      	bgt.n	d80cc <_strtod_r+0x454>
   d805e:	f1b9 0f00 	cmp.w	r9, #0
   d8062:	f000 83d4 	beq.w	d880e <_strtod_r+0xb96>
   d8066:	dd24      	ble.n	d80b2 <_strtod_r+0x43a>
   d8068:	f1b9 0f16 	cmp.w	r9, #22
   d806c:	dc07      	bgt.n	d807e <_strtod_r+0x406>
   d806e:	4d77      	ldr	r5, [pc, #476]	; (d824c <_strtod_r+0x5d4>)
   d8070:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d8074:	4652      	mov	r2, sl
   d8076:	465b      	mov	r3, fp
   d8078:	e9d9 0100 	ldrd	r0, r1, [r9]
   d807c:	e014      	b.n	d80a8 <_strtod_r+0x430>
   d807e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d8082:	4599      	cmp	r9, r3
   d8084:	dc22      	bgt.n	d80cc <_strtod_r+0x454>
   d8086:	4c71      	ldr	r4, [pc, #452]	; (d824c <_strtod_r+0x5d4>)
   d8088:	f1c5 050f 	rsb	r5, r5, #15
   d808c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d8090:	ebc5 0509 	rsb	r5, r5, r9
   d8094:	4652      	mov	r2, sl
   d8096:	465b      	mov	r3, fp
   d8098:	e9d1 0100 	ldrd	r0, r1, [r1]
   d809c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d80a0:	f7ff f9d6 	bl	d7450 <__aeabi_dmul>
   d80a4:	e9d4 2300 	ldrd	r2, r3, [r4]
   d80a8:	f7ff f9d2 	bl	d7450 <__aeabi_dmul>
   d80ac:	4682      	mov	sl, r0
   d80ae:	468b      	mov	fp, r1
   d80b0:	e3ad      	b.n	d880e <_strtod_r+0xb96>
   d80b2:	f119 0f16 	cmn.w	r9, #22
   d80b6:	db09      	blt.n	d80cc <_strtod_r+0x454>
   d80b8:	4d64      	ldr	r5, [pc, #400]	; (d824c <_strtod_r+0x5d4>)
   d80ba:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d80be:	e9d9 2300 	ldrd	r2, r3, [r9]
   d80c2:	4650      	mov	r0, sl
   d80c4:	4659      	mov	r1, fp
   d80c6:	f7ff faed 	bl	d76a4 <__aeabi_ddiv>
   d80ca:	e7ef      	b.n	d80ac <_strtod_r+0x434>
   d80cc:	1b2c      	subs	r4, r5, r4
   d80ce:	444c      	add	r4, r9
   d80d0:	2c00      	cmp	r4, #0
   d80d2:	dd57      	ble.n	d8184 <_strtod_r+0x50c>
   d80d4:	f014 010f 	ands.w	r1, r4, #15
   d80d8:	d00a      	beq.n	d80f0 <_strtod_r+0x478>
   d80da:	4b5c      	ldr	r3, [pc, #368]	; (d824c <_strtod_r+0x5d4>)
   d80dc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d80e0:	4652      	mov	r2, sl
   d80e2:	465b      	mov	r3, fp
   d80e4:	e9d1 0100 	ldrd	r0, r1, [r1]
   d80e8:	f7ff f9b2 	bl	d7450 <__aeabi_dmul>
   d80ec:	4682      	mov	sl, r0
   d80ee:	468b      	mov	fp, r1
   d80f0:	f034 040f 	bics.w	r4, r4, #15
   d80f4:	f000 80b8 	beq.w	d8268 <_strtod_r+0x5f0>
   d80f8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d80fc:	dd0b      	ble.n	d8116 <_strtod_r+0x49e>
   d80fe:	2400      	movs	r4, #0
   d8100:	4625      	mov	r5, r4
   d8102:	9405      	str	r4, [sp, #20]
   d8104:	9404      	str	r4, [sp, #16]
   d8106:	9a02      	ldr	r2, [sp, #8]
   d8108:	f8df b150 	ldr.w	fp, [pc, #336]	; d825c <_strtod_r+0x5e4>
   d810c:	2322      	movs	r3, #34	; 0x22
   d810e:	6013      	str	r3, [r2, #0]
   d8110:	f04f 0a00 	mov.w	sl, #0
   d8114:	e187      	b.n	d8426 <_strtod_r+0x7ae>
   d8116:	4e4e      	ldr	r6, [pc, #312]	; (d8250 <_strtod_r+0x5d8>)
   d8118:	2300      	movs	r3, #0
   d811a:	1124      	asrs	r4, r4, #4
   d811c:	4650      	mov	r0, sl
   d811e:	4659      	mov	r1, fp
   d8120:	4698      	mov	r8, r3
   d8122:	4637      	mov	r7, r6
   d8124:	2c01      	cmp	r4, #1
   d8126:	dd0b      	ble.n	d8140 <_strtod_r+0x4c8>
   d8128:	07e2      	lsls	r2, r4, #31
   d812a:	d504      	bpl.n	d8136 <_strtod_r+0x4be>
   d812c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d8130:	f7ff f98e 	bl	d7450 <__aeabi_dmul>
   d8134:	2301      	movs	r3, #1
   d8136:	f108 0801 	add.w	r8, r8, #1
   d813a:	1064      	asrs	r4, r4, #1
   d813c:	3608      	adds	r6, #8
   d813e:	e7f1      	b.n	d8124 <_strtod_r+0x4ac>
   d8140:	b10b      	cbz	r3, d8146 <_strtod_r+0x4ce>
   d8142:	4682      	mov	sl, r0
   d8144:	468b      	mov	fp, r1
   d8146:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d814a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d814e:	4652      	mov	r2, sl
   d8150:	465b      	mov	r3, fp
   d8152:	e9d7 0100 	ldrd	r0, r1, [r7]
   d8156:	f7ff f97b 	bl	d7450 <__aeabi_dmul>
   d815a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d815e:	468b      	mov	fp, r1
   d8160:	460a      	mov	r2, r1
   d8162:	0d1b      	lsrs	r3, r3, #20
   d8164:	493b      	ldr	r1, [pc, #236]	; (d8254 <_strtod_r+0x5dc>)
   d8166:	051b      	lsls	r3, r3, #20
   d8168:	428b      	cmp	r3, r1
   d816a:	4682      	mov	sl, r0
   d816c:	d8c7      	bhi.n	d80fe <_strtod_r+0x486>
   d816e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d8172:	428b      	cmp	r3, r1
   d8174:	bf86      	itte	hi
   d8176:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d8264 <_strtod_r+0x5ec>
   d817a:	f04f 3aff 	movhi.w	sl, #4294967295
   d817e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d8182:	e071      	b.n	d8268 <_strtod_r+0x5f0>
   d8184:	d070      	beq.n	d8268 <_strtod_r+0x5f0>
   d8186:	4264      	negs	r4, r4
   d8188:	f014 020f 	ands.w	r2, r4, #15
   d818c:	d00a      	beq.n	d81a4 <_strtod_r+0x52c>
   d818e:	4b2f      	ldr	r3, [pc, #188]	; (d824c <_strtod_r+0x5d4>)
   d8190:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d8194:	4650      	mov	r0, sl
   d8196:	4659      	mov	r1, fp
   d8198:	e9d3 2300 	ldrd	r2, r3, [r3]
   d819c:	f7ff fa82 	bl	d76a4 <__aeabi_ddiv>
   d81a0:	4682      	mov	sl, r0
   d81a2:	468b      	mov	fp, r1
   d81a4:	1124      	asrs	r4, r4, #4
   d81a6:	d05f      	beq.n	d8268 <_strtod_r+0x5f0>
   d81a8:	2c1f      	cmp	r4, #31
   d81aa:	dd04      	ble.n	d81b6 <_strtod_r+0x53e>
   d81ac:	2400      	movs	r4, #0
   d81ae:	4625      	mov	r5, r4
   d81b0:	9405      	str	r4, [sp, #20]
   d81b2:	9404      	str	r4, [sp, #16]
   d81b4:	e130      	b.n	d8418 <_strtod_r+0x7a0>
   d81b6:	f014 0f10 	tst.w	r4, #16
   d81ba:	bf0c      	ite	eq
   d81bc:	2300      	moveq	r3, #0
   d81be:	236a      	movne	r3, #106	; 0x6a
   d81c0:	4e25      	ldr	r6, [pc, #148]	; (d8258 <_strtod_r+0x5e0>)
   d81c2:	9303      	str	r3, [sp, #12]
   d81c4:	4650      	mov	r0, sl
   d81c6:	4659      	mov	r1, fp
   d81c8:	2300      	movs	r3, #0
   d81ca:	2c00      	cmp	r4, #0
   d81cc:	dd09      	ble.n	d81e2 <_strtod_r+0x56a>
   d81ce:	07e2      	lsls	r2, r4, #31
   d81d0:	d504      	bpl.n	d81dc <_strtod_r+0x564>
   d81d2:	e9d6 2300 	ldrd	r2, r3, [r6]
   d81d6:	f7ff f93b 	bl	d7450 <__aeabi_dmul>
   d81da:	2301      	movs	r3, #1
   d81dc:	1064      	asrs	r4, r4, #1
   d81de:	3608      	adds	r6, #8
   d81e0:	e7f3      	b.n	d81ca <_strtod_r+0x552>
   d81e2:	b10b      	cbz	r3, d81e8 <_strtod_r+0x570>
   d81e4:	4682      	mov	sl, r0
   d81e6:	468b      	mov	fp, r1
   d81e8:	9b03      	ldr	r3, [sp, #12]
   d81ea:	b1eb      	cbz	r3, d8228 <_strtod_r+0x5b0>
   d81ec:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d81f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d81f4:	2b00      	cmp	r3, #0
   d81f6:	4659      	mov	r1, fp
   d81f8:	dd16      	ble.n	d8228 <_strtod_r+0x5b0>
   d81fa:	2b1f      	cmp	r3, #31
   d81fc:	dd0e      	ble.n	d821c <_strtod_r+0x5a4>
   d81fe:	2b34      	cmp	r3, #52	; 0x34
   d8200:	bfde      	ittt	le
   d8202:	3b20      	suble	r3, #32
   d8204:	f04f 32ff 	movle.w	r2, #4294967295
   d8208:	fa02 f303 	lslle.w	r3, r2, r3
   d820c:	f04f 0a00 	mov.w	sl, #0
   d8210:	bfcc      	ite	gt
   d8212:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d8216:	ea03 0b01 	andle.w	fp, r3, r1
   d821a:	e005      	b.n	d8228 <_strtod_r+0x5b0>
   d821c:	f04f 32ff 	mov.w	r2, #4294967295
   d8220:	fa02 f303 	lsl.w	r3, r2, r3
   d8224:	ea03 0a0a 	and.w	sl, r3, sl
   d8228:	2200      	movs	r2, #0
   d822a:	2300      	movs	r3, #0
   d822c:	4650      	mov	r0, sl
   d822e:	4659      	mov	r1, fp
   d8230:	f7ff fb76 	bl	d7920 <__aeabi_dcmpeq>
   d8234:	2800      	cmp	r0, #0
   d8236:	d1b9      	bne.n	d81ac <_strtod_r+0x534>
   d8238:	e018      	b.n	d826c <_strtod_r+0x5f4>
   d823a:	bf00      	nop
   d823c:	000d9d74 	.word	0x000d9d74
   d8240:	000d9d77 	.word	0x000d9d77
   d8244:	000d9d7d 	.word	0x000d9d7d
   d8248:	000d9d60 	.word	0x000d9d60
   d824c:	000d9da8 	.word	0x000d9da8
   d8250:	000d9e70 	.word	0x000d9e70
   d8254:	7ca00000 	.word	0x7ca00000
   d8258:	000d9d80 	.word	0x000d9d80
   d825c:	7ff00000 	.word	0x7ff00000
   d8260:	fff80000 	.word	0xfff80000
   d8264:	7fefffff 	.word	0x7fefffff
   d8268:	2300      	movs	r3, #0
   d826a:	9303      	str	r3, [sp, #12]
   d826c:	9b05      	ldr	r3, [sp, #20]
   d826e:	9300      	str	r3, [sp, #0]
   d8270:	9a04      	ldr	r2, [sp, #16]
   d8272:	9907      	ldr	r1, [sp, #28]
   d8274:	9802      	ldr	r0, [sp, #8]
   d8276:	462b      	mov	r3, r5
   d8278:	f000 ff3a 	bl	d90f0 <__s2b>
   d827c:	9005      	str	r0, [sp, #20]
   d827e:	2800      	cmp	r0, #0
   d8280:	f43f af3d 	beq.w	d80fe <_strtod_r+0x486>
   d8284:	f1b9 0f00 	cmp.w	r9, #0
   d8288:	f1c9 0300 	rsb	r3, r9, #0
   d828c:	bfa8      	it	ge
   d828e:	2300      	movge	r3, #0
   d8290:	930d      	str	r3, [sp, #52]	; 0x34
   d8292:	2400      	movs	r4, #0
   d8294:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d8298:	9312      	str	r3, [sp, #72]	; 0x48
   d829a:	4625      	mov	r5, r4
   d829c:	9b05      	ldr	r3, [sp, #20]
   d829e:	9802      	ldr	r0, [sp, #8]
   d82a0:	6859      	ldr	r1, [r3, #4]
   d82a2:	f000 fe9e 	bl	d8fe2 <_Balloc>
   d82a6:	9004      	str	r0, [sp, #16]
   d82a8:	2800      	cmp	r0, #0
   d82aa:	f43f af2c 	beq.w	d8106 <_strtod_r+0x48e>
   d82ae:	9b05      	ldr	r3, [sp, #20]
   d82b0:	691a      	ldr	r2, [r3, #16]
   d82b2:	3202      	adds	r2, #2
   d82b4:	f103 010c 	add.w	r1, r3, #12
   d82b8:	0092      	lsls	r2, r2, #2
   d82ba:	300c      	adds	r0, #12
   d82bc:	f7ff fc2e 	bl	d7b1c <memcpy>
   d82c0:	aa1a      	add	r2, sp, #104	; 0x68
   d82c2:	a919      	add	r1, sp, #100	; 0x64
   d82c4:	ec4b ab10 	vmov	d0, sl, fp
   d82c8:	9802      	ldr	r0, [sp, #8]
   d82ca:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d82ce:	f001 f9c4 	bl	d965a <__d2b>
   d82d2:	9018      	str	r0, [sp, #96]	; 0x60
   d82d4:	2800      	cmp	r0, #0
   d82d6:	f43f af16 	beq.w	d8106 <_strtod_r+0x48e>
   d82da:	2101      	movs	r1, #1
   d82dc:	9802      	ldr	r0, [sp, #8]
   d82de:	f000 ff92 	bl	d9206 <__i2b>
   d82e2:	4605      	mov	r5, r0
   d82e4:	2800      	cmp	r0, #0
   d82e6:	f43f af0e 	beq.w	d8106 <_strtod_r+0x48e>
   d82ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d82ec:	9903      	ldr	r1, [sp, #12]
   d82ee:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d82f0:	2b00      	cmp	r3, #0
   d82f2:	bfad      	iteet	ge
   d82f4:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d82f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d82f8:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d82fc:	eb02 0803 	addge.w	r8, r2, r3
   d8300:	bfb8      	it	lt
   d8302:	1ad2      	sublt	r2, r2, r3
   d8304:	eba3 0301 	sub.w	r3, r3, r1
   d8308:	4433      	add	r3, r6
   d830a:	49b5      	ldr	r1, [pc, #724]	; (d85e0 <_strtod_r+0x968>)
   d830c:	bfa8      	it	ge
   d830e:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d8310:	3b01      	subs	r3, #1
   d8312:	428b      	cmp	r3, r1
   d8314:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d8318:	f280 808a 	bge.w	d8430 <_strtod_r+0x7b8>
   d831c:	1ac9      	subs	r1, r1, r3
   d831e:	291f      	cmp	r1, #31
   d8320:	bfc8      	it	gt
   d8322:	4fb0      	ldrgt	r7, [pc, #704]	; (d85e4 <_strtod_r+0x96c>)
   d8324:	f04f 0901 	mov.w	r9, #1
   d8328:	bfd4      	ite	le
   d832a:	fa09 f301 	lslle.w	r3, r9, r1
   d832e:	1aff      	subgt	r7, r7, r3
   d8330:	eba6 0601 	sub.w	r6, r6, r1
   d8334:	bfd9      	ittee	le
   d8336:	9306      	strle	r3, [sp, #24]
   d8338:	2700      	movle	r7, #0
   d833a:	fa09 f707 	lslgt.w	r7, r9, r7
   d833e:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d8342:	eb08 0906 	add.w	r9, r8, r6
   d8346:	9b03      	ldr	r3, [sp, #12]
   d8348:	45c8      	cmp	r8, r9
   d834a:	4416      	add	r6, r2
   d834c:	441e      	add	r6, r3
   d834e:	4643      	mov	r3, r8
   d8350:	bfa8      	it	ge
   d8352:	464b      	movge	r3, r9
   d8354:	42b3      	cmp	r3, r6
   d8356:	bfa8      	it	ge
   d8358:	4633      	movge	r3, r6
   d835a:	2b00      	cmp	r3, #0
   d835c:	bfc2      	ittt	gt
   d835e:	ebc3 0909 	rsbgt	r9, r3, r9
   d8362:	1af6      	subgt	r6, r6, r3
   d8364:	ebc3 0808 	rsbgt	r8, r3, r8
   d8368:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d836a:	2b00      	cmp	r3, #0
   d836c:	d164      	bne.n	d8438 <_strtod_r+0x7c0>
   d836e:	f1b9 0f00 	cmp.w	r9, #0
   d8372:	dc7a      	bgt.n	d846a <_strtod_r+0x7f2>
   d8374:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d8376:	2b00      	cmp	r3, #0
   d8378:	f040 8081 	bne.w	d847e <_strtod_r+0x806>
   d837c:	2e00      	cmp	r6, #0
   d837e:	f300 8088 	bgt.w	d8492 <_strtod_r+0x81a>
   d8382:	f1b8 0f00 	cmp.w	r8, #0
   d8386:	f300 808e 	bgt.w	d84a6 <_strtod_r+0x82e>
   d838a:	9a04      	ldr	r2, [sp, #16]
   d838c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d838e:	9802      	ldr	r0, [sp, #8]
   d8390:	f001 f88f 	bl	d94b2 <__mdiff>
   d8394:	4604      	mov	r4, r0
   d8396:	2800      	cmp	r0, #0
   d8398:	f43f aeb5 	beq.w	d8106 <_strtod_r+0x48e>
   d839c:	68c3      	ldr	r3, [r0, #12]
   d839e:	9307      	str	r3, [sp, #28]
   d83a0:	2300      	movs	r3, #0
   d83a2:	60c3      	str	r3, [r0, #12]
   d83a4:	4629      	mov	r1, r5
   d83a6:	f001 f868 	bl	d947a <__mcmp>
   d83aa:	2800      	cmp	r0, #0
   d83ac:	f280 8089 	bge.w	d84c2 <_strtod_r+0x84a>
   d83b0:	9b07      	ldr	r3, [sp, #28]
   d83b2:	2b00      	cmp	r3, #0
   d83b4:	f040 8204 	bne.w	d87c0 <_strtod_r+0xb48>
   d83b8:	f1ba 0f00 	cmp.w	sl, #0
   d83bc:	f040 8200 	bne.w	d87c0 <_strtod_r+0xb48>
   d83c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d83c4:	2b00      	cmp	r3, #0
   d83c6:	f040 81fb 	bne.w	d87c0 <_strtod_r+0xb48>
   d83ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d83ce:	0d1b      	lsrs	r3, r3, #20
   d83d0:	051b      	lsls	r3, r3, #20
   d83d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d83d6:	f240 81f3 	bls.w	d87c0 <_strtod_r+0xb48>
   d83da:	6963      	ldr	r3, [r4, #20]
   d83dc:	2b00      	cmp	r3, #0
   d83de:	d06c      	beq.n	d84ba <_strtod_r+0x842>
   d83e0:	4621      	mov	r1, r4
   d83e2:	2201      	movs	r2, #1
   d83e4:	9802      	ldr	r0, [sp, #8]
   d83e6:	f000 fff7 	bl	d93d8 <__lshift>
   d83ea:	4629      	mov	r1, r5
   d83ec:	4604      	mov	r4, r0
   d83ee:	f001 f844 	bl	d947a <__mcmp>
   d83f2:	2800      	cmp	r0, #0
   d83f4:	f340 81e4 	ble.w	d87c0 <_strtod_r+0xb48>
   d83f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d83fc:	9a03      	ldr	r2, [sp, #12]
   d83fe:	0d1b      	lsrs	r3, r3, #20
   d8400:	051b      	lsls	r3, r3, #20
   d8402:	2a00      	cmp	r2, #0
   d8404:	f000 808c 	beq.w	d8520 <_strtod_r+0x8a8>
   d8408:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d840c:	f300 8088 	bgt.w	d8520 <_strtod_r+0x8a8>
   d8410:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d8414:	f300 81d6 	bgt.w	d87c4 <_strtod_r+0xb4c>
   d8418:	9a02      	ldr	r2, [sp, #8]
   d841a:	2322      	movs	r3, #34	; 0x22
   d841c:	f04f 0a00 	mov.w	sl, #0
   d8420:	f04f 0b00 	mov.w	fp, #0
   d8424:	6013      	str	r3, [r2, #0]
   d8426:	9b05      	ldr	r3, [sp, #20]
   d8428:	2b00      	cmp	r3, #0
   d842a:	f040 81dc 	bne.w	d87e6 <_strtod_r+0xb6e>
   d842e:	e1ee      	b.n	d880e <_strtod_r+0xb96>
   d8430:	2301      	movs	r3, #1
   d8432:	2700      	movs	r7, #0
   d8434:	9306      	str	r3, [sp, #24]
   d8436:	e784      	b.n	d8342 <_strtod_r+0x6ca>
   d8438:	4629      	mov	r1, r5
   d843a:	461a      	mov	r2, r3
   d843c:	9802      	ldr	r0, [sp, #8]
   d843e:	f000 ff7d 	bl	d933c <__pow5mult>
   d8442:	4605      	mov	r5, r0
   d8444:	2800      	cmp	r0, #0
   d8446:	f43f ae5e 	beq.w	d8106 <_strtod_r+0x48e>
   d844a:	4601      	mov	r1, r0
   d844c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d844e:	9802      	ldr	r0, [sp, #8]
   d8450:	f000 fee2 	bl	d9218 <__multiply>
   d8454:	9007      	str	r0, [sp, #28]
   d8456:	2800      	cmp	r0, #0
   d8458:	f43f ae55 	beq.w	d8106 <_strtod_r+0x48e>
   d845c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d845e:	9802      	ldr	r0, [sp, #8]
   d8460:	f000 fdf4 	bl	d904c <_Bfree>
   d8464:	9b07      	ldr	r3, [sp, #28]
   d8466:	9318      	str	r3, [sp, #96]	; 0x60
   d8468:	e781      	b.n	d836e <_strtod_r+0x6f6>
   d846a:	464a      	mov	r2, r9
   d846c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d846e:	9802      	ldr	r0, [sp, #8]
   d8470:	f000 ffb2 	bl	d93d8 <__lshift>
   d8474:	9018      	str	r0, [sp, #96]	; 0x60
   d8476:	2800      	cmp	r0, #0
   d8478:	f47f af7c 	bne.w	d8374 <_strtod_r+0x6fc>
   d847c:	e643      	b.n	d8106 <_strtod_r+0x48e>
   d847e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d8480:	9904      	ldr	r1, [sp, #16]
   d8482:	9802      	ldr	r0, [sp, #8]
   d8484:	f000 ff5a 	bl	d933c <__pow5mult>
   d8488:	9004      	str	r0, [sp, #16]
   d848a:	2800      	cmp	r0, #0
   d848c:	f47f af76 	bne.w	d837c <_strtod_r+0x704>
   d8490:	e639      	b.n	d8106 <_strtod_r+0x48e>
   d8492:	4632      	mov	r2, r6
   d8494:	9904      	ldr	r1, [sp, #16]
   d8496:	9802      	ldr	r0, [sp, #8]
   d8498:	f000 ff9e 	bl	d93d8 <__lshift>
   d849c:	9004      	str	r0, [sp, #16]
   d849e:	2800      	cmp	r0, #0
   d84a0:	f47f af6f 	bne.w	d8382 <_strtod_r+0x70a>
   d84a4:	e62f      	b.n	d8106 <_strtod_r+0x48e>
   d84a6:	4629      	mov	r1, r5
   d84a8:	4642      	mov	r2, r8
   d84aa:	9802      	ldr	r0, [sp, #8]
   d84ac:	f000 ff94 	bl	d93d8 <__lshift>
   d84b0:	4605      	mov	r5, r0
   d84b2:	2800      	cmp	r0, #0
   d84b4:	f47f af69 	bne.w	d838a <_strtod_r+0x712>
   d84b8:	e625      	b.n	d8106 <_strtod_r+0x48e>
   d84ba:	6923      	ldr	r3, [r4, #16]
   d84bc:	2b01      	cmp	r3, #1
   d84be:	dc8f      	bgt.n	d83e0 <_strtod_r+0x768>
   d84c0:	e17e      	b.n	d87c0 <_strtod_r+0xb48>
   d84c2:	d161      	bne.n	d8588 <_strtod_r+0x910>
   d84c4:	9a07      	ldr	r2, [sp, #28]
   d84c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d84ca:	b322      	cbz	r2, d8516 <_strtod_r+0x89e>
   d84cc:	4946      	ldr	r1, [pc, #280]	; (d85e8 <_strtod_r+0x970>)
   d84ce:	428b      	cmp	r3, r1
   d84d0:	465a      	mov	r2, fp
   d84d2:	d12e      	bne.n	d8532 <_strtod_r+0x8ba>
   d84d4:	9b03      	ldr	r3, [sp, #12]
   d84d6:	4651      	mov	r1, sl
   d84d8:	b163      	cbz	r3, d84f4 <_strtod_r+0x87c>
   d84da:	4b44      	ldr	r3, [pc, #272]	; (d85ec <_strtod_r+0x974>)
   d84dc:	4013      	ands	r3, r2
   d84de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d84e2:	d807      	bhi.n	d84f4 <_strtod_r+0x87c>
   d84e4:	0d1b      	lsrs	r3, r3, #20
   d84e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d84ea:	f04f 30ff 	mov.w	r0, #4294967295
   d84ee:	fa00 f303 	lsl.w	r3, r0, r3
   d84f2:	e001      	b.n	d84f8 <_strtod_r+0x880>
   d84f4:	f04f 33ff 	mov.w	r3, #4294967295
   d84f8:	428b      	cmp	r3, r1
   d84fa:	d11a      	bne.n	d8532 <_strtod_r+0x8ba>
   d84fc:	493c      	ldr	r1, [pc, #240]	; (d85f0 <_strtod_r+0x978>)
   d84fe:	428a      	cmp	r2, r1
   d8500:	d102      	bne.n	d8508 <_strtod_r+0x890>
   d8502:	3301      	adds	r3, #1
   d8504:	f43f adff 	beq.w	d8106 <_strtod_r+0x48e>
   d8508:	4b38      	ldr	r3, [pc, #224]	; (d85ec <_strtod_r+0x974>)
   d850a:	4013      	ands	r3, r2
   d850c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d8510:	f04f 0a00 	mov.w	sl, #0
   d8514:	e154      	b.n	d87c0 <_strtod_r+0xb48>
   d8516:	b963      	cbnz	r3, d8532 <_strtod_r+0x8ba>
   d8518:	f1ba 0f00 	cmp.w	sl, #0
   d851c:	d109      	bne.n	d8532 <_strtod_r+0x8ba>
   d851e:	e76b      	b.n	d83f8 <_strtod_r+0x780>
   d8520:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d8524:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d8528:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d852c:	f04f 3aff 	mov.w	sl, #4294967295
   d8530:	e146      	b.n	d87c0 <_strtod_r+0xb48>
   d8532:	b117      	cbz	r7, d853a <_strtod_r+0x8c2>
   d8534:	ea17 0f0b 	tst.w	r7, fp
   d8538:	e002      	b.n	d8540 <_strtod_r+0x8c8>
   d853a:	9b06      	ldr	r3, [sp, #24]
   d853c:	ea13 0f0a 	tst.w	r3, sl
   d8540:	f000 813e 	beq.w	d87c0 <_strtod_r+0xb48>
   d8544:	9b07      	ldr	r3, [sp, #28]
   d8546:	9a03      	ldr	r2, [sp, #12]
   d8548:	4650      	mov	r0, sl
   d854a:	4659      	mov	r1, fp
   d854c:	b153      	cbz	r3, d8564 <_strtod_r+0x8ec>
   d854e:	f7ff fb74 	bl	d7c3a <sulp>
   d8552:	4602      	mov	r2, r0
   d8554:	460b      	mov	r3, r1
   d8556:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d855a:	f7fe fdc7 	bl	d70ec <__adddf3>
   d855e:	4682      	mov	sl, r0
   d8560:	468b      	mov	fp, r1
   d8562:	e12d      	b.n	d87c0 <_strtod_r+0xb48>
   d8564:	f7ff fb69 	bl	d7c3a <sulp>
   d8568:	4602      	mov	r2, r0
   d856a:	460b      	mov	r3, r1
   d856c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d8570:	f7fe fdba 	bl	d70e8 <__aeabi_dsub>
   d8574:	2200      	movs	r2, #0
   d8576:	2300      	movs	r3, #0
   d8578:	4682      	mov	sl, r0
   d857a:	468b      	mov	fp, r1
   d857c:	f7ff f9d0 	bl	d7920 <__aeabi_dcmpeq>
   d8580:	2800      	cmp	r0, #0
   d8582:	f47f af49 	bne.w	d8418 <_strtod_r+0x7a0>
   d8586:	e11b      	b.n	d87c0 <_strtod_r+0xb48>
   d8588:	4629      	mov	r1, r5
   d858a:	4620      	mov	r0, r4
   d858c:	f001 f8b3 	bl	d96f6 <__ratio>
   d8590:	ec57 6b10 	vmov	r6, r7, d0
   d8594:	2200      	movs	r2, #0
   d8596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d859a:	ee10 0a10 	vmov	r0, s0
   d859e:	4639      	mov	r1, r7
   d85a0:	f7ff f9d2 	bl	d7948 <__aeabi_dcmple>
   d85a4:	2800      	cmp	r0, #0
   d85a6:	d042      	beq.n	d862e <_strtod_r+0x9b6>
   d85a8:	9b07      	ldr	r3, [sp, #28]
   d85aa:	b123      	cbz	r3, d85b6 <_strtod_r+0x93e>
   d85ac:	f04f 0800 	mov.w	r8, #0
   d85b0:	f8df 9040 	ldr.w	r9, [pc, #64]	; d85f4 <_strtod_r+0x97c>
   d85b4:	e011      	b.n	d85da <_strtod_r+0x962>
   d85b6:	f1ba 0f00 	cmp.w	sl, #0
   d85ba:	d103      	bne.n	d85c4 <_strtod_r+0x94c>
   d85bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d85c0:	b93b      	cbnz	r3, d85d2 <_strtod_r+0x95a>
   d85c2:	e01b      	b.n	d85fc <_strtod_r+0x984>
   d85c4:	f1ba 0f01 	cmp.w	sl, #1
   d85c8:	d103      	bne.n	d85d2 <_strtod_r+0x95a>
   d85ca:	f1bb 0f00 	cmp.w	fp, #0
   d85ce:	f43f af23 	beq.w	d8418 <_strtod_r+0x7a0>
   d85d2:	f8df 9024 	ldr.w	r9, [pc, #36]	; d85f8 <_strtod_r+0x980>
   d85d6:	f04f 0800 	mov.w	r8, #0
   d85da:	2600      	movs	r6, #0
   d85dc:	4f05      	ldr	r7, [pc, #20]	; (d85f4 <_strtod_r+0x97c>)
   d85de:	e039      	b.n	d8654 <_strtod_r+0x9dc>
   d85e0:	fffffc02 	.word	0xfffffc02
   d85e4:	fffffbe2 	.word	0xfffffbe2
   d85e8:	000fffff 	.word	0x000fffff
   d85ec:	7ff00000 	.word	0x7ff00000
   d85f0:	7fefffff 	.word	0x7fefffff
   d85f4:	3ff00000 	.word	0x3ff00000
   d85f8:	bff00000 	.word	0xbff00000
   d85fc:	2200      	movs	r2, #0
   d85fe:	4b98      	ldr	r3, [pc, #608]	; (d8860 <_strtod_r+0xbe8>)
   d8600:	4630      	mov	r0, r6
   d8602:	4639      	mov	r1, r7
   d8604:	f7ff f996 	bl	d7934 <__aeabi_dcmplt>
   d8608:	b940      	cbnz	r0, d861c <_strtod_r+0x9a4>
   d860a:	4630      	mov	r0, r6
   d860c:	4639      	mov	r1, r7
   d860e:	2200      	movs	r2, #0
   d8610:	4b94      	ldr	r3, [pc, #592]	; (d8864 <_strtod_r+0xbec>)
   d8612:	f7fe ff1d 	bl	d7450 <__aeabi_dmul>
   d8616:	4606      	mov	r6, r0
   d8618:	460f      	mov	r7, r1
   d861a:	e001      	b.n	d8620 <_strtod_r+0x9a8>
   d861c:	4f91      	ldr	r7, [pc, #580]	; (d8864 <_strtod_r+0xbec>)
   d861e:	2600      	movs	r6, #0
   d8620:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d8624:	9614      	str	r6, [sp, #80]	; 0x50
   d8626:	9315      	str	r3, [sp, #84]	; 0x54
   d8628:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d862c:	e012      	b.n	d8654 <_strtod_r+0x9dc>
   d862e:	4b8d      	ldr	r3, [pc, #564]	; (d8864 <_strtod_r+0xbec>)
   d8630:	4630      	mov	r0, r6
   d8632:	4639      	mov	r1, r7
   d8634:	2200      	movs	r2, #0
   d8636:	f7fe ff0b 	bl	d7450 <__aeabi_dmul>
   d863a:	9b07      	ldr	r3, [sp, #28]
   d863c:	4606      	mov	r6, r0
   d863e:	460f      	mov	r7, r1
   d8640:	b923      	cbnz	r3, d864c <_strtod_r+0x9d4>
   d8642:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8646:	900e      	str	r0, [sp, #56]	; 0x38
   d8648:	930f      	str	r3, [sp, #60]	; 0x3c
   d864a:	e001      	b.n	d8650 <_strtod_r+0x9d8>
   d864c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d8650:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d8654:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8658:	0d1b      	lsrs	r3, r3, #20
   d865a:	051b      	lsls	r3, r3, #20
   d865c:	9306      	str	r3, [sp, #24]
   d865e:	9a06      	ldr	r2, [sp, #24]
   d8660:	4b81      	ldr	r3, [pc, #516]	; (d8868 <_strtod_r+0xbf0>)
   d8662:	429a      	cmp	r2, r3
   d8664:	d12b      	bne.n	d86be <_strtod_r+0xa46>
   d8666:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d866a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d866e:	ec4b ab10 	vmov	d0, sl, fp
   d8672:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d8676:	f000 ff7b 	bl	d9570 <__ulp>
   d867a:	4640      	mov	r0, r8
   d867c:	ec53 2b10 	vmov	r2, r3, d0
   d8680:	4649      	mov	r1, r9
   d8682:	f7fe fee5 	bl	d7450 <__aeabi_dmul>
   d8686:	4652      	mov	r2, sl
   d8688:	465b      	mov	r3, fp
   d868a:	f7fe fd2f 	bl	d70ec <__adddf3>
   d868e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8692:	0d1b      	lsrs	r3, r3, #20
   d8694:	4a75      	ldr	r2, [pc, #468]	; (d886c <_strtod_r+0xbf4>)
   d8696:	051b      	lsls	r3, r3, #20
   d8698:	4293      	cmp	r3, r2
   d869a:	4682      	mov	sl, r0
   d869c:	d90c      	bls.n	d86b8 <_strtod_r+0xa40>
   d869e:	4b74      	ldr	r3, [pc, #464]	; (d8870 <_strtod_r+0xbf8>)
   d86a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d86a2:	429a      	cmp	r2, r3
   d86a4:	d103      	bne.n	d86ae <_strtod_r+0xa36>
   d86a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d86a8:	3301      	adds	r3, #1
   d86aa:	f43f ad2c 	beq.w	d8106 <_strtod_r+0x48e>
   d86ae:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d8870 <_strtod_r+0xbf8>
   d86b2:	f04f 3aff 	mov.w	sl, #4294967295
   d86b6:	e072      	b.n	d879e <_strtod_r+0xb26>
   d86b8:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d86bc:	e038      	b.n	d8730 <_strtod_r+0xab8>
   d86be:	9b03      	ldr	r3, [sp, #12]
   d86c0:	b333      	cbz	r3, d8710 <_strtod_r+0xa98>
   d86c2:	9b06      	ldr	r3, [sp, #24]
   d86c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d86c8:	d822      	bhi.n	d8710 <_strtod_r+0xa98>
   d86ca:	a35d      	add	r3, pc, #372	; (adr r3, d8840 <_strtod_r+0xbc8>)
   d86cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d86d0:	4630      	mov	r0, r6
   d86d2:	4639      	mov	r1, r7
   d86d4:	f7ff f938 	bl	d7948 <__aeabi_dcmple>
   d86d8:	b1a8      	cbz	r0, d8706 <_strtod_r+0xa8e>
   d86da:	4639      	mov	r1, r7
   d86dc:	4630      	mov	r0, r6
   d86de:	f7ff f98f 	bl	d7a00 <__aeabi_d2uiz>
   d86e2:	2800      	cmp	r0, #0
   d86e4:	bf08      	it	eq
   d86e6:	2001      	moveq	r0, #1
   d86e8:	f7fe fe3c 	bl	d7364 <__aeabi_ui2d>
   d86ec:	9b07      	ldr	r3, [sp, #28]
   d86ee:	4606      	mov	r6, r0
   d86f0:	460f      	mov	r7, r1
   d86f2:	b923      	cbnz	r3, d86fe <_strtod_r+0xa86>
   d86f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d86f8:	9010      	str	r0, [sp, #64]	; 0x40
   d86fa:	9311      	str	r3, [sp, #68]	; 0x44
   d86fc:	e001      	b.n	d8702 <_strtod_r+0xa8a>
   d86fe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d8702:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d8706:	9a06      	ldr	r2, [sp, #24]
   d8708:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d870c:	ebc2 0903 	rsb	r9, r2, r3
   d8710:	ed9d 0b08 	vldr	d0, [sp, #32]
   d8714:	f000 ff2c 	bl	d9570 <__ulp>
   d8718:	4640      	mov	r0, r8
   d871a:	ec53 2b10 	vmov	r2, r3, d0
   d871e:	4649      	mov	r1, r9
   d8720:	f7fe fe96 	bl	d7450 <__aeabi_dmul>
   d8724:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d8728:	f7fe fce0 	bl	d70ec <__adddf3>
   d872c:	4682      	mov	sl, r0
   d872e:	468b      	mov	fp, r1
   d8730:	9b03      	ldr	r3, [sp, #12]
   d8732:	bba3      	cbnz	r3, d879e <_strtod_r+0xb26>
   d8734:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8738:	0d1b      	lsrs	r3, r3, #20
   d873a:	9a06      	ldr	r2, [sp, #24]
   d873c:	051b      	lsls	r3, r3, #20
   d873e:	429a      	cmp	r2, r3
   d8740:	46d8      	mov	r8, fp
   d8742:	d12c      	bne.n	d879e <_strtod_r+0xb26>
   d8744:	4639      	mov	r1, r7
   d8746:	4630      	mov	r0, r6
   d8748:	f7ff f932 	bl	d79b0 <__aeabi_d2iz>
   d874c:	f7fe fe1a 	bl	d7384 <__aeabi_i2d>
   d8750:	460b      	mov	r3, r1
   d8752:	4602      	mov	r2, r0
   d8754:	4639      	mov	r1, r7
   d8756:	4630      	mov	r0, r6
   d8758:	f7fe fcc6 	bl	d70e8 <__aeabi_dsub>
   d875c:	9b07      	ldr	r3, [sp, #28]
   d875e:	4606      	mov	r6, r0
   d8760:	460f      	mov	r7, r1
   d8762:	b92b      	cbnz	r3, d8770 <_strtod_r+0xaf8>
   d8764:	f1ba 0f00 	cmp.w	sl, #0
   d8768:	d102      	bne.n	d8770 <_strtod_r+0xaf8>
   d876a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d876e:	b183      	cbz	r3, d8792 <_strtod_r+0xb1a>
   d8770:	a335      	add	r3, pc, #212	; (adr r3, d8848 <_strtod_r+0xbd0>)
   d8772:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8776:	4630      	mov	r0, r6
   d8778:	4639      	mov	r1, r7
   d877a:	f7ff f8db 	bl	d7934 <__aeabi_dcmplt>
   d877e:	2800      	cmp	r0, #0
   d8780:	d131      	bne.n	d87e6 <_strtod_r+0xb6e>
   d8782:	a333      	add	r3, pc, #204	; (adr r3, d8850 <_strtod_r+0xbd8>)
   d8784:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8788:	4630      	mov	r0, r6
   d878a:	4639      	mov	r1, r7
   d878c:	f7ff f8f0 	bl	d7970 <__aeabi_dcmpgt>
   d8790:	e004      	b.n	d879c <_strtod_r+0xb24>
   d8792:	a331      	add	r3, pc, #196	; (adr r3, d8858 <_strtod_r+0xbe0>)
   d8794:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8798:	f7ff f8cc 	bl	d7934 <__aeabi_dcmplt>
   d879c:	bb18      	cbnz	r0, d87e6 <_strtod_r+0xb6e>
   d879e:	9918      	ldr	r1, [sp, #96]	; 0x60
   d87a0:	9802      	ldr	r0, [sp, #8]
   d87a2:	f000 fc53 	bl	d904c <_Bfree>
   d87a6:	9904      	ldr	r1, [sp, #16]
   d87a8:	9802      	ldr	r0, [sp, #8]
   d87aa:	f000 fc4f 	bl	d904c <_Bfree>
   d87ae:	4629      	mov	r1, r5
   d87b0:	9802      	ldr	r0, [sp, #8]
   d87b2:	f000 fc4b 	bl	d904c <_Bfree>
   d87b6:	4621      	mov	r1, r4
   d87b8:	9802      	ldr	r0, [sp, #8]
   d87ba:	f000 fc47 	bl	d904c <_Bfree>
   d87be:	e56d      	b.n	d829c <_strtod_r+0x624>
   d87c0:	9b03      	ldr	r3, [sp, #12]
   d87c2:	b183      	cbz	r3, d87e6 <_strtod_r+0xb6e>
   d87c4:	4b2b      	ldr	r3, [pc, #172]	; (d8874 <_strtod_r+0xbfc>)
   d87c6:	930b      	str	r3, [sp, #44]	; 0x2c
   d87c8:	2300      	movs	r3, #0
   d87ca:	930a      	str	r3, [sp, #40]	; 0x28
   d87cc:	4650      	mov	r0, sl
   d87ce:	4659      	mov	r1, fp
   d87d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d87d4:	f7fe fe3c 	bl	d7450 <__aeabi_dmul>
   d87d8:	4682      	mov	sl, r0
   d87da:	468b      	mov	fp, r1
   d87dc:	b919      	cbnz	r1, d87e6 <_strtod_r+0xb6e>
   d87de:	b910      	cbnz	r0, d87e6 <_strtod_r+0xb6e>
   d87e0:	9a02      	ldr	r2, [sp, #8]
   d87e2:	2322      	movs	r3, #34	; 0x22
   d87e4:	6013      	str	r3, [r2, #0]
   d87e6:	9918      	ldr	r1, [sp, #96]	; 0x60
   d87e8:	9802      	ldr	r0, [sp, #8]
   d87ea:	f000 fc2f 	bl	d904c <_Bfree>
   d87ee:	9904      	ldr	r1, [sp, #16]
   d87f0:	9802      	ldr	r0, [sp, #8]
   d87f2:	f000 fc2b 	bl	d904c <_Bfree>
   d87f6:	4629      	mov	r1, r5
   d87f8:	9802      	ldr	r0, [sp, #8]
   d87fa:	f000 fc27 	bl	d904c <_Bfree>
   d87fe:	9905      	ldr	r1, [sp, #20]
   d8800:	9802      	ldr	r0, [sp, #8]
   d8802:	f000 fc23 	bl	d904c <_Bfree>
   d8806:	4621      	mov	r1, r4
   d8808:	9802      	ldr	r0, [sp, #8]
   d880a:	f000 fc1f 	bl	d904c <_Bfree>
   d880e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d8810:	b113      	cbz	r3, d8818 <_strtod_r+0xba0>
   d8812:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d8814:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8816:	6013      	str	r3, [r2, #0]
   d8818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d881a:	b11b      	cbz	r3, d8824 <_strtod_r+0xbac>
   d881c:	4652      	mov	r2, sl
   d881e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d8822:	e007      	b.n	d8834 <_strtod_r+0xbbc>
   d8824:	4652      	mov	r2, sl
   d8826:	465b      	mov	r3, fp
   d8828:	e004      	b.n	d8834 <_strtod_r+0xbbc>
   d882a:	2500      	movs	r5, #0
   d882c:	462a      	mov	r2, r5
   d882e:	2101      	movs	r1, #1
   d8830:	f7ff bb41 	b.w	d7eb6 <_strtod_r+0x23e>
   d8834:	ec43 2b10 	vmov	d0, r2, r3
   d8838:	b01d      	add	sp, #116	; 0x74
   d883a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d883e:	bf00      	nop
   d8840:	ffc00000 	.word	0xffc00000
   d8844:	41dfffff 	.word	0x41dfffff
   d8848:	94a03595 	.word	0x94a03595
   d884c:	3fdfffff 	.word	0x3fdfffff
   d8850:	35afe535 	.word	0x35afe535
   d8854:	3fe00000 	.word	0x3fe00000
   d8858:	94a03595 	.word	0x94a03595
   d885c:	3fcfffff 	.word	0x3fcfffff
   d8860:	3ff00000 	.word	0x3ff00000
   d8864:	3fe00000 	.word	0x3fe00000
   d8868:	7fe00000 	.word	0x7fe00000
   d886c:	7c9fffff 	.word	0x7c9fffff
   d8870:	7fefffff 	.word	0x7fefffff
   d8874:	39500000 	.word	0x39500000

000d8878 <strtod>:
   d8878:	4b02      	ldr	r3, [pc, #8]	; (d8884 <strtod+0xc>)
   d887a:	460a      	mov	r2, r1
   d887c:	4601      	mov	r1, r0
   d887e:	6818      	ldr	r0, [r3, #0]
   d8880:	f7ff b9fa 	b.w	d7c78 <_strtod_r>
   d8884:	2003d658 	.word	0x2003d658

000d8888 <_strtol_r>:
   d8888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d888c:	4680      	mov	r8, r0
   d888e:	4840      	ldr	r0, [pc, #256]	; (d8990 <_strtol_r+0x108>)
   d8890:	f8d0 9000 	ldr.w	r9, [r0]
   d8894:	460f      	mov	r7, r1
   d8896:	463d      	mov	r5, r7
   d8898:	f815 4b01 	ldrb.w	r4, [r5], #1
   d889c:	eb09 0004 	add.w	r0, r9, r4
   d88a0:	7840      	ldrb	r0, [r0, #1]
   d88a2:	f000 0008 	and.w	r0, r0, #8
   d88a6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d88aa:	b108      	cbz	r0, d88b0 <_strtol_r+0x28>
   d88ac:	462f      	mov	r7, r5
   d88ae:	e7f2      	b.n	d8896 <_strtol_r+0xe>
   d88b0:	2c2d      	cmp	r4, #45	; 0x2d
   d88b2:	d103      	bne.n	d88bc <_strtol_r+0x34>
   d88b4:	1cbd      	adds	r5, r7, #2
   d88b6:	787c      	ldrb	r4, [r7, #1]
   d88b8:	2601      	movs	r6, #1
   d88ba:	e003      	b.n	d88c4 <_strtol_r+0x3c>
   d88bc:	2c2b      	cmp	r4, #43	; 0x2b
   d88be:	bf04      	itt	eq
   d88c0:	787c      	ldrbeq	r4, [r7, #1]
   d88c2:	1cbd      	addeq	r5, r7, #2
   d88c4:	b113      	cbz	r3, d88cc <_strtol_r+0x44>
   d88c6:	2b10      	cmp	r3, #16
   d88c8:	d10a      	bne.n	d88e0 <_strtol_r+0x58>
   d88ca:	e05b      	b.n	d8984 <_strtol_r+0xfc>
   d88cc:	2c30      	cmp	r4, #48	; 0x30
   d88ce:	d157      	bne.n	d8980 <_strtol_r+0xf8>
   d88d0:	7828      	ldrb	r0, [r5, #0]
   d88d2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d88d6:	2858      	cmp	r0, #88	; 0x58
   d88d8:	d14d      	bne.n	d8976 <_strtol_r+0xee>
   d88da:	786c      	ldrb	r4, [r5, #1]
   d88dc:	2310      	movs	r3, #16
   d88de:	3502      	adds	r5, #2
   d88e0:	2e00      	cmp	r6, #0
   d88e2:	bf14      	ite	ne
   d88e4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d88e8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d88ec:	2700      	movs	r7, #0
   d88ee:	fbbc faf3 	udiv	sl, ip, r3
   d88f2:	4638      	mov	r0, r7
   d88f4:	fb03 cc1a 	mls	ip, r3, sl, ip
   d88f8:	eb09 0e04 	add.w	lr, r9, r4
   d88fc:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8900:	f01e 0f04 	tst.w	lr, #4
   d8904:	d001      	beq.n	d890a <_strtol_r+0x82>
   d8906:	3c30      	subs	r4, #48	; 0x30
   d8908:	e00b      	b.n	d8922 <_strtol_r+0x9a>
   d890a:	f01e 0e03 	ands.w	lr, lr, #3
   d890e:	d01b      	beq.n	d8948 <_strtol_r+0xc0>
   d8910:	f1be 0f01 	cmp.w	lr, #1
   d8914:	bf0c      	ite	eq
   d8916:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d891a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d891e:	ebce 0404 	rsb	r4, lr, r4
   d8922:	42a3      	cmp	r3, r4
   d8924:	dd10      	ble.n	d8948 <_strtol_r+0xc0>
   d8926:	f1b7 3fff 	cmp.w	r7, #4294967295
   d892a:	d00a      	beq.n	d8942 <_strtol_r+0xba>
   d892c:	4550      	cmp	r0, sl
   d892e:	d806      	bhi.n	d893e <_strtol_r+0xb6>
   d8930:	d101      	bne.n	d8936 <_strtol_r+0xae>
   d8932:	4564      	cmp	r4, ip
   d8934:	dc03      	bgt.n	d893e <_strtol_r+0xb6>
   d8936:	fb03 4000 	mla	r0, r3, r0, r4
   d893a:	2701      	movs	r7, #1
   d893c:	e001      	b.n	d8942 <_strtol_r+0xba>
   d893e:	f04f 37ff 	mov.w	r7, #4294967295
   d8942:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8946:	e7d7      	b.n	d88f8 <_strtol_r+0x70>
   d8948:	1c7b      	adds	r3, r7, #1
   d894a:	d10c      	bne.n	d8966 <_strtol_r+0xde>
   d894c:	2e00      	cmp	r6, #0
   d894e:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8952:	bf14      	ite	ne
   d8954:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d8958:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d895c:	f8c8 3000 	str.w	r3, [r8]
   d8960:	b92a      	cbnz	r2, d896e <_strtol_r+0xe6>
   d8962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8966:	b106      	cbz	r6, d896a <_strtol_r+0xe2>
   d8968:	4240      	negs	r0, r0
   d896a:	b172      	cbz	r2, d898a <_strtol_r+0x102>
   d896c:	b107      	cbz	r7, d8970 <_strtol_r+0xe8>
   d896e:	1e69      	subs	r1, r5, #1
   d8970:	6011      	str	r1, [r2, #0]
   d8972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8976:	2430      	movs	r4, #48	; 0x30
   d8978:	2b00      	cmp	r3, #0
   d897a:	d1b1      	bne.n	d88e0 <_strtol_r+0x58>
   d897c:	2308      	movs	r3, #8
   d897e:	e7af      	b.n	d88e0 <_strtol_r+0x58>
   d8980:	230a      	movs	r3, #10
   d8982:	e7ad      	b.n	d88e0 <_strtol_r+0x58>
   d8984:	2c30      	cmp	r4, #48	; 0x30
   d8986:	d0a3      	beq.n	d88d0 <_strtol_r+0x48>
   d8988:	e7aa      	b.n	d88e0 <_strtol_r+0x58>
   d898a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d898e:	bf00      	nop
   d8990:	2003d5f4 	.word	0x2003d5f4

000d8994 <strtol>:
   d8994:	4613      	mov	r3, r2
   d8996:	460a      	mov	r2, r1
   d8998:	4601      	mov	r1, r0
   d899a:	4802      	ldr	r0, [pc, #8]	; (d89a4 <strtol+0x10>)
   d899c:	6800      	ldr	r0, [r0, #0]
   d899e:	f7ff bf73 	b.w	d8888 <_strtol_r>
   d89a2:	bf00      	nop
   d89a4:	2003d658 	.word	0x2003d658

000d89a8 <rshift>:
   d89a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d89aa:	6906      	ldr	r6, [r0, #16]
   d89ac:	114b      	asrs	r3, r1, #5
   d89ae:	42b3      	cmp	r3, r6
   d89b0:	f100 0514 	add.w	r5, r0, #20
   d89b4:	da27      	bge.n	d8a06 <rshift+0x5e>
   d89b6:	f011 011f 	ands.w	r1, r1, #31
   d89ba:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d89be:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d89c2:	d101      	bne.n	d89c8 <rshift+0x20>
   d89c4:	4629      	mov	r1, r5
   d89c6:	e016      	b.n	d89f6 <rshift+0x4e>
   d89c8:	1d14      	adds	r4, r2, #4
   d89ca:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d89ce:	f1c1 0e20 	rsb	lr, r1, #32
   d89d2:	40ca      	lsrs	r2, r1
   d89d4:	462b      	mov	r3, r5
   d89d6:	42b4      	cmp	r4, r6
   d89d8:	d209      	bcs.n	d89ee <rshift+0x46>
   d89da:	6827      	ldr	r7, [r4, #0]
   d89dc:	fa07 f70e 	lsl.w	r7, r7, lr
   d89e0:	433a      	orrs	r2, r7
   d89e2:	f843 2b04 	str.w	r2, [r3], #4
   d89e6:	f854 2b04 	ldr.w	r2, [r4], #4
   d89ea:	40ca      	lsrs	r2, r1
   d89ec:	e7f3      	b.n	d89d6 <rshift+0x2e>
   d89ee:	601a      	str	r2, [r3, #0]
   d89f0:	b152      	cbz	r2, d8a08 <rshift+0x60>
   d89f2:	3304      	adds	r3, #4
   d89f4:	e008      	b.n	d8a08 <rshift+0x60>
   d89f6:	42b2      	cmp	r2, r6
   d89f8:	460b      	mov	r3, r1
   d89fa:	d205      	bcs.n	d8a08 <rshift+0x60>
   d89fc:	f852 3b04 	ldr.w	r3, [r2], #4
   d8a00:	f841 3b04 	str.w	r3, [r1], #4
   d8a04:	e7f7      	b.n	d89f6 <rshift+0x4e>
   d8a06:	462b      	mov	r3, r5
   d8a08:	1b5b      	subs	r3, r3, r5
   d8a0a:	109b      	asrs	r3, r3, #2
   d8a0c:	6103      	str	r3, [r0, #16]
   d8a0e:	b903      	cbnz	r3, d8a12 <rshift+0x6a>
   d8a10:	6143      	str	r3, [r0, #20]
   d8a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8a14 <__hexdig_fun>:
   d8a14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8a18:	2b09      	cmp	r3, #9
   d8a1a:	d801      	bhi.n	d8a20 <__hexdig_fun+0xc>
   d8a1c:	3820      	subs	r0, #32
   d8a1e:	e00a      	b.n	d8a36 <__hexdig_fun+0x22>
   d8a20:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d8a24:	2b05      	cmp	r3, #5
   d8a26:	d801      	bhi.n	d8a2c <__hexdig_fun+0x18>
   d8a28:	3847      	subs	r0, #71	; 0x47
   d8a2a:	e004      	b.n	d8a36 <__hexdig_fun+0x22>
   d8a2c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d8a30:	2b05      	cmp	r3, #5
   d8a32:	d802      	bhi.n	d8a3a <__hexdig_fun+0x26>
   d8a34:	3827      	subs	r0, #39	; 0x27
   d8a36:	b2c0      	uxtb	r0, r0
   d8a38:	4770      	bx	lr
   d8a3a:	2000      	movs	r0, #0
   d8a3c:	4770      	bx	lr

000d8a3e <__gethex>:
   d8a3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8a42:	b08b      	sub	sp, #44	; 0x2c
   d8a44:	468a      	mov	sl, r1
   d8a46:	4690      	mov	r8, r2
   d8a48:	9306      	str	r3, [sp, #24]
   d8a4a:	9002      	str	r0, [sp, #8]
   d8a4c:	f7ff f862 	bl	d7b14 <_localeconv_r>
   d8a50:	6803      	ldr	r3, [r0, #0]
   d8a52:	9303      	str	r3, [sp, #12]
   d8a54:	4618      	mov	r0, r3
   d8a56:	f7ff f8a6 	bl	d7ba6 <strlen>
   d8a5a:	9b03      	ldr	r3, [sp, #12]
   d8a5c:	9001      	str	r0, [sp, #4]
   d8a5e:	4403      	add	r3, r0
   d8a60:	f04f 0b00 	mov.w	fp, #0
   d8a64:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d8a68:	9307      	str	r3, [sp, #28]
   d8a6a:	f8da 3000 	ldr.w	r3, [sl]
   d8a6e:	3302      	adds	r3, #2
   d8a70:	461f      	mov	r7, r3
   d8a72:	f813 0b01 	ldrb.w	r0, [r3], #1
   d8a76:	2830      	cmp	r0, #48	; 0x30
   d8a78:	d102      	bne.n	d8a80 <__gethex+0x42>
   d8a7a:	f10b 0b01 	add.w	fp, fp, #1
   d8a7e:	e7f7      	b.n	d8a70 <__gethex+0x32>
   d8a80:	f7ff ffc8 	bl	d8a14 <__hexdig_fun>
   d8a84:	4604      	mov	r4, r0
   d8a86:	b9e0      	cbnz	r0, d8ac2 <__gethex+0x84>
   d8a88:	9a01      	ldr	r2, [sp, #4]
   d8a8a:	9903      	ldr	r1, [sp, #12]
   d8a8c:	4638      	mov	r0, r7
   d8a8e:	f7ff f892 	bl	d7bb6 <strncmp>
   d8a92:	2800      	cmp	r0, #0
   d8a94:	d134      	bne.n	d8b00 <__gethex+0xc2>
   d8a96:	9b01      	ldr	r3, [sp, #4]
   d8a98:	5cf8      	ldrb	r0, [r7, r3]
   d8a9a:	18fe      	adds	r6, r7, r3
   d8a9c:	f7ff ffba 	bl	d8a14 <__hexdig_fun>
   d8aa0:	b380      	cbz	r0, d8b04 <__gethex+0xc6>
   d8aa2:	4633      	mov	r3, r6
   d8aa4:	7818      	ldrb	r0, [r3, #0]
   d8aa6:	2830      	cmp	r0, #48	; 0x30
   d8aa8:	461f      	mov	r7, r3
   d8aaa:	f103 0301 	add.w	r3, r3, #1
   d8aae:	d0f9      	beq.n	d8aa4 <__gethex+0x66>
   d8ab0:	f7ff ffb0 	bl	d8a14 <__hexdig_fun>
   d8ab4:	fab0 f580 	clz	r5, r0
   d8ab8:	096d      	lsrs	r5, r5, #5
   d8aba:	4634      	mov	r4, r6
   d8abc:	f04f 0b01 	mov.w	fp, #1
   d8ac0:	e001      	b.n	d8ac6 <__gethex+0x88>
   d8ac2:	2500      	movs	r5, #0
   d8ac4:	462c      	mov	r4, r5
   d8ac6:	463a      	mov	r2, r7
   d8ac8:	4616      	mov	r6, r2
   d8aca:	3201      	adds	r2, #1
   d8acc:	7830      	ldrb	r0, [r6, #0]
   d8ace:	f7ff ffa1 	bl	d8a14 <__hexdig_fun>
   d8ad2:	2800      	cmp	r0, #0
   d8ad4:	d1f8      	bne.n	d8ac8 <__gethex+0x8a>
   d8ad6:	9a01      	ldr	r2, [sp, #4]
   d8ad8:	9903      	ldr	r1, [sp, #12]
   d8ada:	4630      	mov	r0, r6
   d8adc:	f7ff f86b 	bl	d7bb6 <strncmp>
   d8ae0:	b950      	cbnz	r0, d8af8 <__gethex+0xba>
   d8ae2:	b954      	cbnz	r4, d8afa <__gethex+0xbc>
   d8ae4:	9b01      	ldr	r3, [sp, #4]
   d8ae6:	18f4      	adds	r4, r6, r3
   d8ae8:	4622      	mov	r2, r4
   d8aea:	4616      	mov	r6, r2
   d8aec:	3201      	adds	r2, #1
   d8aee:	7830      	ldrb	r0, [r6, #0]
   d8af0:	f7ff ff90 	bl	d8a14 <__hexdig_fun>
   d8af4:	2800      	cmp	r0, #0
   d8af6:	d1f8      	bne.n	d8aea <__gethex+0xac>
   d8af8:	b134      	cbz	r4, d8b08 <__gethex+0xca>
   d8afa:	1ba4      	subs	r4, r4, r6
   d8afc:	00a4      	lsls	r4, r4, #2
   d8afe:	e003      	b.n	d8b08 <__gethex+0xca>
   d8b00:	463e      	mov	r6, r7
   d8b02:	e000      	b.n	d8b06 <__gethex+0xc8>
   d8b04:	4604      	mov	r4, r0
   d8b06:	2501      	movs	r5, #1
   d8b08:	7833      	ldrb	r3, [r6, #0]
   d8b0a:	2b50      	cmp	r3, #80	; 0x50
   d8b0c:	d001      	beq.n	d8b12 <__gethex+0xd4>
   d8b0e:	2b70      	cmp	r3, #112	; 0x70
   d8b10:	d12a      	bne.n	d8b68 <__gethex+0x12a>
   d8b12:	7873      	ldrb	r3, [r6, #1]
   d8b14:	2b2b      	cmp	r3, #43	; 0x2b
   d8b16:	d008      	beq.n	d8b2a <__gethex+0xec>
   d8b18:	2b2d      	cmp	r3, #45	; 0x2d
   d8b1a:	d003      	beq.n	d8b24 <__gethex+0xe6>
   d8b1c:	1c71      	adds	r1, r6, #1
   d8b1e:	f04f 0900 	mov.w	r9, #0
   d8b22:	e005      	b.n	d8b30 <__gethex+0xf2>
   d8b24:	f04f 0901 	mov.w	r9, #1
   d8b28:	e001      	b.n	d8b2e <__gethex+0xf0>
   d8b2a:	f04f 0900 	mov.w	r9, #0
   d8b2e:	1cb1      	adds	r1, r6, #2
   d8b30:	7808      	ldrb	r0, [r1, #0]
   d8b32:	f7ff ff6f 	bl	d8a14 <__hexdig_fun>
   d8b36:	1e43      	subs	r3, r0, #1
   d8b38:	b2db      	uxtb	r3, r3
   d8b3a:	2b18      	cmp	r3, #24
   d8b3c:	d814      	bhi.n	d8b68 <__gethex+0x12a>
   d8b3e:	f1a0 0210 	sub.w	r2, r0, #16
   d8b42:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d8b46:	f7ff ff65 	bl	d8a14 <__hexdig_fun>
   d8b4a:	1e43      	subs	r3, r0, #1
   d8b4c:	b2db      	uxtb	r3, r3
   d8b4e:	2b18      	cmp	r3, #24
   d8b50:	d804      	bhi.n	d8b5c <__gethex+0x11e>
   d8b52:	230a      	movs	r3, #10
   d8b54:	fb03 0202 	mla	r2, r3, r2, r0
   d8b58:	3a10      	subs	r2, #16
   d8b5a:	e7f2      	b.n	d8b42 <__gethex+0x104>
   d8b5c:	f1b9 0f00 	cmp.w	r9, #0
   d8b60:	d000      	beq.n	d8b64 <__gethex+0x126>
   d8b62:	4252      	negs	r2, r2
   d8b64:	4414      	add	r4, r2
   d8b66:	e000      	b.n	d8b6a <__gethex+0x12c>
   d8b68:	4631      	mov	r1, r6
   d8b6a:	f8ca 1000 	str.w	r1, [sl]
   d8b6e:	b12d      	cbz	r5, d8b7c <__gethex+0x13e>
   d8b70:	f1bb 0f00 	cmp.w	fp, #0
   d8b74:	bf14      	ite	ne
   d8b76:	2000      	movne	r0, #0
   d8b78:	2006      	moveq	r0, #6
   d8b7a:	e17c      	b.n	d8e76 <__gethex+0x438>
   d8b7c:	1bf3      	subs	r3, r6, r7
   d8b7e:	3b01      	subs	r3, #1
   d8b80:	4629      	mov	r1, r5
   d8b82:	2b07      	cmp	r3, #7
   d8b84:	dd02      	ble.n	d8b8c <__gethex+0x14e>
   d8b86:	3101      	adds	r1, #1
   d8b88:	105b      	asrs	r3, r3, #1
   d8b8a:	e7fa      	b.n	d8b82 <__gethex+0x144>
   d8b8c:	9802      	ldr	r0, [sp, #8]
   d8b8e:	f000 fa28 	bl	d8fe2 <_Balloc>
   d8b92:	9b01      	ldr	r3, [sp, #4]
   d8b94:	f100 0a14 	add.w	sl, r0, #20
   d8b98:	f04f 0900 	mov.w	r9, #0
   d8b9c:	f1c3 0301 	rsb	r3, r3, #1
   d8ba0:	4605      	mov	r5, r0
   d8ba2:	f8cd a010 	str.w	sl, [sp, #16]
   d8ba6:	46cb      	mov	fp, r9
   d8ba8:	9308      	str	r3, [sp, #32]
   d8baa:	42b7      	cmp	r7, r6
   d8bac:	d22f      	bcs.n	d8c0e <__gethex+0x1d0>
   d8bae:	1e73      	subs	r3, r6, #1
   d8bb0:	9305      	str	r3, [sp, #20]
   d8bb2:	9a07      	ldr	r2, [sp, #28]
   d8bb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d8bb8:	4293      	cmp	r3, r2
   d8bba:	d00b      	beq.n	d8bd4 <__gethex+0x196>
   d8bbc:	f1bb 0f20 	cmp.w	fp, #32
   d8bc0:	d116      	bne.n	d8bf0 <__gethex+0x1b2>
   d8bc2:	9b04      	ldr	r3, [sp, #16]
   d8bc4:	f8c3 9000 	str.w	r9, [r3]
   d8bc8:	3304      	adds	r3, #4
   d8bca:	f04f 0900 	mov.w	r9, #0
   d8bce:	9304      	str	r3, [sp, #16]
   d8bd0:	46cb      	mov	fp, r9
   d8bd2:	e00d      	b.n	d8bf0 <__gethex+0x1b2>
   d8bd4:	9b05      	ldr	r3, [sp, #20]
   d8bd6:	9a08      	ldr	r2, [sp, #32]
   d8bd8:	4413      	add	r3, r2
   d8bda:	429f      	cmp	r7, r3
   d8bdc:	d8ee      	bhi.n	d8bbc <__gethex+0x17e>
   d8bde:	4618      	mov	r0, r3
   d8be0:	9a01      	ldr	r2, [sp, #4]
   d8be2:	9903      	ldr	r1, [sp, #12]
   d8be4:	9309      	str	r3, [sp, #36]	; 0x24
   d8be6:	f7fe ffe6 	bl	d7bb6 <strncmp>
   d8bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8bec:	b168      	cbz	r0, d8c0a <__gethex+0x1cc>
   d8bee:	e7e5      	b.n	d8bbc <__gethex+0x17e>
   d8bf0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d8bf4:	f7ff ff0e 	bl	d8a14 <__hexdig_fun>
   d8bf8:	f000 000f 	and.w	r0, r0, #15
   d8bfc:	fa00 f00b 	lsl.w	r0, r0, fp
   d8c00:	9b05      	ldr	r3, [sp, #20]
   d8c02:	ea49 0900 	orr.w	r9, r9, r0
   d8c06:	f10b 0b04 	add.w	fp, fp, #4
   d8c0a:	461e      	mov	r6, r3
   d8c0c:	e7cd      	b.n	d8baa <__gethex+0x16c>
   d8c0e:	9804      	ldr	r0, [sp, #16]
   d8c10:	f840 9b04 	str.w	r9, [r0], #4
   d8c14:	ebca 0000 	rsb	r0, sl, r0
   d8c18:	1080      	asrs	r0, r0, #2
   d8c1a:	6128      	str	r0, [r5, #16]
   d8c1c:	0147      	lsls	r7, r0, #5
   d8c1e:	4648      	mov	r0, r9
   d8c20:	f000 faa4 	bl	d916c <__hi0bits>
   d8c24:	f8d8 6000 	ldr.w	r6, [r8]
   d8c28:	1a38      	subs	r0, r7, r0
   d8c2a:	42b0      	cmp	r0, r6
   d8c2c:	dd26      	ble.n	d8c7c <__gethex+0x23e>
   d8c2e:	1b87      	subs	r7, r0, r6
   d8c30:	4639      	mov	r1, r7
   d8c32:	4628      	mov	r0, r5
   d8c34:	f000 fda3 	bl	d977e <__any_on>
   d8c38:	b1c8      	cbz	r0, d8c6e <__gethex+0x230>
   d8c3a:	1e7b      	subs	r3, r7, #1
   d8c3c:	1159      	asrs	r1, r3, #5
   d8c3e:	f003 021f 	and.w	r2, r3, #31
   d8c42:	f04f 0901 	mov.w	r9, #1
   d8c46:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d8c4a:	fa09 f202 	lsl.w	r2, r9, r2
   d8c4e:	420a      	tst	r2, r1
   d8c50:	d00e      	beq.n	d8c70 <__gethex+0x232>
   d8c52:	454b      	cmp	r3, r9
   d8c54:	dc02      	bgt.n	d8c5c <__gethex+0x21e>
   d8c56:	f04f 0902 	mov.w	r9, #2
   d8c5a:	e009      	b.n	d8c70 <__gethex+0x232>
   d8c5c:	1eb9      	subs	r1, r7, #2
   d8c5e:	4628      	mov	r0, r5
   d8c60:	f000 fd8d 	bl	d977e <__any_on>
   d8c64:	2800      	cmp	r0, #0
   d8c66:	d0f6      	beq.n	d8c56 <__gethex+0x218>
   d8c68:	f04f 0903 	mov.w	r9, #3
   d8c6c:	e000      	b.n	d8c70 <__gethex+0x232>
   d8c6e:	4681      	mov	r9, r0
   d8c70:	4639      	mov	r1, r7
   d8c72:	4628      	mov	r0, r5
   d8c74:	f7ff fe98 	bl	d89a8 <rshift>
   d8c78:	443c      	add	r4, r7
   d8c7a:	e00c      	b.n	d8c96 <__gethex+0x258>
   d8c7c:	da09      	bge.n	d8c92 <__gethex+0x254>
   d8c7e:	1a37      	subs	r7, r6, r0
   d8c80:	4629      	mov	r1, r5
   d8c82:	463a      	mov	r2, r7
   d8c84:	9802      	ldr	r0, [sp, #8]
   d8c86:	f000 fba7 	bl	d93d8 <__lshift>
   d8c8a:	1be4      	subs	r4, r4, r7
   d8c8c:	4605      	mov	r5, r0
   d8c8e:	f100 0a14 	add.w	sl, r0, #20
   d8c92:	f04f 0900 	mov.w	r9, #0
   d8c96:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8c9a:	429c      	cmp	r4, r3
   d8c9c:	dd08      	ble.n	d8cb0 <__gethex+0x272>
   d8c9e:	9802      	ldr	r0, [sp, #8]
   d8ca0:	4629      	mov	r1, r5
   d8ca2:	f000 f9d3 	bl	d904c <_Bfree>
   d8ca6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8ca8:	2300      	movs	r3, #0
   d8caa:	6013      	str	r3, [r2, #0]
   d8cac:	20a3      	movs	r0, #163	; 0xa3
   d8cae:	e0e2      	b.n	d8e76 <__gethex+0x438>
   d8cb0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d8cb4:	4284      	cmp	r4, r0
   d8cb6:	da53      	bge.n	d8d60 <__gethex+0x322>
   d8cb8:	1b04      	subs	r4, r0, r4
   d8cba:	42a6      	cmp	r6, r4
   d8cbc:	dc2e      	bgt.n	d8d1c <__gethex+0x2de>
   d8cbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d8cc2:	2b02      	cmp	r3, #2
   d8cc4:	d01a      	beq.n	d8cfc <__gethex+0x2be>
   d8cc6:	2b03      	cmp	r3, #3
   d8cc8:	d01c      	beq.n	d8d04 <__gethex+0x2c6>
   d8cca:	2b01      	cmp	r3, #1
   d8ccc:	d11d      	bne.n	d8d0a <__gethex+0x2cc>
   d8cce:	42a6      	cmp	r6, r4
   d8cd0:	d11b      	bne.n	d8d0a <__gethex+0x2cc>
   d8cd2:	2e01      	cmp	r6, #1
   d8cd4:	dc0b      	bgt.n	d8cee <__gethex+0x2b0>
   d8cd6:	9a06      	ldr	r2, [sp, #24]
   d8cd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d8cdc:	6013      	str	r3, [r2, #0]
   d8cde:	2301      	movs	r3, #1
   d8ce0:	612b      	str	r3, [r5, #16]
   d8ce2:	f8ca 3000 	str.w	r3, [sl]
   d8ce6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d8ce8:	2062      	movs	r0, #98	; 0x62
   d8cea:	601d      	str	r5, [r3, #0]
   d8cec:	e0c3      	b.n	d8e76 <__gethex+0x438>
   d8cee:	1e71      	subs	r1, r6, #1
   d8cf0:	4628      	mov	r0, r5
   d8cf2:	f000 fd44 	bl	d977e <__any_on>
   d8cf6:	2800      	cmp	r0, #0
   d8cf8:	d1ed      	bne.n	d8cd6 <__gethex+0x298>
   d8cfa:	e006      	b.n	d8d0a <__gethex+0x2cc>
   d8cfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8cfe:	2b00      	cmp	r3, #0
   d8d00:	d0e9      	beq.n	d8cd6 <__gethex+0x298>
   d8d02:	e002      	b.n	d8d0a <__gethex+0x2cc>
   d8d04:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8d06:	2b00      	cmp	r3, #0
   d8d08:	d1e5      	bne.n	d8cd6 <__gethex+0x298>
   d8d0a:	9802      	ldr	r0, [sp, #8]
   d8d0c:	4629      	mov	r1, r5
   d8d0e:	f000 f99d 	bl	d904c <_Bfree>
   d8d12:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8d14:	2300      	movs	r3, #0
   d8d16:	6013      	str	r3, [r2, #0]
   d8d18:	2050      	movs	r0, #80	; 0x50
   d8d1a:	e0ac      	b.n	d8e76 <__gethex+0x438>
   d8d1c:	1e67      	subs	r7, r4, #1
   d8d1e:	f1b9 0f00 	cmp.w	r9, #0
   d8d22:	d106      	bne.n	d8d32 <__gethex+0x2f4>
   d8d24:	b13f      	cbz	r7, d8d36 <__gethex+0x2f8>
   d8d26:	4639      	mov	r1, r7
   d8d28:	4628      	mov	r0, r5
   d8d2a:	f000 fd28 	bl	d977e <__any_on>
   d8d2e:	4681      	mov	r9, r0
   d8d30:	e001      	b.n	d8d36 <__gethex+0x2f8>
   d8d32:	f04f 0901 	mov.w	r9, #1
   d8d36:	117a      	asrs	r2, r7, #5
   d8d38:	2301      	movs	r3, #1
   d8d3a:	f007 071f 	and.w	r7, r7, #31
   d8d3e:	fa03 f707 	lsl.w	r7, r3, r7
   d8d42:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d8d46:	4621      	mov	r1, r4
   d8d48:	421f      	tst	r7, r3
   d8d4a:	4628      	mov	r0, r5
   d8d4c:	bf18      	it	ne
   d8d4e:	f049 0902 	orrne.w	r9, r9, #2
   d8d52:	1b36      	subs	r6, r6, r4
   d8d54:	f7ff fe28 	bl	d89a8 <rshift>
   d8d58:	2702      	movs	r7, #2
   d8d5a:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d8d5e:	e000      	b.n	d8d62 <__gethex+0x324>
   d8d60:	2701      	movs	r7, #1
   d8d62:	f1b9 0f00 	cmp.w	r9, #0
   d8d66:	f000 8081 	beq.w	d8e6c <__gethex+0x42e>
   d8d6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d8d6e:	2b02      	cmp	r3, #2
   d8d70:	d00e      	beq.n	d8d90 <__gethex+0x352>
   d8d72:	2b03      	cmp	r3, #3
   d8d74:	d010      	beq.n	d8d98 <__gethex+0x35a>
   d8d76:	2b01      	cmp	r3, #1
   d8d78:	d176      	bne.n	d8e68 <__gethex+0x42a>
   d8d7a:	f019 0f02 	tst.w	r9, #2
   d8d7e:	d073      	beq.n	d8e68 <__gethex+0x42a>
   d8d80:	f8da 0000 	ldr.w	r0, [sl]
   d8d84:	ea49 0900 	orr.w	r9, r9, r0
   d8d88:	f019 0f01 	tst.w	r9, #1
   d8d8c:	d107      	bne.n	d8d9e <__gethex+0x360>
   d8d8e:	e06b      	b.n	d8e68 <__gethex+0x42a>
   d8d90:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8d92:	f1c3 0301 	rsb	r3, r3, #1
   d8d96:	9315      	str	r3, [sp, #84]	; 0x54
   d8d98:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8d9a:	2b00      	cmp	r3, #0
   d8d9c:	d064      	beq.n	d8e68 <__gethex+0x42a>
   d8d9e:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d8da2:	f105 0314 	add.w	r3, r5, #20
   d8da6:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d8daa:	eb03 0109 	add.w	r1, r3, r9
   d8dae:	2000      	movs	r0, #0
   d8db0:	681a      	ldr	r2, [r3, #0]
   d8db2:	f1b2 3fff 	cmp.w	r2, #4294967295
   d8db6:	d002      	beq.n	d8dbe <__gethex+0x380>
   d8db8:	3201      	adds	r2, #1
   d8dba:	601a      	str	r2, [r3, #0]
   d8dbc:	e020      	b.n	d8e00 <__gethex+0x3c2>
   d8dbe:	f843 0b04 	str.w	r0, [r3], #4
   d8dc2:	4299      	cmp	r1, r3
   d8dc4:	d8f4      	bhi.n	d8db0 <__gethex+0x372>
   d8dc6:	68ab      	ldr	r3, [r5, #8]
   d8dc8:	459a      	cmp	sl, r3
   d8dca:	db12      	blt.n	d8df2 <__gethex+0x3b4>
   d8dcc:	6869      	ldr	r1, [r5, #4]
   d8dce:	9802      	ldr	r0, [sp, #8]
   d8dd0:	3101      	adds	r1, #1
   d8dd2:	f000 f906 	bl	d8fe2 <_Balloc>
   d8dd6:	692a      	ldr	r2, [r5, #16]
   d8dd8:	3202      	adds	r2, #2
   d8dda:	f105 010c 	add.w	r1, r5, #12
   d8dde:	4683      	mov	fp, r0
   d8de0:	0092      	lsls	r2, r2, #2
   d8de2:	300c      	adds	r0, #12
   d8de4:	f7fe fe9a 	bl	d7b1c <memcpy>
   d8de8:	4629      	mov	r1, r5
   d8dea:	9802      	ldr	r0, [sp, #8]
   d8dec:	f000 f92e 	bl	d904c <_Bfree>
   d8df0:	465d      	mov	r5, fp
   d8df2:	692b      	ldr	r3, [r5, #16]
   d8df4:	1c5a      	adds	r2, r3, #1
   d8df6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d8dfa:	612a      	str	r2, [r5, #16]
   d8dfc:	2201      	movs	r2, #1
   d8dfe:	615a      	str	r2, [r3, #20]
   d8e00:	2f02      	cmp	r7, #2
   d8e02:	f105 0214 	add.w	r2, r5, #20
   d8e06:	d111      	bne.n	d8e2c <__gethex+0x3ee>
   d8e08:	f8d8 3000 	ldr.w	r3, [r8]
   d8e0c:	3b01      	subs	r3, #1
   d8e0e:	429e      	cmp	r6, r3
   d8e10:	d127      	bne.n	d8e62 <__gethex+0x424>
   d8e12:	1171      	asrs	r1, r6, #5
   d8e14:	2301      	movs	r3, #1
   d8e16:	f006 061f 	and.w	r6, r6, #31
   d8e1a:	fa03 f606 	lsl.w	r6, r3, r6
   d8e1e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d8e22:	421e      	tst	r6, r3
   d8e24:	bf0c      	ite	eq
   d8e26:	2702      	moveq	r7, #2
   d8e28:	2701      	movne	r7, #1
   d8e2a:	e01a      	b.n	d8e62 <__gethex+0x424>
   d8e2c:	692b      	ldr	r3, [r5, #16]
   d8e2e:	459a      	cmp	sl, r3
   d8e30:	da0a      	bge.n	d8e48 <__gethex+0x40a>
   d8e32:	2101      	movs	r1, #1
   d8e34:	4628      	mov	r0, r5
   d8e36:	f7ff fdb7 	bl	d89a8 <rshift>
   d8e3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8e3e:	3401      	adds	r4, #1
   d8e40:	429c      	cmp	r4, r3
   d8e42:	f73f af2c 	bgt.w	d8c9e <__gethex+0x260>
   d8e46:	e00b      	b.n	d8e60 <__gethex+0x422>
   d8e48:	f016 061f 	ands.w	r6, r6, #31
   d8e4c:	d008      	beq.n	d8e60 <__gethex+0x422>
   d8e4e:	4491      	add	r9, r2
   d8e50:	f1c6 0620 	rsb	r6, r6, #32
   d8e54:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d8e58:	f000 f988 	bl	d916c <__hi0bits>
   d8e5c:	42b0      	cmp	r0, r6
   d8e5e:	dbe8      	blt.n	d8e32 <__gethex+0x3f4>
   d8e60:	2701      	movs	r7, #1
   d8e62:	f047 0720 	orr.w	r7, r7, #32
   d8e66:	e001      	b.n	d8e6c <__gethex+0x42e>
   d8e68:	f047 0710 	orr.w	r7, r7, #16
   d8e6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d8e6e:	601d      	str	r5, [r3, #0]
   d8e70:	9b06      	ldr	r3, [sp, #24]
   d8e72:	4638      	mov	r0, r7
   d8e74:	601c      	str	r4, [r3, #0]
   d8e76:	b00b      	add	sp, #44	; 0x2c
   d8e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8e7c <L_shift>:
   d8e7c:	f1c2 0208 	rsb	r2, r2, #8
   d8e80:	0092      	lsls	r2, r2, #2
   d8e82:	b570      	push	{r4, r5, r6, lr}
   d8e84:	f1c2 0620 	rsb	r6, r2, #32
   d8e88:	6843      	ldr	r3, [r0, #4]
   d8e8a:	6805      	ldr	r5, [r0, #0]
   d8e8c:	fa03 f406 	lsl.w	r4, r3, r6
   d8e90:	432c      	orrs	r4, r5
   d8e92:	40d3      	lsrs	r3, r2
   d8e94:	6004      	str	r4, [r0, #0]
   d8e96:	f840 3f04 	str.w	r3, [r0, #4]!
   d8e9a:	4288      	cmp	r0, r1
   d8e9c:	d3f4      	bcc.n	d8e88 <L_shift+0xc>
   d8e9e:	bd70      	pop	{r4, r5, r6, pc}

000d8ea0 <__match>:
   d8ea0:	b530      	push	{r4, r5, lr}
   d8ea2:	6803      	ldr	r3, [r0, #0]
   d8ea4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8ea8:	3301      	adds	r3, #1
   d8eaa:	b14c      	cbz	r4, d8ec0 <__match+0x20>
   d8eac:	781a      	ldrb	r2, [r3, #0]
   d8eae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d8eb2:	2d19      	cmp	r5, #25
   d8eb4:	bf98      	it	ls
   d8eb6:	3220      	addls	r2, #32
   d8eb8:	42a2      	cmp	r2, r4
   d8eba:	d0f3      	beq.n	d8ea4 <__match+0x4>
   d8ebc:	2000      	movs	r0, #0
   d8ebe:	bd30      	pop	{r4, r5, pc}
   d8ec0:	6003      	str	r3, [r0, #0]
   d8ec2:	2001      	movs	r0, #1
   d8ec4:	bd30      	pop	{r4, r5, pc}

000d8ec6 <__hexnan>:
   d8ec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8eca:	680b      	ldr	r3, [r1, #0]
   d8ecc:	f8d0 b000 	ldr.w	fp, [r0]
   d8ed0:	115e      	asrs	r6, r3, #5
   d8ed2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d8ed6:	f013 031f 	ands.w	r3, r3, #31
   d8eda:	b085      	sub	sp, #20
   d8edc:	bf18      	it	ne
   d8ede:	3604      	addne	r6, #4
   d8ee0:	1f35      	subs	r5, r6, #4
   d8ee2:	4617      	mov	r7, r2
   d8ee4:	2200      	movs	r2, #0
   d8ee6:	4682      	mov	sl, r0
   d8ee8:	9301      	str	r3, [sp, #4]
   d8eea:	f846 2c04 	str.w	r2, [r6, #-4]
   d8eee:	46a8      	mov	r8, r5
   d8ef0:	462c      	mov	r4, r5
   d8ef2:	9200      	str	r2, [sp, #0]
   d8ef4:	4691      	mov	r9, r2
   d8ef6:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d8efa:	2900      	cmp	r1, #0
   d8efc:	d03c      	beq.n	d8f78 <__hexnan+0xb2>
   d8efe:	4608      	mov	r0, r1
   d8f00:	9203      	str	r2, [sp, #12]
   d8f02:	9102      	str	r1, [sp, #8]
   d8f04:	f7ff fd86 	bl	d8a14 <__hexdig_fun>
   d8f08:	9a03      	ldr	r2, [sp, #12]
   d8f0a:	bb00      	cbnz	r0, d8f4e <__hexnan+0x88>
   d8f0c:	9902      	ldr	r1, [sp, #8]
   d8f0e:	2920      	cmp	r1, #32
   d8f10:	d816      	bhi.n	d8f40 <__hexnan+0x7a>
   d8f12:	9b00      	ldr	r3, [sp, #0]
   d8f14:	4599      	cmp	r9, r3
   d8f16:	ddee      	ble.n	d8ef6 <__hexnan+0x30>
   d8f18:	4544      	cmp	r4, r8
   d8f1a:	d205      	bcs.n	d8f28 <__hexnan+0x62>
   d8f1c:	2a07      	cmp	r2, #7
   d8f1e:	dc03      	bgt.n	d8f28 <__hexnan+0x62>
   d8f20:	4641      	mov	r1, r8
   d8f22:	4620      	mov	r0, r4
   d8f24:	f7ff ffaa 	bl	d8e7c <L_shift>
   d8f28:	42bc      	cmp	r4, r7
   d8f2a:	d923      	bls.n	d8f74 <__hexnan+0xae>
   d8f2c:	2300      	movs	r3, #0
   d8f2e:	f1a4 0804 	sub.w	r8, r4, #4
   d8f32:	f844 3c04 	str.w	r3, [r4, #-4]
   d8f36:	f8cd 9000 	str.w	r9, [sp]
   d8f3a:	4644      	mov	r4, r8
   d8f3c:	461a      	mov	r2, r3
   d8f3e:	e7da      	b.n	d8ef6 <__hexnan+0x30>
   d8f40:	2929      	cmp	r1, #41	; 0x29
   d8f42:	d148      	bne.n	d8fd6 <__hexnan+0x110>
   d8f44:	f10b 0301 	add.w	r3, fp, #1
   d8f48:	f8ca 3000 	str.w	r3, [sl]
   d8f4c:	e014      	b.n	d8f78 <__hexnan+0xb2>
   d8f4e:	3201      	adds	r2, #1
   d8f50:	2a08      	cmp	r2, #8
   d8f52:	f109 0901 	add.w	r9, r9, #1
   d8f56:	dd06      	ble.n	d8f66 <__hexnan+0xa0>
   d8f58:	42bc      	cmp	r4, r7
   d8f5a:	d9cc      	bls.n	d8ef6 <__hexnan+0x30>
   d8f5c:	2300      	movs	r3, #0
   d8f5e:	f844 3c04 	str.w	r3, [r4, #-4]
   d8f62:	2201      	movs	r2, #1
   d8f64:	3c04      	subs	r4, #4
   d8f66:	6821      	ldr	r1, [r4, #0]
   d8f68:	f000 000f 	and.w	r0, r0, #15
   d8f6c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d8f70:	6020      	str	r0, [r4, #0]
   d8f72:	e7c0      	b.n	d8ef6 <__hexnan+0x30>
   d8f74:	2208      	movs	r2, #8
   d8f76:	e7be      	b.n	d8ef6 <__hexnan+0x30>
   d8f78:	f1b9 0f00 	cmp.w	r9, #0
   d8f7c:	d02b      	beq.n	d8fd6 <__hexnan+0x110>
   d8f7e:	4544      	cmp	r4, r8
   d8f80:	d205      	bcs.n	d8f8e <__hexnan+0xc8>
   d8f82:	2a07      	cmp	r2, #7
   d8f84:	dc03      	bgt.n	d8f8e <__hexnan+0xc8>
   d8f86:	4641      	mov	r1, r8
   d8f88:	4620      	mov	r0, r4
   d8f8a:	f7ff ff77 	bl	d8e7c <L_shift>
   d8f8e:	42bc      	cmp	r4, r7
   d8f90:	d90c      	bls.n	d8fac <__hexnan+0xe6>
   d8f92:	463b      	mov	r3, r7
   d8f94:	f854 2b04 	ldr.w	r2, [r4], #4
   d8f98:	f843 2b04 	str.w	r2, [r3], #4
   d8f9c:	42a5      	cmp	r5, r4
   d8f9e:	d2f9      	bcs.n	d8f94 <__hexnan+0xce>
   d8fa0:	2200      	movs	r2, #0
   d8fa2:	f843 2b04 	str.w	r2, [r3], #4
   d8fa6:	429d      	cmp	r5, r3
   d8fa8:	d2fb      	bcs.n	d8fa2 <__hexnan+0xdc>
   d8faa:	e00b      	b.n	d8fc4 <__hexnan+0xfe>
   d8fac:	9b01      	ldr	r3, [sp, #4]
   d8fae:	b14b      	cbz	r3, d8fc4 <__hexnan+0xfe>
   d8fb0:	f1c3 0220 	rsb	r2, r3, #32
   d8fb4:	f04f 33ff 	mov.w	r3, #4294967295
   d8fb8:	40d3      	lsrs	r3, r2
   d8fba:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d8fbe:	4013      	ands	r3, r2
   d8fc0:	f846 3c04 	str.w	r3, [r6, #-4]
   d8fc4:	682b      	ldr	r3, [r5, #0]
   d8fc6:	b943      	cbnz	r3, d8fda <__hexnan+0x114>
   d8fc8:	42bd      	cmp	r5, r7
   d8fca:	d102      	bne.n	d8fd2 <__hexnan+0x10c>
   d8fcc:	2301      	movs	r3, #1
   d8fce:	602b      	str	r3, [r5, #0]
   d8fd0:	e003      	b.n	d8fda <__hexnan+0x114>
   d8fd2:	3d04      	subs	r5, #4
   d8fd4:	e7f6      	b.n	d8fc4 <__hexnan+0xfe>
   d8fd6:	2004      	movs	r0, #4
   d8fd8:	e000      	b.n	d8fdc <__hexnan+0x116>
   d8fda:	2005      	movs	r0, #5
   d8fdc:	b005      	add	sp, #20
   d8fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8fe2 <_Balloc>:
   d8fe2:	b570      	push	{r4, r5, r6, lr}
   d8fe4:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d8fe6:	4604      	mov	r4, r0
   d8fe8:	460e      	mov	r6, r1
   d8fea:	b93d      	cbnz	r5, d8ffc <_Balloc+0x1a>
   d8fec:	2010      	movs	r0, #16
   d8fee:	f7fc fb4f 	bl	d5690 <malloc>
   d8ff2:	6260      	str	r0, [r4, #36]	; 0x24
   d8ff4:	6045      	str	r5, [r0, #4]
   d8ff6:	6085      	str	r5, [r0, #8]
   d8ff8:	6005      	str	r5, [r0, #0]
   d8ffa:	60c5      	str	r5, [r0, #12]
   d8ffc:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d8ffe:	68eb      	ldr	r3, [r5, #12]
   d9000:	b143      	cbz	r3, d9014 <_Balloc+0x32>
   d9002:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9004:	68db      	ldr	r3, [r3, #12]
   d9006:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d900a:	b178      	cbz	r0, d902c <_Balloc+0x4a>
   d900c:	6802      	ldr	r2, [r0, #0]
   d900e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d9012:	e017      	b.n	d9044 <_Balloc+0x62>
   d9014:	2221      	movs	r2, #33	; 0x21
   d9016:	2104      	movs	r1, #4
   d9018:	4620      	mov	r0, r4
   d901a:	f000 fbd2 	bl	d97c2 <_calloc_r>
   d901e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9020:	60e8      	str	r0, [r5, #12]
   d9022:	68db      	ldr	r3, [r3, #12]
   d9024:	2b00      	cmp	r3, #0
   d9026:	d1ec      	bne.n	d9002 <_Balloc+0x20>
   d9028:	2000      	movs	r0, #0
   d902a:	bd70      	pop	{r4, r5, r6, pc}
   d902c:	2101      	movs	r1, #1
   d902e:	fa01 f506 	lsl.w	r5, r1, r6
   d9032:	1d6a      	adds	r2, r5, #5
   d9034:	0092      	lsls	r2, r2, #2
   d9036:	4620      	mov	r0, r4
   d9038:	f000 fbc3 	bl	d97c2 <_calloc_r>
   d903c:	2800      	cmp	r0, #0
   d903e:	d0f3      	beq.n	d9028 <_Balloc+0x46>
   d9040:	6046      	str	r6, [r0, #4]
   d9042:	6085      	str	r5, [r0, #8]
   d9044:	2300      	movs	r3, #0
   d9046:	6103      	str	r3, [r0, #16]
   d9048:	60c3      	str	r3, [r0, #12]
   d904a:	bd70      	pop	{r4, r5, r6, pc}

000d904c <_Bfree>:
   d904c:	b570      	push	{r4, r5, r6, lr}
   d904e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d9050:	4606      	mov	r6, r0
   d9052:	460d      	mov	r5, r1
   d9054:	b93c      	cbnz	r4, d9066 <_Bfree+0x1a>
   d9056:	2010      	movs	r0, #16
   d9058:	f7fc fb1a 	bl	d5690 <malloc>
   d905c:	6270      	str	r0, [r6, #36]	; 0x24
   d905e:	6044      	str	r4, [r0, #4]
   d9060:	6084      	str	r4, [r0, #8]
   d9062:	6004      	str	r4, [r0, #0]
   d9064:	60c4      	str	r4, [r0, #12]
   d9066:	b13d      	cbz	r5, d9078 <_Bfree+0x2c>
   d9068:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d906a:	686a      	ldr	r2, [r5, #4]
   d906c:	68db      	ldr	r3, [r3, #12]
   d906e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d9072:	6029      	str	r1, [r5, #0]
   d9074:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d9078:	bd70      	pop	{r4, r5, r6, pc}

000d907a <__multadd>:
   d907a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d907e:	690d      	ldr	r5, [r1, #16]
   d9080:	461f      	mov	r7, r3
   d9082:	4606      	mov	r6, r0
   d9084:	460c      	mov	r4, r1
   d9086:	f101 0e14 	add.w	lr, r1, #20
   d908a:	2300      	movs	r3, #0
   d908c:	f8de 0000 	ldr.w	r0, [lr]
   d9090:	b281      	uxth	r1, r0
   d9092:	fb02 7101 	mla	r1, r2, r1, r7
   d9096:	0c0f      	lsrs	r7, r1, #16
   d9098:	0c00      	lsrs	r0, r0, #16
   d909a:	fb02 7000 	mla	r0, r2, r0, r7
   d909e:	b289      	uxth	r1, r1
   d90a0:	3301      	adds	r3, #1
   d90a2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d90a6:	429d      	cmp	r5, r3
   d90a8:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d90ac:	f84e 1b04 	str.w	r1, [lr], #4
   d90b0:	dcec      	bgt.n	d908c <__multadd+0x12>
   d90b2:	b1d7      	cbz	r7, d90ea <__multadd+0x70>
   d90b4:	68a3      	ldr	r3, [r4, #8]
   d90b6:	429d      	cmp	r5, r3
   d90b8:	db12      	blt.n	d90e0 <__multadd+0x66>
   d90ba:	6861      	ldr	r1, [r4, #4]
   d90bc:	4630      	mov	r0, r6
   d90be:	3101      	adds	r1, #1
   d90c0:	f7ff ff8f 	bl	d8fe2 <_Balloc>
   d90c4:	6922      	ldr	r2, [r4, #16]
   d90c6:	3202      	adds	r2, #2
   d90c8:	f104 010c 	add.w	r1, r4, #12
   d90cc:	4680      	mov	r8, r0
   d90ce:	0092      	lsls	r2, r2, #2
   d90d0:	300c      	adds	r0, #12
   d90d2:	f7fe fd23 	bl	d7b1c <memcpy>
   d90d6:	4621      	mov	r1, r4
   d90d8:	4630      	mov	r0, r6
   d90da:	f7ff ffb7 	bl	d904c <_Bfree>
   d90de:	4644      	mov	r4, r8
   d90e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d90e4:	3501      	adds	r5, #1
   d90e6:	615f      	str	r7, [r3, #20]
   d90e8:	6125      	str	r5, [r4, #16]
   d90ea:	4620      	mov	r0, r4
   d90ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d90f0 <__s2b>:
   d90f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d90f4:	460c      	mov	r4, r1
   d90f6:	4615      	mov	r5, r2
   d90f8:	461f      	mov	r7, r3
   d90fa:	2209      	movs	r2, #9
   d90fc:	3308      	adds	r3, #8
   d90fe:	4606      	mov	r6, r0
   d9100:	fb93 f3f2 	sdiv	r3, r3, r2
   d9104:	2100      	movs	r1, #0
   d9106:	2201      	movs	r2, #1
   d9108:	429a      	cmp	r2, r3
   d910a:	da02      	bge.n	d9112 <__s2b+0x22>
   d910c:	0052      	lsls	r2, r2, #1
   d910e:	3101      	adds	r1, #1
   d9110:	e7fa      	b.n	d9108 <__s2b+0x18>
   d9112:	4630      	mov	r0, r6
   d9114:	f7ff ff65 	bl	d8fe2 <_Balloc>
   d9118:	9b08      	ldr	r3, [sp, #32]
   d911a:	6143      	str	r3, [r0, #20]
   d911c:	2d09      	cmp	r5, #9
   d911e:	f04f 0301 	mov.w	r3, #1
   d9122:	6103      	str	r3, [r0, #16]
   d9124:	dd11      	ble.n	d914a <__s2b+0x5a>
   d9126:	f104 0809 	add.w	r8, r4, #9
   d912a:	46c1      	mov	r9, r8
   d912c:	442c      	add	r4, r5
   d912e:	f819 3b01 	ldrb.w	r3, [r9], #1
   d9132:	4601      	mov	r1, r0
   d9134:	3b30      	subs	r3, #48	; 0x30
   d9136:	220a      	movs	r2, #10
   d9138:	4630      	mov	r0, r6
   d913a:	f7ff ff9e 	bl	d907a <__multadd>
   d913e:	45a1      	cmp	r9, r4
   d9140:	d1f5      	bne.n	d912e <__s2b+0x3e>
   d9142:	eb08 0405 	add.w	r4, r8, r5
   d9146:	3c08      	subs	r4, #8
   d9148:	e001      	b.n	d914e <__s2b+0x5e>
   d914a:	340a      	adds	r4, #10
   d914c:	2509      	movs	r5, #9
   d914e:	1b2d      	subs	r5, r5, r4
   d9150:	1963      	adds	r3, r4, r5
   d9152:	429f      	cmp	r7, r3
   d9154:	dd08      	ble.n	d9168 <__s2b+0x78>
   d9156:	f814 3b01 	ldrb.w	r3, [r4], #1
   d915a:	4601      	mov	r1, r0
   d915c:	3b30      	subs	r3, #48	; 0x30
   d915e:	220a      	movs	r2, #10
   d9160:	4630      	mov	r0, r6
   d9162:	f7ff ff8a 	bl	d907a <__multadd>
   d9166:	e7f3      	b.n	d9150 <__s2b+0x60>
   d9168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d916c <__hi0bits>:
   d916c:	0c03      	lsrs	r3, r0, #16
   d916e:	041b      	lsls	r3, r3, #16
   d9170:	b913      	cbnz	r3, d9178 <__hi0bits+0xc>
   d9172:	0400      	lsls	r0, r0, #16
   d9174:	2310      	movs	r3, #16
   d9176:	e000      	b.n	d917a <__hi0bits+0xe>
   d9178:	2300      	movs	r3, #0
   d917a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d917e:	bf04      	itt	eq
   d9180:	0200      	lsleq	r0, r0, #8
   d9182:	3308      	addeq	r3, #8
   d9184:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d9188:	bf04      	itt	eq
   d918a:	0100      	lsleq	r0, r0, #4
   d918c:	3304      	addeq	r3, #4
   d918e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d9192:	bf04      	itt	eq
   d9194:	0080      	lsleq	r0, r0, #2
   d9196:	3302      	addeq	r3, #2
   d9198:	2800      	cmp	r0, #0
   d919a:	db03      	blt.n	d91a4 <__hi0bits+0x38>
   d919c:	0042      	lsls	r2, r0, #1
   d919e:	d503      	bpl.n	d91a8 <__hi0bits+0x3c>
   d91a0:	1c58      	adds	r0, r3, #1
   d91a2:	4770      	bx	lr
   d91a4:	4618      	mov	r0, r3
   d91a6:	4770      	bx	lr
   d91a8:	2020      	movs	r0, #32
   d91aa:	4770      	bx	lr

000d91ac <__lo0bits>:
   d91ac:	6803      	ldr	r3, [r0, #0]
   d91ae:	f013 0207 	ands.w	r2, r3, #7
   d91b2:	d00b      	beq.n	d91cc <__lo0bits+0x20>
   d91b4:	07d9      	lsls	r1, r3, #31
   d91b6:	d422      	bmi.n	d91fe <__lo0bits+0x52>
   d91b8:	079a      	lsls	r2, r3, #30
   d91ba:	bf4b      	itete	mi
   d91bc:	085b      	lsrmi	r3, r3, #1
   d91be:	089b      	lsrpl	r3, r3, #2
   d91c0:	6003      	strmi	r3, [r0, #0]
   d91c2:	6003      	strpl	r3, [r0, #0]
   d91c4:	bf4c      	ite	mi
   d91c6:	2001      	movmi	r0, #1
   d91c8:	2002      	movpl	r0, #2
   d91ca:	4770      	bx	lr
   d91cc:	b299      	uxth	r1, r3
   d91ce:	b909      	cbnz	r1, d91d4 <__lo0bits+0x28>
   d91d0:	0c1b      	lsrs	r3, r3, #16
   d91d2:	2210      	movs	r2, #16
   d91d4:	f013 0fff 	tst.w	r3, #255	; 0xff
   d91d8:	bf04      	itt	eq
   d91da:	0a1b      	lsreq	r3, r3, #8
   d91dc:	3208      	addeq	r2, #8
   d91de:	0719      	lsls	r1, r3, #28
   d91e0:	bf04      	itt	eq
   d91e2:	091b      	lsreq	r3, r3, #4
   d91e4:	3204      	addeq	r2, #4
   d91e6:	0799      	lsls	r1, r3, #30
   d91e8:	bf04      	itt	eq
   d91ea:	089b      	lsreq	r3, r3, #2
   d91ec:	3202      	addeq	r2, #2
   d91ee:	07d9      	lsls	r1, r3, #31
   d91f0:	d402      	bmi.n	d91f8 <__lo0bits+0x4c>
   d91f2:	085b      	lsrs	r3, r3, #1
   d91f4:	d005      	beq.n	d9202 <__lo0bits+0x56>
   d91f6:	3201      	adds	r2, #1
   d91f8:	6003      	str	r3, [r0, #0]
   d91fa:	4610      	mov	r0, r2
   d91fc:	4770      	bx	lr
   d91fe:	2000      	movs	r0, #0
   d9200:	4770      	bx	lr
   d9202:	2020      	movs	r0, #32
   d9204:	4770      	bx	lr

000d9206 <__i2b>:
   d9206:	b510      	push	{r4, lr}
   d9208:	460c      	mov	r4, r1
   d920a:	2101      	movs	r1, #1
   d920c:	f7ff fee9 	bl	d8fe2 <_Balloc>
   d9210:	2201      	movs	r2, #1
   d9212:	6144      	str	r4, [r0, #20]
   d9214:	6102      	str	r2, [r0, #16]
   d9216:	bd10      	pop	{r4, pc}

000d9218 <__multiply>:
   d9218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d921c:	4614      	mov	r4, r2
   d921e:	690a      	ldr	r2, [r1, #16]
   d9220:	6923      	ldr	r3, [r4, #16]
   d9222:	429a      	cmp	r2, r3
   d9224:	bfb8      	it	lt
   d9226:	460b      	movlt	r3, r1
   d9228:	4688      	mov	r8, r1
   d922a:	bfbc      	itt	lt
   d922c:	46a0      	movlt	r8, r4
   d922e:	461c      	movlt	r4, r3
   d9230:	f8d8 7010 	ldr.w	r7, [r8, #16]
   d9234:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d9238:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d923c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   d9240:	eb07 0609 	add.w	r6, r7, r9
   d9244:	429e      	cmp	r6, r3
   d9246:	bfc8      	it	gt
   d9248:	3101      	addgt	r1, #1
   d924a:	f7ff feca 	bl	d8fe2 <_Balloc>
   d924e:	f100 0514 	add.w	r5, r0, #20
   d9252:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   d9256:	462b      	mov	r3, r5
   d9258:	2200      	movs	r2, #0
   d925a:	4563      	cmp	r3, ip
   d925c:	d202      	bcs.n	d9264 <__multiply+0x4c>
   d925e:	f843 2b04 	str.w	r2, [r3], #4
   d9262:	e7fa      	b.n	d925a <__multiply+0x42>
   d9264:	f104 0214 	add.w	r2, r4, #20
   d9268:	f108 0114 	add.w	r1, r8, #20
   d926c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d9270:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   d9274:	9300      	str	r3, [sp, #0]
   d9276:	9b00      	ldr	r3, [sp, #0]
   d9278:	9201      	str	r2, [sp, #4]
   d927a:	4293      	cmp	r3, r2
   d927c:	d957      	bls.n	d932e <__multiply+0x116>
   d927e:	f8b2 b000 	ldrh.w	fp, [r2]
   d9282:	f1bb 0f00 	cmp.w	fp, #0
   d9286:	d023      	beq.n	d92d0 <__multiply+0xb8>
   d9288:	4689      	mov	r9, r1
   d928a:	46ae      	mov	lr, r5
   d928c:	f04f 0800 	mov.w	r8, #0
   d9290:	f859 4b04 	ldr.w	r4, [r9], #4
   d9294:	f8be a000 	ldrh.w	sl, [lr]
   d9298:	b2a3      	uxth	r3, r4
   d929a:	fb0b a303 	mla	r3, fp, r3, sl
   d929e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   d92a2:	f8de 4000 	ldr.w	r4, [lr]
   d92a6:	4443      	add	r3, r8
   d92a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d92ac:	fb0b 840a 	mla	r4, fp, sl, r8
   d92b0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   d92b4:	46f2      	mov	sl, lr
   d92b6:	b29b      	uxth	r3, r3
   d92b8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d92bc:	454f      	cmp	r7, r9
   d92be:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d92c2:	f84a 3b04 	str.w	r3, [sl], #4
   d92c6:	d901      	bls.n	d92cc <__multiply+0xb4>
   d92c8:	46d6      	mov	lr, sl
   d92ca:	e7e1      	b.n	d9290 <__multiply+0x78>
   d92cc:	f8ce 8004 	str.w	r8, [lr, #4]
   d92d0:	9b01      	ldr	r3, [sp, #4]
   d92d2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d92d6:	3204      	adds	r2, #4
   d92d8:	f1ba 0f00 	cmp.w	sl, #0
   d92dc:	d021      	beq.n	d9322 <__multiply+0x10a>
   d92de:	682b      	ldr	r3, [r5, #0]
   d92e0:	462c      	mov	r4, r5
   d92e2:	4689      	mov	r9, r1
   d92e4:	f04f 0800 	mov.w	r8, #0
   d92e8:	f8b9 e000 	ldrh.w	lr, [r9]
   d92ec:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   d92f0:	fb0a be0e 	mla	lr, sl, lr, fp
   d92f4:	44f0      	add	r8, lr
   d92f6:	46a3      	mov	fp, r4
   d92f8:	b29b      	uxth	r3, r3
   d92fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   d92fe:	f84b 3b04 	str.w	r3, [fp], #4
   d9302:	f859 3b04 	ldr.w	r3, [r9], #4
   d9306:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   d930a:	0c1b      	lsrs	r3, r3, #16
   d930c:	fb0a e303 	mla	r3, sl, r3, lr
   d9310:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   d9314:	454f      	cmp	r7, r9
   d9316:	ea4f 4813 	mov.w	r8, r3, lsr #16
   d931a:	d901      	bls.n	d9320 <__multiply+0x108>
   d931c:	465c      	mov	r4, fp
   d931e:	e7e3      	b.n	d92e8 <__multiply+0xd0>
   d9320:	6063      	str	r3, [r4, #4]
   d9322:	3504      	adds	r5, #4
   d9324:	e7a7      	b.n	d9276 <__multiply+0x5e>
   d9326:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   d932a:	b913      	cbnz	r3, d9332 <__multiply+0x11a>
   d932c:	3e01      	subs	r6, #1
   d932e:	2e00      	cmp	r6, #0
   d9330:	dcf9      	bgt.n	d9326 <__multiply+0x10e>
   d9332:	6106      	str	r6, [r0, #16]
   d9334:	b003      	add	sp, #12
   d9336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d933c <__pow5mult>:
   d933c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9340:	4615      	mov	r5, r2
   d9342:	f012 0203 	ands.w	r2, r2, #3
   d9346:	4606      	mov	r6, r0
   d9348:	460f      	mov	r7, r1
   d934a:	d007      	beq.n	d935c <__pow5mult+0x20>
   d934c:	3a01      	subs	r2, #1
   d934e:	4c21      	ldr	r4, [pc, #132]	; (d93d4 <__pow5mult+0x98>)
   d9350:	2300      	movs	r3, #0
   d9352:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d9356:	f7ff fe90 	bl	d907a <__multadd>
   d935a:	4607      	mov	r7, r0
   d935c:	10ad      	asrs	r5, r5, #2
   d935e:	d036      	beq.n	d93ce <__pow5mult+0x92>
   d9360:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d9362:	b93c      	cbnz	r4, d9374 <__pow5mult+0x38>
   d9364:	2010      	movs	r0, #16
   d9366:	f7fc f993 	bl	d5690 <malloc>
   d936a:	6270      	str	r0, [r6, #36]	; 0x24
   d936c:	6044      	str	r4, [r0, #4]
   d936e:	6084      	str	r4, [r0, #8]
   d9370:	6004      	str	r4, [r0, #0]
   d9372:	60c4      	str	r4, [r0, #12]
   d9374:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d9378:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d937c:	b94c      	cbnz	r4, d9392 <__pow5mult+0x56>
   d937e:	f240 2171 	movw	r1, #625	; 0x271
   d9382:	4630      	mov	r0, r6
   d9384:	f7ff ff3f 	bl	d9206 <__i2b>
   d9388:	2300      	movs	r3, #0
   d938a:	f8c8 0008 	str.w	r0, [r8, #8]
   d938e:	4604      	mov	r4, r0
   d9390:	6003      	str	r3, [r0, #0]
   d9392:	f04f 0800 	mov.w	r8, #0
   d9396:	07eb      	lsls	r3, r5, #31
   d9398:	d50a      	bpl.n	d93b0 <__pow5mult+0x74>
   d939a:	4639      	mov	r1, r7
   d939c:	4622      	mov	r2, r4
   d939e:	4630      	mov	r0, r6
   d93a0:	f7ff ff3a 	bl	d9218 <__multiply>
   d93a4:	4639      	mov	r1, r7
   d93a6:	4681      	mov	r9, r0
   d93a8:	4630      	mov	r0, r6
   d93aa:	f7ff fe4f 	bl	d904c <_Bfree>
   d93ae:	464f      	mov	r7, r9
   d93b0:	106d      	asrs	r5, r5, #1
   d93b2:	d00c      	beq.n	d93ce <__pow5mult+0x92>
   d93b4:	6820      	ldr	r0, [r4, #0]
   d93b6:	b108      	cbz	r0, d93bc <__pow5mult+0x80>
   d93b8:	4604      	mov	r4, r0
   d93ba:	e7ec      	b.n	d9396 <__pow5mult+0x5a>
   d93bc:	4622      	mov	r2, r4
   d93be:	4621      	mov	r1, r4
   d93c0:	4630      	mov	r0, r6
   d93c2:	f7ff ff29 	bl	d9218 <__multiply>
   d93c6:	6020      	str	r0, [r4, #0]
   d93c8:	f8c0 8000 	str.w	r8, [r0]
   d93cc:	e7f4      	b.n	d93b8 <__pow5mult+0x7c>
   d93ce:	4638      	mov	r0, r7
   d93d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d93d4:	000d9e98 	.word	0x000d9e98

000d93d8 <__lshift>:
   d93d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d93dc:	460c      	mov	r4, r1
   d93de:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d93e2:	6926      	ldr	r6, [r4, #16]
   d93e4:	6849      	ldr	r1, [r1, #4]
   d93e6:	68a3      	ldr	r3, [r4, #8]
   d93e8:	4456      	add	r6, sl
   d93ea:	4607      	mov	r7, r0
   d93ec:	4691      	mov	r9, r2
   d93ee:	1c75      	adds	r5, r6, #1
   d93f0:	42ab      	cmp	r3, r5
   d93f2:	da02      	bge.n	d93fa <__lshift+0x22>
   d93f4:	3101      	adds	r1, #1
   d93f6:	005b      	lsls	r3, r3, #1
   d93f8:	e7fa      	b.n	d93f0 <__lshift+0x18>
   d93fa:	4638      	mov	r0, r7
   d93fc:	f7ff fdf1 	bl	d8fe2 <_Balloc>
   d9400:	2300      	movs	r3, #0
   d9402:	4680      	mov	r8, r0
   d9404:	f100 0114 	add.w	r1, r0, #20
   d9408:	461a      	mov	r2, r3
   d940a:	4553      	cmp	r3, sl
   d940c:	da03      	bge.n	d9416 <__lshift+0x3e>
   d940e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   d9412:	3301      	adds	r3, #1
   d9414:	e7f9      	b.n	d940a <__lshift+0x32>
   d9416:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   d941a:	6920      	ldr	r0, [r4, #16]
   d941c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d9420:	f019 091f 	ands.w	r9, r9, #31
   d9424:	f104 0114 	add.w	r1, r4, #20
   d9428:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   d942c:	d014      	beq.n	d9458 <__lshift+0x80>
   d942e:	f1c9 0c20 	rsb	ip, r9, #32
   d9432:	2200      	movs	r2, #0
   d9434:	6808      	ldr	r0, [r1, #0]
   d9436:	fa00 f009 	lsl.w	r0, r0, r9
   d943a:	4302      	orrs	r2, r0
   d943c:	469a      	mov	sl, r3
   d943e:	f843 2b04 	str.w	r2, [r3], #4
   d9442:	f851 2b04 	ldr.w	r2, [r1], #4
   d9446:	458e      	cmp	lr, r1
   d9448:	fa22 f20c 	lsr.w	r2, r2, ip
   d944c:	d8f2      	bhi.n	d9434 <__lshift+0x5c>
   d944e:	f8ca 2004 	str.w	r2, [sl, #4]
   d9452:	b142      	cbz	r2, d9466 <__lshift+0x8e>
   d9454:	1cb5      	adds	r5, r6, #2
   d9456:	e006      	b.n	d9466 <__lshift+0x8e>
   d9458:	3b04      	subs	r3, #4
   d945a:	f851 2b04 	ldr.w	r2, [r1], #4
   d945e:	f843 2f04 	str.w	r2, [r3, #4]!
   d9462:	458e      	cmp	lr, r1
   d9464:	d8f9      	bhi.n	d945a <__lshift+0x82>
   d9466:	3d01      	subs	r5, #1
   d9468:	4638      	mov	r0, r7
   d946a:	f8c8 5010 	str.w	r5, [r8, #16]
   d946e:	4621      	mov	r1, r4
   d9470:	f7ff fdec 	bl	d904c <_Bfree>
   d9474:	4640      	mov	r0, r8
   d9476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d947a <__mcmp>:
   d947a:	6903      	ldr	r3, [r0, #16]
   d947c:	690a      	ldr	r2, [r1, #16]
   d947e:	1a9b      	subs	r3, r3, r2
   d9480:	b510      	push	{r4, lr}
   d9482:	d111      	bne.n	d94a8 <__mcmp+0x2e>
   d9484:	0092      	lsls	r2, r2, #2
   d9486:	3014      	adds	r0, #20
   d9488:	3114      	adds	r1, #20
   d948a:	1883      	adds	r3, r0, r2
   d948c:	440a      	add	r2, r1
   d948e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   d9492:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   d9496:	428c      	cmp	r4, r1
   d9498:	d002      	beq.n	d94a0 <__mcmp+0x26>
   d949a:	d307      	bcc.n	d94ac <__mcmp+0x32>
   d949c:	2001      	movs	r0, #1
   d949e:	bd10      	pop	{r4, pc}
   d94a0:	4298      	cmp	r0, r3
   d94a2:	d3f4      	bcc.n	d948e <__mcmp+0x14>
   d94a4:	2000      	movs	r0, #0
   d94a6:	bd10      	pop	{r4, pc}
   d94a8:	4618      	mov	r0, r3
   d94aa:	bd10      	pop	{r4, pc}
   d94ac:	f04f 30ff 	mov.w	r0, #4294967295
   d94b0:	bd10      	pop	{r4, pc}

000d94b2 <__mdiff>:
   d94b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d94b6:	460c      	mov	r4, r1
   d94b8:	4607      	mov	r7, r0
   d94ba:	4611      	mov	r1, r2
   d94bc:	4620      	mov	r0, r4
   d94be:	4615      	mov	r5, r2
   d94c0:	f7ff ffdb 	bl	d947a <__mcmp>
   d94c4:	1e06      	subs	r6, r0, #0
   d94c6:	d108      	bne.n	d94da <__mdiff+0x28>
   d94c8:	4631      	mov	r1, r6
   d94ca:	4638      	mov	r0, r7
   d94cc:	f7ff fd89 	bl	d8fe2 <_Balloc>
   d94d0:	2301      	movs	r3, #1
   d94d2:	6103      	str	r3, [r0, #16]
   d94d4:	6146      	str	r6, [r0, #20]
   d94d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d94da:	bfbc      	itt	lt
   d94dc:	4623      	movlt	r3, r4
   d94de:	462c      	movlt	r4, r5
   d94e0:	4638      	mov	r0, r7
   d94e2:	6861      	ldr	r1, [r4, #4]
   d94e4:	bfba      	itte	lt
   d94e6:	461d      	movlt	r5, r3
   d94e8:	2601      	movlt	r6, #1
   d94ea:	2600      	movge	r6, #0
   d94ec:	f7ff fd79 	bl	d8fe2 <_Balloc>
   d94f0:	692b      	ldr	r3, [r5, #16]
   d94f2:	60c6      	str	r6, [r0, #12]
   d94f4:	6926      	ldr	r6, [r4, #16]
   d94f6:	f105 0914 	add.w	r9, r5, #20
   d94fa:	3414      	adds	r4, #20
   d94fc:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   d9500:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   d9504:	f100 0514 	add.w	r5, r0, #20
   d9508:	f04f 0c00 	mov.w	ip, #0
   d950c:	f854 3b04 	ldr.w	r3, [r4], #4
   d9510:	f859 2b04 	ldr.w	r2, [r9], #4
   d9514:	fa1c f183 	uxtah	r1, ip, r3
   d9518:	fa1f fe82 	uxth.w	lr, r2
   d951c:	0c12      	lsrs	r2, r2, #16
   d951e:	ebce 0101 	rsb	r1, lr, r1
   d9522:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   d9526:	eb03 4321 	add.w	r3, r3, r1, asr #16
   d952a:	b289      	uxth	r1, r1
   d952c:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d9530:	45c8      	cmp	r8, r9
   d9532:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   d9536:	46a6      	mov	lr, r4
   d9538:	f845 3b04 	str.w	r3, [r5], #4
   d953c:	d8e6      	bhi.n	d950c <__mdiff+0x5a>
   d953e:	45be      	cmp	lr, r7
   d9540:	d20e      	bcs.n	d9560 <__mdiff+0xae>
   d9542:	f85e 1b04 	ldr.w	r1, [lr], #4
   d9546:	fa1c f281 	uxtah	r2, ip, r1
   d954a:	1413      	asrs	r3, r2, #16
   d954c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   d9550:	b292      	uxth	r2, r2
   d9552:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   d9556:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d955a:	f845 2b04 	str.w	r2, [r5], #4
   d955e:	e7ee      	b.n	d953e <__mdiff+0x8c>
   d9560:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   d9564:	b90b      	cbnz	r3, d956a <__mdiff+0xb8>
   d9566:	3e01      	subs	r6, #1
   d9568:	e7fa      	b.n	d9560 <__mdiff+0xae>
   d956a:	6106      	str	r6, [r0, #16]
   d956c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9570 <__ulp>:
   d9570:	4b12      	ldr	r3, [pc, #72]	; (d95bc <__ulp+0x4c>)
   d9572:	ee10 2a90 	vmov	r2, s1
   d9576:	401a      	ands	r2, r3
   d9578:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   d957c:	2b00      	cmp	r3, #0
   d957e:	dd02      	ble.n	d9586 <__ulp+0x16>
   d9580:	2000      	movs	r0, #0
   d9582:	4619      	mov	r1, r3
   d9584:	e017      	b.n	d95b6 <__ulp+0x46>
   d9586:	425b      	negs	r3, r3
   d9588:	151b      	asrs	r3, r3, #20
   d958a:	2b13      	cmp	r3, #19
   d958c:	f04f 0000 	mov.w	r0, #0
   d9590:	f04f 0100 	mov.w	r1, #0
   d9594:	dc04      	bgt.n	d95a0 <__ulp+0x30>
   d9596:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   d959a:	fa42 f103 	asr.w	r1, r2, r3
   d959e:	e00a      	b.n	d95b6 <__ulp+0x46>
   d95a0:	3b14      	subs	r3, #20
   d95a2:	2b1e      	cmp	r3, #30
   d95a4:	f04f 0201 	mov.w	r2, #1
   d95a8:	bfda      	itte	le
   d95aa:	f1c3 031f 	rsble	r3, r3, #31
   d95ae:	fa02 f303 	lslle.w	r3, r2, r3
   d95b2:	4613      	movgt	r3, r2
   d95b4:	4618      	mov	r0, r3
   d95b6:	ec41 0b10 	vmov	d0, r0, r1
   d95ba:	4770      	bx	lr
   d95bc:	7ff00000 	.word	0x7ff00000

000d95c0 <__b2d>:
   d95c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d95c2:	6905      	ldr	r5, [r0, #16]
   d95c4:	f100 0614 	add.w	r6, r0, #20
   d95c8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   d95cc:	1f2f      	subs	r7, r5, #4
   d95ce:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d95d2:	4620      	mov	r0, r4
   d95d4:	f7ff fdca 	bl	d916c <__hi0bits>
   d95d8:	f1c0 0320 	rsb	r3, r0, #32
   d95dc:	280a      	cmp	r0, #10
   d95de:	600b      	str	r3, [r1, #0]
   d95e0:	dc14      	bgt.n	d960c <__b2d+0x4c>
   d95e2:	f1c0 0e0b 	rsb	lr, r0, #11
   d95e6:	fa24 f10e 	lsr.w	r1, r4, lr
   d95ea:	42be      	cmp	r6, r7
   d95ec:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   d95f0:	bf34      	ite	cc
   d95f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d95f6:	2100      	movcs	r1, #0
   d95f8:	3015      	adds	r0, #21
   d95fa:	fa04 f000 	lsl.w	r0, r4, r0
   d95fe:	fa21 f10e 	lsr.w	r1, r1, lr
   d9602:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d9606:	ea40 0201 	orr.w	r2, r0, r1
   d960a:	e023      	b.n	d9654 <__b2d+0x94>
   d960c:	42be      	cmp	r6, r7
   d960e:	bf3a      	itte	cc
   d9610:	f1a5 0708 	subcc.w	r7, r5, #8
   d9614:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9618:	2100      	movcs	r1, #0
   d961a:	380b      	subs	r0, #11
   d961c:	d015      	beq.n	d964a <__b2d+0x8a>
   d961e:	4084      	lsls	r4, r0
   d9620:	f1c0 0520 	rsb	r5, r0, #32
   d9624:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   d9628:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   d962c:	42b7      	cmp	r7, r6
   d962e:	fa21 fe05 	lsr.w	lr, r1, r5
   d9632:	ea44 030e 	orr.w	r3, r4, lr
   d9636:	bf8c      	ite	hi
   d9638:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   d963c:	2400      	movls	r4, #0
   d963e:	fa01 f000 	lsl.w	r0, r1, r0
   d9642:	40ec      	lsrs	r4, r5
   d9644:	ea40 0204 	orr.w	r2, r0, r4
   d9648:	e004      	b.n	d9654 <__b2d+0x94>
   d964a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   d964e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d9652:	460a      	mov	r2, r1
   d9654:	ec43 2b10 	vmov	d0, r2, r3
   d9658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d965a <__d2b>:
   d965a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d965e:	460e      	mov	r6, r1
   d9660:	2101      	movs	r1, #1
   d9662:	ec59 8b10 	vmov	r8, r9, d0
   d9666:	4615      	mov	r5, r2
   d9668:	f7ff fcbb 	bl	d8fe2 <_Balloc>
   d966c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   d9670:	4607      	mov	r7, r0
   d9672:	f3c9 0313 	ubfx	r3, r9, #0, #20
   d9676:	b10c      	cbz	r4, d967c <__d2b+0x22>
   d9678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d967c:	9301      	str	r3, [sp, #4]
   d967e:	f1b8 0f00 	cmp.w	r8, #0
   d9682:	d019      	beq.n	d96b8 <__d2b+0x5e>
   d9684:	a802      	add	r0, sp, #8
   d9686:	f840 8d08 	str.w	r8, [r0, #-8]!
   d968a:	f7ff fd8f 	bl	d91ac <__lo0bits>
   d968e:	9b00      	ldr	r3, [sp, #0]
   d9690:	b148      	cbz	r0, d96a6 <__d2b+0x4c>
   d9692:	9a01      	ldr	r2, [sp, #4]
   d9694:	f1c0 0120 	rsb	r1, r0, #32
   d9698:	fa02 f101 	lsl.w	r1, r2, r1
   d969c:	430b      	orrs	r3, r1
   d969e:	40c2      	lsrs	r2, r0
   d96a0:	617b      	str	r3, [r7, #20]
   d96a2:	9201      	str	r2, [sp, #4]
   d96a4:	e000      	b.n	d96a8 <__d2b+0x4e>
   d96a6:	617b      	str	r3, [r7, #20]
   d96a8:	9b01      	ldr	r3, [sp, #4]
   d96aa:	61bb      	str	r3, [r7, #24]
   d96ac:	2b00      	cmp	r3, #0
   d96ae:	bf14      	ite	ne
   d96b0:	2102      	movne	r1, #2
   d96b2:	2101      	moveq	r1, #1
   d96b4:	6139      	str	r1, [r7, #16]
   d96b6:	e007      	b.n	d96c8 <__d2b+0x6e>
   d96b8:	a801      	add	r0, sp, #4
   d96ba:	f7ff fd77 	bl	d91ac <__lo0bits>
   d96be:	9b01      	ldr	r3, [sp, #4]
   d96c0:	617b      	str	r3, [r7, #20]
   d96c2:	2101      	movs	r1, #1
   d96c4:	6139      	str	r1, [r7, #16]
   d96c6:	3020      	adds	r0, #32
   d96c8:	b134      	cbz	r4, d96d8 <__d2b+0x7e>
   d96ca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   d96ce:	4404      	add	r4, r0
   d96d0:	6034      	str	r4, [r6, #0]
   d96d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d96d6:	e009      	b.n	d96ec <__d2b+0x92>
   d96d8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   d96dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d96e0:	6030      	str	r0, [r6, #0]
   d96e2:	6918      	ldr	r0, [r3, #16]
   d96e4:	f7ff fd42 	bl	d916c <__hi0bits>
   d96e8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   d96ec:	6028      	str	r0, [r5, #0]
   d96ee:	4638      	mov	r0, r7
   d96f0:	b003      	add	sp, #12
   d96f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d96f6 <__ratio>:
   d96f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d96fa:	4688      	mov	r8, r1
   d96fc:	4669      	mov	r1, sp
   d96fe:	4681      	mov	r9, r0
   d9700:	f7ff ff5e 	bl	d95c0 <__b2d>
   d9704:	a901      	add	r1, sp, #4
   d9706:	4640      	mov	r0, r8
   d9708:	ec55 4b10 	vmov	r4, r5, d0
   d970c:	f7ff ff58 	bl	d95c0 <__b2d>
   d9710:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d9714:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d9718:	1a9a      	subs	r2, r3, r2
   d971a:	e89d 000a 	ldmia.w	sp, {r1, r3}
   d971e:	1ac9      	subs	r1, r1, r3
   d9720:	ec57 6b10 	vmov	r6, r7, d0
   d9724:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   d9728:	2b00      	cmp	r3, #0
   d972a:	bfcc      	ite	gt
   d972c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   d9730:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   d9734:	4632      	mov	r2, r6
   d9736:	463b      	mov	r3, r7
   d9738:	4620      	mov	r0, r4
   d973a:	4629      	mov	r1, r5
   d973c:	f7fd ffb2 	bl	d76a4 <__aeabi_ddiv>
   d9740:	ec41 0b10 	vmov	d0, r0, r1
   d9744:	b003      	add	sp, #12
   d9746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d974a <__copybits>:
   d974a:	3901      	subs	r1, #1
   d974c:	b510      	push	{r4, lr}
   d974e:	1149      	asrs	r1, r1, #5
   d9750:	6914      	ldr	r4, [r2, #16]
   d9752:	3101      	adds	r1, #1
   d9754:	f102 0314 	add.w	r3, r2, #20
   d9758:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d975c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d9760:	42a3      	cmp	r3, r4
   d9762:	4602      	mov	r2, r0
   d9764:	d204      	bcs.n	d9770 <__copybits+0x26>
   d9766:	f853 2b04 	ldr.w	r2, [r3], #4
   d976a:	f840 2b04 	str.w	r2, [r0], #4
   d976e:	e7f7      	b.n	d9760 <__copybits+0x16>
   d9770:	2300      	movs	r3, #0
   d9772:	428a      	cmp	r2, r1
   d9774:	d202      	bcs.n	d977c <__copybits+0x32>
   d9776:	f842 3b04 	str.w	r3, [r2], #4
   d977a:	e7fa      	b.n	d9772 <__copybits+0x28>
   d977c:	bd10      	pop	{r4, pc}

000d977e <__any_on>:
   d977e:	f100 0214 	add.w	r2, r0, #20
   d9782:	6900      	ldr	r0, [r0, #16]
   d9784:	114b      	asrs	r3, r1, #5
   d9786:	4298      	cmp	r0, r3
   d9788:	b510      	push	{r4, lr}
   d978a:	db0c      	blt.n	d97a6 <__any_on+0x28>
   d978c:	dd0c      	ble.n	d97a8 <__any_on+0x2a>
   d978e:	f011 011f 	ands.w	r1, r1, #31
   d9792:	d009      	beq.n	d97a8 <__any_on+0x2a>
   d9794:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d9798:	fa24 f001 	lsr.w	r0, r4, r1
   d979c:	fa00 f101 	lsl.w	r1, r0, r1
   d97a0:	428c      	cmp	r4, r1
   d97a2:	d10c      	bne.n	d97be <__any_on+0x40>
   d97a4:	e000      	b.n	d97a8 <__any_on+0x2a>
   d97a6:	4603      	mov	r3, r0
   d97a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d97ac:	4293      	cmp	r3, r2
   d97ae:	d904      	bls.n	d97ba <__any_on+0x3c>
   d97b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d97b4:	2900      	cmp	r1, #0
   d97b6:	d0f9      	beq.n	d97ac <__any_on+0x2e>
   d97b8:	e001      	b.n	d97be <__any_on+0x40>
   d97ba:	2000      	movs	r0, #0
   d97bc:	bd10      	pop	{r4, pc}
   d97be:	2001      	movs	r0, #1
   d97c0:	bd10      	pop	{r4, pc}

000d97c2 <_calloc_r>:
   d97c2:	b538      	push	{r3, r4, r5, lr}
   d97c4:	fb02 f401 	mul.w	r4, r2, r1
   d97c8:	4621      	mov	r1, r4
   d97ca:	f7fb ff89 	bl	d56e0 <_malloc_r>
   d97ce:	4605      	mov	r5, r0
   d97d0:	b118      	cbz	r0, d97da <_calloc_r+0x18>
   d97d2:	4622      	mov	r2, r4
   d97d4:	2100      	movs	r1, #0
   d97d6:	f7fe f9ac 	bl	d7b32 <memset>
   d97da:	4628      	mov	r0, r5
   d97dc:	bd38      	pop	{r3, r4, r5, pc}

000d97de <link_code_end>:
	...

000d97e0 <dynalib_user>:
   d97e0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d97f0:	0000 0000 4724 4750 4147 2400 4e47 4747     ....$GPGGA.$GNGG
   d9800:	0041 4724 5250 434d 2400 4e47 4d52 0043     A.$GPRMC.$GNRMC.
   d9810:	5024 544d 314b 3538 302c 322a 0032 5024     $PMTK185,0*22.$P
   d9820:	544d 304b 3130 312c 3538 332c 332a 0043     MTK001,185,3*3C.
   d9830:	5024 544d 314b 3538 312c 322a 0033 5024     $PMTK185,1*23.$P
   d9840:	544d 314b 3338 332a 0038 5024 544d 4c4b     MTK183*38.$PMTKL
   d9850:	474f 2400 4d50 4b54 3631 2c31 2a30 3832     OG.$PMTK161,0*28
   d9860:	2400 4d50 4b54 3130 2c30 3030 2a32 4432     .$PMTK010,002*2D
   d9870:	2500 2c66 6625 2400 4d50 4b54 3133 2c34     .%f,%f.$PMTK314,
   d9880:	2c30 2c31 2c30 2c31 2c30 2c30 2c30 2c30     0,1,0,1,0,0,0,0,
   d9890:	2c30 2c30 2c30 2c30 2c30 2c30 2c30 2c30     0,0,0,0,0,0,0,0,
   d98a0:	2c30 2c30 2a30 3832 2400 4d50 4b54 3232     0,0,0*28.$PMTK22
   d98b0:	2c30 3031 3030 312a 0046 5024 4347 444d     0,1000*1F.$PGCMD
   d98c0:	332c 2c33 2a30 4436 4c00 5349 4433 0048     ,33,0*6D.LIS3DH.

000d98d0 <_ZTV15Adafruit_LIS3DH>:
	...
   d98d8:	48bf 000d 4a25 000d 48bd 000d 4edf 000d     .H..%J...H...N..
   d98e8:	4a6d 000d 3a76 2500 322e 0066 632c 003a     mJ..v:.%.2f.,c:.
   d98f8:	0042 6d74 646f 0065 6162 7474 6700 7370     B.tmode.batt.gps
   d9908:	6700 7370 6c20 7369 0074 6572 6573 2074     .gps list.reset 
   d9918:	6f6c 0067                                   log.

000d991c <_ZTVN5spark12NetworkClassE>:
	...
   d9924:	5701 000d 570b 000d 5715 000d 571f 000d     .W...W...W...W..
   d9934:	5729 000d 5735 000d 5741 000d 574d 000d     )W..5W..AW..MW..
   d9944:	5755 000d 575f 000d 5769 000d               UW.._W..iW..

000d9950 <_ZTVN5spark9MeshClassE>:
	...
   d9958:	585f 000d 5855 000d 584b 000d 5841 000d     _X..UX..KX..AX..
   d9968:	5835 000d 5829 000d 581d 000d 5815 000d     5X..)X...X...X..
   d9978:	580b 000d 5801 000d 5769 000d               .X...X..iW..

000d9984 <_ZTV8SPIClass>:
	...
   d998c:	5935 000d 5937 000d                         5Y..7Y..

000d9994 <_ZL14clock_divisors>:
   d9994:	0800 1810 2820 3830                         .... (08

000d999c <_ZTV7TwoWire>:
	...
   d99a4:	5a2d 000d 5a77 000d 5a4f 000d 5a2f 000d     -Z..wZ..OZ../Z..
   d99b4:	5a57 000d 5a5f 000d 5a67 000d 5a6f 000d     WZ.._Z..gZ..oZ..

000d99c4 <_ZTV9USBSerial>:
	...
   d99cc:	5b27 000d 5b6b 000d 5b45 000d 6571 000d     '[..k[..E[..qe..
   d99dc:	5b3f 000d 5b29 000d 5b31 000d 5b65 000d     ?[..)[..1[..e[..
   d99ec:	5b39 000d 5b23 000d                         9[..#[..

000d99f4 <_ZTV9IPAddress>:
	...
   d99fc:	5c13 000d 5c05 000d 5c07 000d               .\...\...\..

000d9a08 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9a10:	5ce9 000d 5cef 000d 5d17 000d 5cfb 000d     .\...\...]...\..
   d9a20:	5ceb 000d                                   .\..

000d9a24 <_ZTVN5spark13CellularClassE>:
	...
   d9a2c:	64db 000d 64d1 000d 64c7 000d 647d 000d     .d...d...d..}d..
   d9a3c:	64bb 000d 64af 000d 64a3 000d 649b 000d     .d...d...d...d..
   d9a4c:	6491 000d 6487 000d 5769 000d 005a 2b25     .d...d..iW..Z.%+
   d9a5c:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d9a6c:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d9a7c:	6974 656d 6c00 006e 6e66 6300 646f 0065     time.ln.fn.code.
   d9a8c:	6564 6174 6c69 0d00 000a 3025 3031 2075     detail....%010u 
   d9a9c:	5d00 0020 6425 2c00 0020 2928 203a 2000     .] .%d., .(): . 
   d9aac:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   d9abc:	6961 736c 3d20 0020 6162 6475 5300 7265     ails = .baud.Ser
   d9acc:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d9adc:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d9aec:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d9afc:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d9b0c:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d9b1c:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d9b2c:	6f4c 4867 6e61 6c64 7265 6100 7070 6e00     LogHandler.app.n
   d9b3c:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   d9b4c:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   d9b5c:	6c61 006c                                   all.

000d9b60 <_ZTV11USARTSerial>:
	...
   d9b68:	664d 000d 6671 000d 667d 000d 6571 000d     Mf..qf..}f..qe..
   d9b78:	6659 000d 6665 000d 665f 000d 666b 000d     Yf..ef.._f..kf..
   d9b88:	664f 000d 6653 000d                         Of..Sf..

000d9b90 <_ZTVN5spark13EthernetClassE>:
	...
   d9b98:	67a7 000d 679d 000d 6793 000d 6789 000d     .g...g...g...g..
   d9ba8:	677d 000d 6771 000d 6765 000d 675d 000d     }g..qg..eg..]g..
   d9bb8:	6753 000d 6749 000d 5769 000d 6d66 646f     Sg..Ig..iW..fmod
	...

000d9bd0 <Zero>:
	...
   d9bdc:	0000 8000                                   ....

000d9be0 <_ctype_>:
   d9be0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9bf0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9c00:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9c10:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d9c20:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d9c30:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d9c40:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d9c50:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d9c60:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d9ce4 <__sf_fake_stdin>:
	...

000d9d04 <__sf_fake_stdout>:
	...

000d9d24 <__sf_fake_stderr>:
	...
   d9d44:	4f50 4953 0058 002e                         POSIX...

000d9d4c <fpi.5344>:
   d9d4c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   d9d5c:	0000 0000                                   ....

000d9d60 <fpinan.5380>:
   d9d60:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   d9d70:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000d9d80 <tinytens>:
   d9d80:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   d9d90:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   d9da0:	6f43 64ac 0628 1168                         Co.d(.h.

000d9da8 <__mprec_tens>:
   d9da8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   d9db8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   d9dc8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   d9dd8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   d9de8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   d9df8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   d9e08:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   d9e18:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   d9e28:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   d9e38:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   d9e48:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   d9e58:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   d9e68:	9db4 79d9 7843 44ea                         ...yCx.D

000d9e70 <__mprec_bigtens>:
   d9e70:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   d9e80:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   d9e90:	bf3c 7f73 4fdd 7515                         <.s..O.u

000d9e98 <p05.5387>:
   d9e98:	0005 0000 0019 0000 007d 0000               ........}...

000d9ea4 <link_const_variable_data_end>:
   d9ea4:	000d48b9 	.word	0x000d48b9
   d9ea8:	000d4a31 	.word	0x000d4a31
   d9eac:	000d4f13 	.word	0x000d4f13
   d9eb0:	000d51e9 	.word	0x000d51e9
   d9eb4:	000d57ed 	.word	0x000d57ed
   d9eb8:	000d58e9 	.word	0x000d58e9
   d9ebc:	000d64e5 	.word	0x000d64e5
   d9ec0:	000d6531 	.word	0x000d6531
   d9ec4:	000d654d 	.word	0x000d654d
   d9ec8:	000d6561 	.word	0x000d6561
   d9ecc:	000d672d 	.word	0x000d672d
   d9ed0:	000d67b1 	.word	0x000d67b1
   d9ed4:	000d69e9 	.word	0x000d69e9
   d9ed8:	000d6b01 	.word	0x000d6b01
   d9edc:	000d6b85 	.word	0x000d6b85
   d9ee0:	000d6c49 	.word	0x000d6c49
   d9ee4:	000d6d0d 	.word	0x000d6d0d

000d9ee8 <link_constructors_end>:
	...
